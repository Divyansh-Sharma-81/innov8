problem ,tags,problem_statement,solution,input-output
https://codeforces.com/problemset/problem/1351/B,"brute force,implementation,math","Vasya claims that he had a paper square. He cut it into two rectangular parts using one vertical or horizontal cut. Then Vasya informed you the dimensions of these two rectangular parts. You need to check whether Vasya originally had a square. In other words, check if it is possible to make a square using two given rectangles.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \le t \le 10^4$) — the number of test cases in the input. Then $t$ test cases follow.\n\nEach test case is given in two lines.\n\nThe first line contains two integers $a_1$ and $b_1$ ($1 \le a_1, b_1 \le 100$) — the dimensions of the first one obtained after cutting rectangle. The sizes are given in random order (that is, it is not known which of the numbers is the width, and which of the numbers is the length).\n\nThe second line contains two integers $a_2$ and $b_2$ ($1 \le a_2, b_2 \le 100$) — the dimensions of the second obtained after cutting rectangle. The sizes are given in random order (that is, it is not known which of the numbers is the width, and which of the numbers is the length).\n\n\n-----Output-----\n\nPrint $t$ answers, each of which is a string ""YES"" (in the case of a positive answer) or ""NO"" (in the case of a negative answer). The letters in words can be printed in any case (upper or lower).\n\n\n-----Example-----\nInput\n3\n2 3\n3 1\n3 2\n1 3\n3 3\n1 3\n\nOutput\nYes\nYes\nNo","[""for _ in range(int(input())):\n    a1, b1 = list(map(int, input().split()))\n    a2, b2 = list(map(int, input().split()))\n    if a1 > b1:\n        a1, b1 = b1, a1\n    if a2 > b2:\n        a2, b2 = b2, a2\n    flag = False\n    if a1 == a2 and a1 == b1 + b2:\n        flag = True\n    if b1 == b2 and b1 == a1 + a2:\n        flag = True\n    print('Yes' if flag else 'No')\n"", ""t = int(input())\nfor _ in range(t):\n\ta1, b1 = map(int, input().split())\n\ta2, b2 = map(int, input().split())\n\tif a1 > b1:\n\t\ta1, b1 = b1, a1\n\tif a2 > b2:\n\t\ta2, b2 = b2, a2\n\n\tif b1 == b2 and a1 + a2 == b1:\n\t\tprint(\""Yes\"")\n\telse:\n\t\tprint(\""No\"")"", ""t = int(input())\nfor case in range(t):\n    a, b = list(map(int, input().split()))\n    c, d = list(map(int, input().split()))\n    if a == c and b + d == a:\n        print('Yes')\n    elif b == d and a + c == b:\n        print('Yes')\n    elif a == d and b + c == a:\n        print('Yes')\n    elif b == c and a + d == b:\n        print('Yes')\n    else:\n        print('No')"", ""import math\nfor _ in range(int(input())):\n    a,b=list(map(int,input().split()))\n    c,d=list(map(int,input().split()))\n    if min(c,d)+min(a,b)==max(a,b) and max(a,b)==max(c,d):\n        print(\""Yes\"")\n    else:\n        print(\""No\"")\n"", ""import sys\n\n\n\nfor t in range(int(sys.stdin.readline())):\n\n\n\ta, b = list(map(int, sys.stdin.readline().split()))\n\tx, y = list(map(int, sys.stdin.readline().split()))\n\ta, b = min(a, b), max(a, b)\n\tx, y = min(x, y), max(x, y)\n\tif b == y and b == a + x:\n\t\tsys.stdout.write(\""Yes\\n\"")\n\telse:\n\t\tsys.stdout.write(\""No\\n\"")\n"", ""import sys,bisect,string,math,time,functools,random\nfrom heapq import heappush,heappop,heapify\nfrom collections import deque,defaultdict,Counter\nfrom itertools import permutations,combinations,groupby\ndef Golf():*a,=map(int,open(0))\ndef I():return int(input())\ndef S_():return input()\ndef IS():return input().split()\ndef LS():return [i for i in input().split()]\ndef LI():return [int(i) for i in input().split()]\ndef LI_():return [int(i)-1 for i in input().split()]\ndef NI(n):return [int(input()) for i in range(n)]\ndef NI_(n):return [int(input())-1 for i in range(n)]\ndef StoLI():return [ord(i)-97 for i in input()]\ndef ItoS(n):return chr(n+97)\ndef LtoS(ls):return ''.join([chr(i+97) for i in ls])\ndef GI(V,E,ls=None,Directed=False,index=1):\n    org_inp=[];g=[[] for i in range(V)]\n    FromStdin=True if ls==None else False\n    for i in range(E):\n        if FromStdin:\n            inp=LI()\n            org_inp.append(inp)\n        else:\n            inp=ls[i]\n        if len(inp)==2:\n            a,b=inp;c=1\n        else:\n            a,b,c=inp\n        if index==1:a-=1;b-=1\n        aa=(a,c);bb=(b,c);g[a].append(bb)\n        if not Directed:g[b].append(aa)\n    return g,org_inp\ndef GGI(h,w,search=None,replacement_of_found='.',mp_def={'#':1,'.':0},boundary=1):\n#h,w,g,sg=GGI(h,w,search=['S','G'],replacement_of_found='.',mp_def={'#':1,'.':0}) # sample usage\n    mp=[boundary]*(w+2);found={}\n    for i in range(h):\n        s=input()\n        for char in search:\n            if char in s:\n                found[char]=((i+1)*(w+2)+s.index(char)+1)\n                mp_def[char]=mp_def[replacement_of_found]\n        mp+=[boundary]+[mp_def[j] for j in s]+[boundary]\n    mp+=[boundary]*(w+2)\n    return h+2,w+2,mp,found\ndef TI(n):return GI(n,n-1)\ndef bit_combination(k,n=2):\n    rt=[]\n    for tb in range(n**k):\n        s=[tb//(n**bt)%n for bt in range(k)];rt+=[s]\n    return rt\ndef show(*inp,end='\\n'):\n    if show_flg:print(*inp,end=end)\n\nYN=['YES','NO'];Yn=['Yes','No']\nmo=10**9+7\ninf=float('inf')\nl_alp=string.ascii_lowercase\n#sys.setrecursionlimit(10**7)\ninput=lambda: sys.stdin.readline().rstrip()\n\nclass Tree:\n    def __init__(self,inp_size=None,init=True):\n        self.LCA_init_stat=False\n        self.ETtable=[]\n        if init:\n            self.stdin(inp_size)\n        return\n\n    def stdin(self,inp_size=None,index=1):\n        if inp_size==None:\n            self.size=int(input())\n        else:\n            self.size=inp_size\n        self.edges,_=GI(self.size,self.size-1,index=index)\n        return\n    \n    def listin(self,ls,index=0):\n        self.size=len(ls)+1\n        self.edges,_=GI(self.size,self.size-1,ls,index=index)\n        return\n\n    def __str__(self):\n        return  str(self.edges)\n\n    def dfs(self,x,func=lambda prv,nx,dist:prv+dist,root_v=0):\n        q=deque()\n        q.append(x)\n        v=[-1]*self.size\n        v[x]=root_v\n        while q:\n            c=q.pop()\n            for nb,d in self.edges[c]:\n                if v[nb]==-1:\n                    q.append(nb)\n                    v[nb]=func(v[c],nb,d)\n        return v\n\n    def EulerTour(self,x):\n        q=deque()\n        q.append(x)\n        self.depth=[None]*self.size\n        self.depth[x]=0\n        self.ETtable=[]\n        self.ETdepth=[]\n        self.ETin=[-1]*self.size\n        self.ETout=[-1]*self.size\n        cnt=0\n        while q:\n            c=q.pop()\n            if c<0:\n                ce=~c\n            else:\n                ce=c\n                for nb,d in self.edges[ce]:\n                    if self.depth[nb]==None:\n                        q.append(~ce)\n                        q.append(nb)\n                        self.depth[nb]=self.depth[ce]+1\n            self.ETtable.append(ce)\n            self.ETdepth.append(self.depth[ce])\n            if self.ETin[ce]==-1:\n                self.ETin[ce]=cnt\n            else:\n                self.ETout[ce]=cnt\n            cnt+=1\n        return\n    \n    def LCA_init(self,root):\n        self.EulerTour(root)\n        self.st=SparseTable(self.ETdepth,init_func=min,init_idl=inf)\n        self.LCA_init_stat=True\n        return\n    \n    def LCA(self,root,x,y):\n        if self.LCA_init_stat==False:\n            self.LCA_init(root)\n        xin,xout=self.ETin[x],self.ETout[x]\n        yin,yout=self.ETin[y],self.ETout[y]\n        a=min(xin,yin)\n        b=max(xout,yout,xin,yin)\n        id_of_min_dep_in_et=self.st.query_id(a,b+1)\n        return self.ETtable[id_of_min_dep_in_et]\n\nclass SparseTable: # O(N log N) for init, O(1) for query(l,r)\n    def __init__(self,ls,init_func=min,init_idl=float('inf')):\n        self.func=init_func\n        self.idl=init_idl\n        self.size=len(ls)\n        self.N0=self.size.bit_length()\n        self.table=[ls[:]]\n        self.index=[list(range(self.size))]\n        self.lg=[0]*(self.size+1)\n        \n        for i in range(2,self.size+1):\n            self.lg[i]=self.lg[i>>1]+1\n\n        for i in range(self.N0):\n            tmp=[self.func(self.table[i][j],self.table[i][min(j+(1<<i),self.size-1)]) for j in range(self.size)]\n            tmp_id=[self.index[i][j] if self.table[i][j]==self.func(self.table[i][j],self.table[i][min(j+(1<<i),self.size-1)]) else self.index[i][min(j+(1<<i),self.size-1)] for j in range(self.size)]\n            self.table+=[tmp]\n            self.index+=[tmp_id]\n    \n    # return func of [l,r)\n    def query(self,l,r):\n        #N=(r-l).bit_length()-1\n        N=self.lg[r-l]\n        return self.func(self.table[N][l],self.table[N][r-(1<<N)])\n    \n    # return index of which val[i] = func of v among [l,r)\n    def query_id(self,l,r):\n        #N=(r-l).bit_length()-1\n        N=self.lg[r-l]\n        a,b=self.index[N][l],self.index[N][r-(1<<N)]\n        if self.table[0][a]==self.func(self.table[N][l],self.table[N][r-(1<<N)]):\n            b=a\n        return b\n    \n    def __str__(self):\n        return str(self.table[0])\n        \n    def print(self):\n        for i in self.table:\n            print(*i)\n\nshow_flg=False\nshow_flg=True\nans=0\n\nT=I()\nfor _ in range(T):\n    a,b=LI()\n    c,d=LI()\n    if a>b:\n        a,b=b,a\n    if c>d:\n        c,d=d,c\n    ans='Yes' if b==d and a+c==b else 'No'\n    print(ans)\n\n"", ""q = int(input())\n\nfor _ in range(q):\n    a, b = list(map(int, input().split()))\n    c, d = list(map(int, input().split()))\n    a, b = min(a, b), max(a, b)\n    c, d = min(c, d), max(c, d)\n    if b == d and a+c == b:\n        print(\""Yes\"")\n    else:\n        print(\""No\"")\n\n"", ""t=int(input())\nfor tests in range(t):\n    a1,b1=list(map(int,input().split()))\n    a2,b2=list(map(int,input().split()))\n\n    if min(a1,b1)+min(a2,b2)==max(a1,b1)==max(a2,b2):\n        print(\""Yes\"")\n    else:\n        print(\""No\"")\n"", ""for _ in range(int(input())):\n    a, b = list(map(int,input().split()))\n    c, d = list(map(int,input().split()))\n    if b > a:\n        a, b = b, a\n    if d > c:\n        c, d = d, c\n    if a == c == b+d:\n        print(\""Yes\"")\n    else:\n        print(\""No\"")\n"", ""for __ in range(int(input())):\n\ta,b=map(int,input().split())\n\tx,y=map(int,input().split())\n\tif(a==x and b+y==x):\n\t\tprint(\""Yes\"")\n\telif(a==y and b+x==y):\n\t\tprint(\""Yes\"")\n\telif(b==x and a+y==x):\n\t\tprint(\""Yes\"")\n\telif(b==y and a+x==y):\n\t\tprint(\""Yes\"")\n\telse:\n\t\tprint(\""No\"")"", ""t=int(input())\nfor i in range(t):\n    a,b=list(map(int,input().split()))\n    c,d=list(map(int,input().split()))\n    if max(a,b)==max(c,d):\n        if min(a,b)+min(c,d)==max(a,b):\n            print(\""Yes\"")\n        else:\n            print(\""No\"")\n    else:\n        print(\""No\"")\n"", ""t = int(input())\nfor i in range(t):\n    a, b = list(map(int, input().split()))\n    c, d = list(map(int, input().split()))\n    if a + c == b == d or a + d == b == c or b + c == a == d or b + d == a == c:\n        print(\""Yes\"")\n    else:\n        print(\""No\"")"", ""for n in range(int(input())):\n\ta,b=map(int,input().split())\n\tc,d=map(int,input().split())\n\tm1=max(a,b)\n\tn1=min(a,b)\n\tm2=max(c,d)\n\tn2=min(c,d)\n\tif m1==m2 and n1+n2==m1:\n\t\tprint('Yes')\n\telse:\n\t\tprint('No')"", ""a=int(input())\nfor i in range(a):\n    x,y=list(map(int,input().split()))\n    r,s=list(map(int,input().split()))\n    if(x==s and y+r==s):\n        print('Yes')\n    elif(x==r and y+s==x):\n        print('Yes')\n    elif(y==s and x+r==y):\n        print('Yes')\n    elif(y==r and x+s==y):\n        print('Yes')\n    else:\n        print('No')\n"", ""from sys import stdin, exit\ninput = stdin.readline\n\ndef i(): return input()\ndef ii(): return int(input())\ndef iis(): return list(map(int, input().split()))\ndef liis():\treturn list(map(int, input().split()))\ndef print_array(a): print(\"" \"".join(map(str, a)))\n\nt = ii()\nfor _ in range(t):\n\ta1, b1 = iis()\t\n\ta2, b2 = iis()\n\tif (a1 == a2 and b1+b2 == a1) or (a1 == b2 and a2+b1 == a1) or (a2 == b1 and a1+b2 == a2) or (b2 == b1 and a1+a2 == b2):\n\t\tprint(\""Yes\"")\n\telse:\n\t\tprint(\""No\"")\n"", ""T = int(input())\n\nfor t in range(T):\n  i1 = [int(i) for i in input().split(' ')]\n  i2 = [int(i) for i in input().split(' ')]\n  if i1[0]==i2[0] and i1[1]+i2[1]==i1[0]:\n    print('Yes')\n  elif i1[0]==i2[1] and i1[1]+i2[0]==i1[0]:\n    print('Yes')\n  elif i1[1]==i2[0] and i1[0]+i2[1]==i1[1]:\n    print('Yes')\n  elif i1[1]==i2[1] and i1[0]+i2[0]==i1[1]:\n    print('Yes')\n  else:\n    print('No')\n"", ""def read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\nt = read_int()\nfor case_num in range(t):\n    a = list(read_ints())\n    b = list(read_ints())\n    ok = False\n    for i in range(2):\n        for j in range(2):\n            if a[i] != b[j]:\n                continue\n            if a[1 - i] + b[1 - j] == a[i]:\n                ok = True\n    print('Yes' if ok else 'No')\n"", ""q = int(input())\nfor i in range(q):\n    a1, b1 = map(int, input().split())\n    a2, b2 = map(int, input().split())\n    if max(a1, b1) == max(a2, b2) == (min(a1, b1) + min(a2, b2)):\n        print('Yes')\n    else:\n        print('No')""]","{\n  ""inputs"": [\n    ""3\n2 3\n3 1\n3 2\n1 3\n3 3\n1 3\n""\n  ],\n  ""outputs"": [\n    ""Yes\nYes\nNo\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1295/A,greedy,"You have a large electronic screen which can display up to $998244353$ decimal digits. The digits are displayed in the same way as on different electronic alarm clocks: each place for a digit consists of $7$ segments which can be turned on and off to compose different digits. The following picture describes how you can display all $10$ decimal digits:\n\n[Image]\n\nAs you can see, different digits may require different number of segments to be turned on. For example, if you want to display $1$, you have to turn on $2$ segments of the screen, and if you want to display $8$, all $7$ segments of some place to display a digit should be turned on.\n\nYou want to display a really large integer on the screen. Unfortunately, the screen is bugged: no more than $n$ segments can be turned on simultaneously. So now you wonder what is the greatest integer that can be displayed by turning on no more than $n$ segments.\n\nYour program should be able to process $t$ different test cases.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \le t \le 100$) — the number of test cases in the input.\n\nThen the test cases follow, each of them is represented by a separate line containing one integer $n$ ($2 \le n \le 10^5$) — the maximum number of segments that can be turned on in the corresponding testcase.\n\nIt is guaranteed that the sum of $n$ over all test cases in the input does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, print the greatest integer that can be displayed by turning on no more than $n$ segments of the screen. Note that the answer may not fit in the standard $32$-bit or $64$-bit integral data type.\n\n\n-----Example-----\nInput\n2\n3\n4\n\nOutput\n7\n11","[""for _ in range(int(input())):\n\tn = int(input())\n\tif(n%2):\n\t\tprint(\""7\""+\""1\""*((n-3)//2))\n\telse:\n\t\tprint(\""1\""*(n//2))\t"", ""t=int(input())\nfor i in ' '*t:\n    n=int(input())\n    if n%2==1:print('7'+'1'*((n-3)//2))\n    else:print('1'*(n//2))"", ""for _ in range(int(input())):\n\tn = int(input())\n\n\tif n % 2:\n\t\tprint('7', end = \""\"")\n\t\tn -= 3\n\n\twhile n:\n\t\tprint('1', end = \""\"")\n\t\tn -= 2\n\n\tprint()"", ""T = int(input())\nfor kase in range(T):\n    n = int(input())\n    if n&1:\n        print('7'+(n-3)//2*'1')\n    else:\n        print(n//2*'1')"", ""for _ in range(int(input())):\n\tn=int(input())\n\tif n%2==1:\n\t\tprint(\""7\""+\""1\""*(n//2-1))\n\telse:\n\t\tprint(\""1\""*(n//2))"", ""import sys\ninput = sys.stdin.readline\ndef getInt(): return int(input())\ndef getVars(): return list(map(int, input().split()))\ndef getList(): return list(map(int, input().split()))\ndef getStr(): return input().strip()\n## -------------------------------\nt = getInt()\nfor _ in range(t):\n    n = getInt()\n    if n%2 == 1:\n        print('7' + '1' * (n//2 - 1))\n    else:\n        print('1'*(n//2))\n"", ""for _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print ('1' * (n // 2))\n    else:\n        print ('7' + '1' * ((n - 3) // 2))"", ""t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(\""7\"" * (n % 2) + \""1\"" * (n // 2 - (n % 2)))"", ""t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = ''\n    if (n % 2 == 1):\n        arr = '7'\n        for j in range((n - 3) // 2):\n            arr += '1'\n    else:\n        for j in range(n // 2):\n            arr += '1'\n    print(arr)\n\n"", ""import sys\nimport math\nimport itertools\nimport functools\nimport collections\nimport operator\n\n\ndef ii(): return int(input())\ndef mi(): return list(map(int, input().split()))\ndef li(): return list(map(int, input().split()))\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef revn(n): return str(n)[::-1]\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\ndef sieve(n):\n    if n < 2: return list()\n    prime = [True for _ in range(n + 1)]\n    p = 3\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 2\n    r = [2]\n    for p in range(3, n + 1, 2):\n        if prime[p]:\n            r.append(p)\n    return r\ndef divs(n, start=2):\n    r = []\n    for i in range(start, int(math.sqrt(n) + 1)):\n        if (n % i == 0):\n            if (n / i == i):\n                r.append(i)\n            else:\n                r.extend([i, n // i])\n    return r\ndef divn(n, primes):\n    divs_number = 1\n    for i in primes:\n        if n == 1:\n            return divs_number\n        t = 1\n        while n % i == 0:\n            t += 1\n            n //= i\n        divs_number *= t\ndef prime(n):\n    if n == 2: return True\n    if n % 2 == 0 or n <= 1: return False\n    sqr = int(math.sqrt(n)) + 1\n    for d in range(3, sqr, 2):\n        if n % d == 0: return False\n    return True\ndef convn(number, base):\n    newnumber = 0\n    while number > 0:\n        newnumber += number % base\n        number //= base\n    return newnumber\ndef cdiv(n, k): return n // k + (n % k != 0)\n\n\nt = ii()\nfor _ in range(t):\n    n = ii()\n    if n % 2:\n        print('7' + '1' * ((n - 3) // 2))\n    else:\n        print('1' * (n // 2))\n"", ""t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = ''\n    if n % 2:\n        s = '7'\n        n -= 3\n    else:\n        s = '1'\n        n -= 2\n    s += '1' * (n // 2)\n    print(s)\n"", ""t=int(input())\nfor _ in range(t):\n    n=int(input())\n    if n%2==0:\n        print(\""1\""*(n//2))\n    else:\n        print(\""7\""+\""1\""*((n-3)//2))\n        \n"", ""t =  int(input())\n\nfor _ in range(t):\n    n = int(input())\n    if (n%2==0):\n        print('1'*(n//2))\n    else:\n        print('7'+'1'*((n-3)//2))"", ""for _ in range(int(input())):\n    n=int(input())\n    if n%2==0:\n        print('1'*(n//2))\n    else:\n        print('7'+('1'*((n//2)-1)))\n"", ""t = int(input())\n\nwhile t:\n    t -= 1\n    n = int(input())\n    if n % 2 == 0:\n        print('1' * (n//2))\n    else:\n        print('7' + '1' * ((n - 3)//2))"", ""t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print('1'*(n//2))\n    else:\n        print('7'+'1'*(n//2-1))\n"", ""t = int(input())\nwhile t:\n    n = int(input())\n    o = \""1\"" * (n // 2)\n    if n % 2: o = \""7\"" + o[1:]\n    print(o)\n    t -= 1\n"", ""n=int(input())\nfor i in range(n):\n    d=int(input())\n    if d%2==1:\n        e=(d-3)//2\n        s='7'+'1'*e\n    else:\n        e=d//2\n        s='1'*e\n    print(s)"", ""t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(\""1\""*(n//2))\n    else:\n        print(\""7\""+\""1\""*(n//2-1))\n"", ""t=int(input())\nfor _ in range(t):\n    n=int(input())\n    if n%2==0:\n        x=n//2\n        for i in range(x):\n            print(1,end='')\n    else:\n        x=n//2\n        x-=1\n        print(7,end='')\n        for i in range(x):\n            print(1,end='')\n    print()"", ""t = int(input())\nfor y in range(t):\n\tn = int(input())\n\ts = \""\""\n\tif(n%2 == 1):\n\t\ts += '7'\n\t\tn -= 3\n\ts += (n//2)*'1'\n\tprint(int(s))""]","{""inputs"": [""2\n3\n4\n""], ""outputs"": [""7\n11\n""]}"
https://codeforces.com/problemset/problem/1380/A,"brute force,data structures","You are given a permutation $p_1, p_2, \dots, p_n$. Recall that sequence of $n$ integers is called a permutation if it contains all integers from $1$ to $n$ exactly once.\n\nFind three indices $i$, $j$ and $k$ such that:   $1 \le i < j < k \le n$;  $p_i < p_j$ and $p_j > p_k$.  Or say that there are no such indices.\n\n\n-----Input-----\n\nThe first line contains a single integer $T$ ($1 \le T \le 200$) — the number of test cases.\n\nNext $2T$ lines contain test cases — two lines per test case. The first line of each test case contains the single integer $n$ ($3 \le n \le 1000$) — the length of the permutation $p$.\n\nThe second line contains $n$ integers $p_1, p_2, \dots, p_n$ ($1 \le p_i \le n$; $p_i \neq p_j$ if $i \neq j$) — the permutation $p$.\n\n\n-----Output-----\n\nFor each test case:   if there are such indices $i$, $j$ and $k$, print YES (case insensitive) and the indices themselves;  if there are no such indices, print NO (case insensitive). \n\nIf there are multiple valid triples of indices, print any of them.\n\n\n-----Example-----\nInput\n3\n4\n2 1 4 3\n6\n4 6 1 2 5 3\n5\n5 3 1 2 4\n\nOutput\nYES\n2 3 4\nYES\n3 5 6\nNO","[""import sys\nimport math\n#from queue import *\nimport random\n#sys.setrecursionlimit(int(1e6))\ninput = sys.stdin.readline\n \n############ ---- USER DEFINED INPUT FUNCTIONS ---- ############\ndef inp():\n    return(int(input()))\ndef inara():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef invr():\n    return(list(map(int,input().split())))\n################################################################\n############ ---- THE ACTUAL CODE STARTS BELOW ---- ############\n\nt=inp()\n\nfor _ in range(t):\n\tn=inp()\n\tara=inara()\n\t\n\tans=[]\n\t\n\tfor i in range(1,n-1):\n\t\tif ara[i]>ara[i-1] and ara[i]>ara[i+1]:\n\t\t\tans.append(i)\n\t\t\tans.append(i+1)\n\t\t\tans.append(i+2)\n\t\t\tbreak\n\t\n\tif len(ans)==0:\n\t\tprint(\""NO\"")\n\telse:\n\t\tprint(\""YES\"")\n\t\tprint(*ans)\n\t\n\t\n\t\t\t\n"", ""for _ in range(int(input())):\n    N=int(input())\n    A=list(map(int,input().split()))\n    temp=0\n    for i in range(1,N-1):\n        if(A[i]>A[i-1] and A[i]>A[i+1]):\n            temp=1\n            print(\""YES\"")\n            print(i,i+1,i+2)\n            break\n    if(temp==0):\n        print(\""NO\"")"", ""T = int(input())\nfor _ in range(T):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    ans = 'NO'\n    for i in range(1, n -1):\n        if ls[i] > ls[i-1] and ls[i] > ls[i+1]:\n            ans = 'YES'\n            break\n    if ans == 'NO':\n        print(ans)\n    else:\n        i += 1\n        print(ans)\n        print(i-1, i, i+1)"", ""import sys\n# from collections import defaultdict\n# t=1\nt=int(input())\nfor i in range(t):\n    n=int(input())\n    a=list(map(int,sys.stdin.readline().strip().split()))\n    # a,b,c,d=list(sys.stdin.readline().strip().split())\n    # n,k=list(map(int,sys.stdin.readline().strip().split()))\n    \n    x1=[]\n    x2=[]\n    \n    x=a[0]\n    mni=0\n    for j in range(n):\n       if(a[j]<x):\n           x=a[j]\n           mni=j\n       x1.append([x,mni])\n    \n    x=a[n-1]\n    mni=n-1\n    for j in range(n-1,-1,-1):\n        if(a[j]<x):\n            x=a[j]\n            mni=j\n        x2.append([x,mni])\n        \n    f=0\n    for j in range(1,n-1):\n        if(x1[j-1][0]<a[j] and a[j]>x2[n-j-1][0]):\n            print(\""YES\"")\n            print(x1[j-1][1]+1,j+1,x2[n-j-1][1]+1)\n            f=1\n            break\n    if(f):\n        continue\n    print(\""NO\"")\n"", ""for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    for i in range(1, n - 1):\n        if p[i] > p[i - 1] and p[i] > p[i + 1]:\n            print(\""YES\"")\n            print(i, i + 1, i + 2)\n            break\n    else:\n        print(\""NO\"")"", ""for _ in range(int(input())):\n\tn=int(input())\n\ta=list(map(int,input().split()))\n\t#n,k=map(int,input().split())\n\tyes=0 \n\tfor i in range(1,n-1):\n\t\tif(a[i]>a[i-1] and a[i]>a[i+1]):\n\t\t\tprint('YES')\n\t\t\tprint(i-1+1,i+1,i+2)\n\t\t\tyes=1\n\t\t\tbreak \n\tif(yes==0):\n\t\tprint('NO')"", ""def main():\n\t# n ,m= map(int,input().split())\n\t# arr = list(map(int,input().split()))\n\t# b = list(map(int,input().split()))\n\t# n = int(input())\n\t# string = str(input())\n\t# a = list(map(int,input().split()))\t\n\tn = int(input())\n\ta = list(map(int,input().split()))\n\tfor i in range(n-2):\n\t\tif a[i]<a[i+1] and a[i+1]>a[i+2]:\n\t\t\tprint(\""YES\"")\n\t\t\tprint(i+1,i+2,i+3)\n\t\t\treturn\n\tprint(\""NO\"")\n\t\n\t\n# main()\ndef test():\n\tt = int(input())\n\twhile t:\n\t\tmain()\n\t\tt-=1\ntest()"", ""\nfor kek in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    flag = False\n    ans = 0\n    for i in range(1, n-1):\n\n        if p[i-1] < p[i] and p[i] > p[i+1]:\n            flag = True\n            ans = i + 1\n            break\n\n    if flag:\n        print('YES')\n        print(ans-1,ans,ans+1)\n    else:\n        print('NO')\n"", ""t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    for i in range(1,n-1):\n        if A[i-1] < A[i] and A[i] > A[i+1]:\n            print('YES')\n            print(i, i+1, i+2)\n            break\n    else:\n        print('NO')\n\n"", ""from math import *\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    for i in range(1,n-1):\n        if a[i]>a[i-1] and a[i]>a[i+1]:\n            print('YES')\n            print(i,i+1,i+2)\n            break\n    else:\n        print('NO')\n"", ""t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    for i in range(1,n-1):\n        if A[i-1] < A[i] and A[i] > A[i+1]:\n            print('YES')\n            print(i, i+1, i+2)\n            break\n    else:\n        print('NO')\n\n"", ""from sys import stdin, stdout\nimport math,sys\nfrom itertools import permutations, combinations\nfrom collections import defaultdict,deque,OrderedDict\nfrom os import path\nimport bisect as bi\nimport heapq \ndef yes():print('YES')\ndef no():print('NO')\nif (path.exists('input.txt')): \n    #------------------Sublime--------------------------------------#\n    sys.stdin=open('input.txt','r');sys.stdout=open('output.txt','w');\n    def I():return (int(input()))\n    def In():return(list(map(int,input().split())))\nelse:\n    #------------------PYPY FAst I/o--------------------------------#\n    def I():return (int(stdin.readline()))\n    def In():return(list(map(int,stdin.readline().split())))\n\ndef dict(a):\n    d={}\n    for x in a:\n        if d.get(x,-1)!=-1:\n            d[x]+=1\n        else:\n            d[x]=1\n    return d\n\ndef main():\n    try:\n        n=I()\n        l=list(In())\n        ans=-1\n        for x in range(1,n-1):\n            if l[x-1]<l[x] and l[x]>l[x+1]:\n                ans=x\n                break\n        if ans==-1:\n            no()\n        else:\n            yes()\n            print(ans,ans+1,ans+2)\n\n    except:\n        pass\n        \nM = 998244353\nP = 1000000007\n \ndef __starting_point():\n    for _ in range(I()):main()\n    #for _ in range(1):main()\n\n__starting_point()""]","{\n  ""inputs"": [\n    ""3\n4\n2 1 4 3\n6\n4 6 1 2 5 3\n5\n5 3 1 2 4\n""\n  ],\n  ""outputs"": [\n    ""YES\n2 3 4\nYES\n1 2 3\nNO\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1282/A,"implementation,math","Polycarp lives on the coordinate axis $Ox$ and travels from the point $x=a$ to $x=b$. It moves uniformly rectilinearly at a speed of one unit of distance per minute.\n\nOn the axis $Ox$ at the point $x=c$ the base station of the mobile operator is placed. It is known that the radius of its coverage is $r$. Thus, if Polycarp is at a distance less than or equal to $r$ from the point $x=c$, then he is in the network coverage area, otherwise — no. The base station can be located both on the route of Polycarp and outside it.\n\nPrint the time in minutes during which Polycarp will not be in the coverage area of the network, with a rectilinear uniform movement from $x=a$ to $x=b$. His speed — one unit of distance per minute.\n\n\n-----Input-----\n\nThe first line contains a positive integer $t$ ($1 \le t \le 1000$) — the number of test cases. In the following lines are written $t$ test cases.\n\nThe description of each test case is one line, which contains four integers $a$, $b$, $c$ and $r$ ($-10^8 \le a,b,c \le 10^8$, $0 \le r \le 10^8$) — the coordinates of the starting and ending points of the path, the base station, and its coverage radius, respectively.\n\nAny of the numbers $a$, $b$ and $c$ can be equal (either any pair or all three numbers). The base station can be located both on the route of Polycarp and outside it.\n\n\n-----Output-----\n\nPrint $t$ numbers — answers to given test cases in the order they are written in the test. Each answer is an integer — the number of minutes during which Polycarp will be unavailable during his movement.\n\n\n-----Example-----\nInput\n9\n1 10 7 1\n3 3 3 0\n8 2 10 4\n8 2 10 100\n-10 20 -17 2\n-3 2 2 0\n-3 1 2 0\n2 3 2 3\n-1 3 -2 2\n\nOutput\n7\n0\n4\n0\n30\n5\n4\n0\n3\n\n\n\n-----Note-----\n\nThe following picture illustrates the first test case.  [Image] Polycarp goes from $1$ to $10$. The yellow area shows the coverage area of the station with a radius of coverage of $1$, which is located at the point of $7$. The green area shows a part of the path when Polycarp is out of coverage area.","[""import os\nfrom io import BytesIO\n\n# input = BytesIO(os.read(0, os.fstat(0).st_size)).readline\nfor i in range(int(input())):\n    a, b, c, r = list(map(int, input().split()))\n    a, b = min(a, b), max(a, b)\n    left = max(c - r, a)\n    right = min(c + r, b)\n    if right >= a and left <= right:\n        print(b - a - (right - left))\n    else:\n        print(b - a)\n"", ""from math import *\nimport os, sys\nfrom io import BytesIO\n\n#input = BytesIO(os.read(0, os.fstat(0).st_size)).readline\nsys.setrecursionlimit(10 ** 9)\n#sys.stdin = open(\""moobuzz.in\"", 'r')\n#sys.stdout = open(\""moobuzz.out\"", 'w')\n\n\nfor i in range(int(input())):\n\ta, b, c, r = list(map(int, input().split()))\n\tc1 = c - r\n\tc2 = c + r\n\td1 = max(min(a, b), min(c1, c2))\n\td2 = min(max(a, b), max(c1, c2))\n\tprint(abs(b - a) - max(d2 - d1, 0))\n"", ""t = int(input())\nfor i in range(t):\n    a, b, c, r = list(map(int, input().split()))\n\n    s = max(min(a, b), c - r)\n    f = min(max(a, b), c + r)\n\n    l = max(0, f - s)\n    print(abs(a - b) - l)\n"", ""#!/usr/bin/env python3\n# coding: utf-8\n# Last Modified: 24/Dec/19 08:08:49 PM\n\n\nimport sys\n\n\ndef main():\n    for tc in range(int(input())):\n        a, b, c, r = get_ints()\n\n        if a > b:\n            a, b = b, a\n\n        arr = [c - r, c + r]\n\n        ans = 0\n\n        if a > c + r:\n            print(abs(b - a))\n            continue\n\n        if b < c - r:\n            print(abs(b - a))\n            continue\n\n        if a < c - r:\n            ans += abs(a - (c - r))\n\n        if b > c + r:\n            ans += abs(b - (c + r))\n\n        print(ans)\n\n\nget_array = lambda: list(map(int, sys.stdin.readline().split()))\n\n\nget_ints = lambda: list(map(int, sys.stdin.readline().split()))\n\n\ninput = lambda: sys.stdin.readline().strip()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"", ""for _ in range(int(input())):\n    a,b,c,r=map(int,input().split())\n    a,b=min(a,b),max(a,b)\n    n = b - a\n    l,f = c-r,c+r\n    if a>l:\n        a,b,l,f=l,f,a,b\n    # print (a,b,l,f)\n\n    if l >= b:\n        print (n)\n    else:\n        if f <= b:\n            print (n - (f - l))\n        else:\n            print (n - (b - l))"", ""t = int(input())\nfor i in range(t):\n\ta, b, c, r = list(map(int, input().split()))\n\tif b < a:\n\t\ta, b = b, a\n\tk = min(c + r, b) - max(c - r, a)\n\td = b - a\n\tif k <= 0:\n\t\tprint(d)\n\telse:\n\t\tprint(d - k)\n"", ""import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int,minp().split()))\n\ndef solve():\n\ta,b,c,r = mints()\n\tif a > b:\n\t\ta, b = b, a\n\treturn b-a-max(min(c+r,b)-max(c-r,a), 0)\n\nfor i in range(mint()):\n\tprint(solve())\n"", ""for tcase in range(int(input())):\n    a,b,c,r = list(map(int, input().split()))\n\n    ca, cb = c-r, c+r\n\n    a,b = min(a,b), max(a,b)\n\n    if b<=ca:\n        print(b-a)\n    elif cb<=a:\n        print(b-a)\n    elif a<=ca<=b<=cb:\n        print(ca-a)\n    elif ca<=a<=cb<=b:\n        print(b-cb)\n    elif a<=ca<=cb<=b:\n        print((ca-a)+(b-cb))\n    elif ca<=a<=b<=cb:\n        print(0)\n    else:\n        print(0)\n"", ""import sys\nfrom collections import Counter\nfrom math import *\n\n# sys.stdin = open(\""in.txt\"")\nfor _ in range(int(input())):\n    a, b, c, r = map(int, input().split())\n    if b < a:\n        a, b = b, a\n    res1 = max(a, c - r)\n    res2 = min(b, c + r)\n    print(max(0, b - a - max(0, res2 - res1)))"", ""for _ in range(int(input())):\n\ta,b,c,r = map(int,input().split())\n\tif a > b: a,b = b,a\n\tx = max(c-r,a)\n\ty = min(c+r,b)\n\tans = b-a\n\tans -= max(0,y-x) \n\tprint(max(ans,0))\t\t"", ""for _ in range(int(input())):\n    a, b, c, r = list(map(int, input().split()))\n    if a > b:\n        a, b = b, a\n    x, y = c - r, c + r\n    d = max(0, min(b, y) - max(x, a))\n    print(b - a - d)\n"", ""t = int(input())\n\nfor _ in range(t):\n    a, b, c, r = list(map(int, input().strip().split()))\n    a, b = min(a,b), max(a, b)\n    \n    low = max(a, c-r)\n    high = min(b, c+r)\n    unavaialbe = high - low\n    unavaialbe = max(unavaialbe, 0)\n    print(b - a - unavaialbe)\n"", ""t = int(input())\nwhile t>0:\n    t-=1\n    a,b,c,r = map(int,input().split())\n    if a>b:\n        a,b=b,a\n    print(min(max((c-r)-a,0)+max(b-(c+r),0),abs(b-a)))"", ""t = int(input())\nfor _ in range(t):\n    a, b, c, r = list(map(int, input().split()))\n    if b < a:\n        a, b = b, a\n    ans = 0\n    if c < a:\n        if c + r < a:\n            ans = b - a\n        else:\n            ans = max(b - (c + r), 0)\n    elif c > b:\n        if c - r > b:\n            ans = b - a\n        else:\n            ans = max((c - r) - a, 0)\n    else:\n        ans += max(0, b - (c + r)) + max(0, c - r - a)\n    print(ans)\n"", ""from sys import stdin, exit\nfrom math import *\n\ndef main():\n    def len_intersect(a, b, c, d):\n        if d <= a or c >= b:\n            return 0\n        u, v = (max(a, c), min(b, d))\n        return max(0, v - u)\n\n    for testcase in range(int(stdin.readline())):\n        a, b, c, r = list(map(int, stdin.readline().split()))\n        if a > b:\n            a, b = b, a\n        print(b - a - len_intersect(a, b, c - r, c + r))\n\ndef __starting_point():\n    main()\n\n__starting_point()"", ""for i in range(int(input())):\n    a,b,c,r=map(int,input().split())\n    x=c-r\n    y=c+r\n    if a>b:a,b=b,a\n    z=max(0,min(y,b)-max(x,a))\n    print(b-a-z)""]","{\n  ""inputs"": [\n    ""9\n1 10 7 1\n3 3 3 0\n8 2 10 4\n8 2 10 100\n-10 20 -17 2\n-3 2 2 0\n-3 1 2 0\n2 3 2 3\n-1 3 -2 2\n""\n  ],\n  ""outputs"": [\n    ""7\n0\n4\n0\n30\n5\n4\n0\n3\n""\n  ]\n}"
