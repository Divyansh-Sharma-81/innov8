problem link,tags,problem_statement,solution,input-output
https://codeforces.com/problemset/problem/1443/A,"constructive algorithms,math","Today the kindergarten has a new group of $n$ kids who need to be seated at the dinner table. The chairs at the table are numbered from $1$ to $4n$. Two kids can't sit on the same chair. It is known that two kids who sit on chairs with numbers $a$ and $b$ ($a \neq b$) will indulge if:   $gcd(a, b) = 1$ or,  $a$ divides $b$ or $b$ divides $a$. \n\n$gcd(a, b)$Â â€” the maximum number $x$ such that $a$ is divisible by $x$ and $b$ is divisible by $x$.\n\nFor example, if $n=3$ and the kids sit on chairs with numbers $2$, $3$, $4$, then they will indulge since $4$ is divided by $2$ and $gcd(2, 3) = 1$. If kids sit on chairs with numbers $4$, $6$, $10$, then they will not indulge.\n\nThe teacher really doesn't want the mess at the table, so she wants to seat the kids so there are no $2$ of the kid that can indulge. More formally, she wants no pair of chairs $a$ and $b$ that the kids occupy to fulfill the condition above.\n\nSince the teacher is very busy with the entertainment of the kids, she asked you to solve this problem.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \leq t \leq 100$)Â â€” the number of test cases. Then $t$ test cases follow.\n\nEach test case consists of one line containing an integer $n$ ($1 \leq n \leq 100$)Â â€” the number of kids.\n\n\n-----Output-----\n\nOutput $t$ lines, which contain $n$ distinct integers from $1$ to $4n$Â â€” the numbers of chairs that the kids should occupy in the corresponding test case. If there are multiple answers, print any of them. You can print $n$ numbers in any order.\n\n\n-----Example-----\nInput\n3\n2\n3\n4\n\nOutput\n6 4\n4 6 10\n14 10 12 8","[""t=int(input())\nfor you in range(t):\n    n=int(input())\n    for i in range(n):\n        print(4*n-2*i,end=\"" \"")\n    print()\n"", ""for _ in range(int(input())):\n    n = int(input())\n    for i in range(4 * n, 2 * n, -2):\n        print(i, end=' ')\n    print(' ')\n"", ""import sys\ninput=sys.stdin.readline\nfrom collections import defaultdict\n\nfor _ in range(int(input())):\n    n=int(input())\n    x=4*n\n    for i in range(n):\n        print(x,end=\"" \"")\n        x-=2\n    print()\n\n\n"", ""for _ in range (int(input())):\n    n=int(input())\n    for i in range (4*n,4*n-2*n,-2):\n        print(i,end=' ')\n    print()"", ""import sys,math\n# import re\n# from heapq import *\n# from collections import defaultdict as dd\n# from collections import Counter as cc\n# sys.setrecursionlimit(10**6)#thsis is must\nmod = 10**9+7; md = 998244353\ninput = lambda: sys.stdin.readline().strip()\ninp = lambda: list(map(int,input().split()))\n#______________________________________________________\nfor _ in range(int(input())):\n\tn = int(input())\n\tt = 4*n\n\tfor i in range(n):\n\t\tprint(t,end = \"" \"")\n\t\tt-=2\n\tprint()"", ""for i in range(int(input())):\n    n=int(input())\n    l=[]\n    a=4*n\n    for j in range(n):\n        l.append(a)\n        a-=2\n    print(*l)\n    \n"", ""import sys\nimport math\nimport itertools\nimport functools\nimport collections\nimport operator\nimport fileinput\nimport copy\nimport string\n\n\nORDA = 97  # a\ndef ii(): return int(input())\ndef mi(): return list(map(int, input().split()))\ndef li(): return [int(i) for i in input().split()]\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef revn(n): return str(n)[::-1]\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\ndef sieve(n):\n    if n < 2: return list()\n    prime = [True for _ in range(n + 1)]\n    p = 3\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 2\n    r = [2]\n    for p in range(3, n + 1, 2):\n        if prime[p]:\n            r.append(p)\n    return r\ndef divs(n, start=2):\n    r = []\n    for i in range(start, int(math.sqrt(n) + 1)):\n        if (n % i == 0):\n            if (n / i == i):\n                r.append(i)\n            else:\n                r.extend([i, n // i])\n    return r\ndef divn(n, primes):\n    divs_number = 1\n    for i in primes:\n        if n == 1:\n            return divs_number\n        t = 1\n        while n % i == 0:\n            t += 1\n            n //= i\n        divs_number *= t\ndef prime(n):\n    if n == 2: return True\n    if n % 2 == 0 or n <= 1: return False\n    sqr = int(math.sqrt(n)) + 1\n    for d in range(3, sqr, 2):\n        if n % d == 0: return False\n    return True\ndef convn(number, base):\n    new_number = 0\n    while number > 0:\n        new_number += number % base\n        number //= base\n    return new_number\ndef cdiv(n, k): return n // k + (n % k != 0)\ndef ispal(s):\n    for i in range(len(s) // 2 + 1):\n        if s[i] != s[-i - 1]:\n            return False\n    return True\n\n\nfor _ in range(ii()):\n    n = ii()\n    print(*[i for i in range(2 * n + 2, 4 * n + 2, 2)])\n"", ""a = int(input())\nfor i in range (a):\n    b = int(input())\n    for j in range (2 * b + 2, 4 * b, 2):\n        print(j, end = \"" \"")\n    print(4 * b)"", ""def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        p = []\n        for i in range(n):\n            p.append(4 * n - i * 2)\n        print(*p)\nmain()"", ""t = int(input())\nfor case in range(t):\n    n = int(input())\n    ans = [2 * n + 2 * i + 2 for i in range(n)]\n    print(*ans)"", ""import math\nimport sys\n\n\ndef chek(m, b, c, li):\n    for i in range(li):\n        if m[i] + b[i] > c:\n            return False\n    return True\n\n\n# 113759\ninput = lambda: sys.stdin.readline().rstrip()\nf = int(input())\nfor _ in range(f):\n    n = int(input())\n    n = n * 4\n    for i in range(n, n // 2 , -1):\n        if i % 2 == 0:\n            print(i, end=' ')\n    print()"", ""import sys\ninput=sys.stdin.readline\n\nT=int(input())\nfor _ in range(T):\n    #N,K=map(int,input().split())\n    #A=list(map(int,input().split()))\n    n=int(input())\n    v=4*n\n    for i in range(n):\n        print(v,end=\"" \"")\n        v=v-2\n    print()\n"", ""for i in range(int(input())):\n n=int(input())\n g=[]\n c=4*n\n for j in range(n):\n  g.append(c)\n  c=c-2\n print(' '.join(map(str,g))) "", ""# map(int, input().split())\ndef main():\n    n = int(input())\n    for i in range(4 * n, 2 * n, -2):\n        print(i, end = ' ')\n    print('')\n\n\nrw = int(input())\nfor wewq in range(rw):\n    main()\n""]","{""inputs"": [""3\n2\n3\n4\n""], ""outputs"": [""8 6 \n12 10 8 \n16 14 12 10 \n""]}"
https://codeforces.com/problemset/problem/1408/A,constructive algorithm,"You are given three sequences: $a_1, a_2, \ldots, a_n$; $b_1, b_2, \ldots, b_n$; $c_1, c_2, \ldots, c_n$.\n\nFor each $i$, $a_i \neq b_i$, $a_i \neq c_i$, $b_i \neq c_i$.\n\nFind a sequence $p_1, p_2, \ldots, p_n$, that satisfy the following conditions:\n\n\n\n $p_i \in \{a_i, b_i, c_i\}$\n\n $p_i \neq p_{(i \mod n) + 1}$.\n\nIn other words, for each element, you need to choose one of the three possible values, such that no two adjacent elements (where we consider elements $i,i+1$ adjacent for $i<n$ and also elements $1$ and $n$) will have equal value.\n\nIt can be proved that in the given constraints solution always exists. You don't need to minimize/maximize anything, you need to find any proper sequence.\n\n\n-----Input-----\n\nThe first line of input contains one integer $t$ ($1 \leq t \leq 100$): the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($3 \leq n \leq 100$): the number of elements in the given sequences.\n\nThe second line contains $n$ integers $a_1, a_2, \ldots, a_n$ ($1 \leq a_i \leq 100$).\n\nThe third line contains $n$ integers $b_1, b_2, \ldots, b_n$ ($1 \leq b_i \leq 100$).\n\nThe fourth line contains $n$ integers $c_1, c_2, \ldots, c_n$ ($1 \leq c_i \leq 100$).\n\nIt is guaranteed that $a_i \neq b_i$, $a_i \neq c_i$, $b_i \neq c_i$ for all $i$.\n\n\n-----Output-----\n\nFor each test case, print $n$ integers: $p_1, p_2, \ldots, p_n$ ($p_i \in \{a_i, b_i, c_i\}$, $p_i \neq p_{i \mod n + 1}$).\n\nIf there are several solutions, you can print any.\n\n\n-----Example-----\nInput\n5\n3\n1 1 1\n2 2 2\n3 3 3\n4\n1 2 1 2\n2 1 2 1\n3 4 3 4\n7\n1 3 3 1 1 1 1\n2 4 4 3 2 2 4\n4 2 2 2 4 4 2\n3\n1 2 1\n2 3 3\n3 1 2\n10\n1 1 1 2 2 2 3 3 3 1\n2 2 2 3 3 3 1 1 1 2\n3 3 3 1 1 1 2 2 2 3\n\nOutput\n1 2 3\n1 2 1 2\n1 3 4 3 2 4 2\n1 3 2\n1 2 3 1 2 3 1 2 3 2\n\n\n\n-----Note-----\n\nIn the first test case $p = [1, 2, 3]$.\n\nIt is a correct answer, because:\n\n  $p_1 = 1 = a_1$, $p_2 = 2 = b_2$, $p_3 = 3 = c_3$  $p_1 \neq p_2 $, $p_2 \neq p_3 $, $p_3 \neq p_1$ \n\nAll possible correct answers to this test case are: $[1, 2, 3]$, $[1, 3, 2]$, $[2, 1, 3]$, $[2, 3, 1]$, $[3, 1, 2]$, $[3, 2, 1]$.\n\nIn the second test case $p = [1, 2, 1, 2]$.\n\nIn this sequence $p_1 = a_1$, $p_2 = a_2$, $p_3 = a_3$, $p_4 = a_4$. Also we can see, that no two adjacent elements of the sequence are equal.\n\nIn the third test case $p = [1, 3, 4, 3, 2, 4, 2]$.\n\nIn this sequence $p_1 = a_1$, $p_2 = a_2$, $p_3 = b_3$, $p_4 = b_4$, $p_5 = b_5$, $p_6 = c_6$, $p_7 = c_7$. Also we can see, that no two adjacent elements of the sequence are equal.","[""import sys\nimport random\nfrom fractions import Fraction\nfrom math import *\n \ndef input():\n    return sys.stdin.readline().strip()\n \ndef iinput():\n    return int(input())\n\ndef finput():\n    return float(input())\n\ndef tinput():\n    return input().split()\n\ndef linput():\n    return list(input())\n \ndef rinput():\n    return list(map(int, tinput()))\n\ndef fiinput():\n    return list(map(float, tinput()))\n \ndef rlinput():\n    return list(map(int, input().split()))\ndef trinput():\n    return tuple(rinput())\n\ndef srlinput():\n    return sorted(list(map(int, input().split())))\n\ndef NOYES(fl):\n    if fl:\n        print(\""NO\"")\n    else:\n        print(\""YES\"")\ndef YESNO(fl):\n    if fl:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n    \ndef main():\n    n = iinput()\n    #k = iinput() \n    #m = iinput() \n    #n = int(sys.stdin.readline().strip()) \n    #n, k = rinput()\n    #n, m = rinput()\n    #m, k = rinput()\n    #n, k, m = rinput()\n    #n, m, k = rinput()\n    #k, n, m = rinput()\n    #k, m, n = rinput() \n    #m, k, n = rinput()\n    #m, n, k = rinput()\n    q = [rlinput(), rlinput(), rlinput()]\n    #q = linput()\n    ans = q[0].copy()\n    for i in range(1, n):\n        if ans[i] == ans[i - 1]:\n            ans[i] = q[1][i]\n        if i == n - 1:\n            o = 0\n            while q[o][i] == ans[n - 2] or q[o][i] == ans[0]:\n                o += 1\n            ans[i] = q[o][i]\n    print(*ans)\n\n        \n\n            \n        \n    \n                \n    \n    \n    \n            \n    \n        \n    \n\nfor i in range(iinput()):\n    main()\n"", ""for _ in range(int(input())):\n  n=int(input())\n  a=list(map(int,input().split()))\n  b=list(map(int,input().split()))\n  c=list(map(int,input().split()))\n  p=a\n  for i in range(n):\n    if p[i]==p[(i+1)%n]:\n      if p[i]!=b[i] and p[(i-1)%n]!=b[i]:p[i]=b[i]\n      else:p[i]=c[i]\n  print(*p)"", ""for __ in range(int(input())):\n    n = int(input())\n    ar1 = list(map(int, input().split()))\n    ar2 = list(map(int, input().split()))\n    ar3 = list(map(int, input().split()))\n    ans = [ar1[0]]\n    for i in range(1, n - 1):\n        if ar1[i] != ans[-1]:\n            ans.append(ar1[i])\n        elif ar2[i] != ans[-1]:\n            ans.append(ar2[i])\n        elif ar3[i] != ans[-1]:\n            ans.append(ar3[i])\n    if ar1[-1] != ans[-1] and ar1[-1] != ans[0]:\n        ans.append(ar1[-1])\n    elif ar2[-1] != ans[-1] and ar2[-1] != ans[0]:\n        ans.append(ar2[-1])\n    elif ar3[-1] != ans[-1] and ar3[-1] != ans[0]:\n        ans.append(ar3[-1])\n    print(*ans)"", ""T = int(input())\n\nfor t in range(T):\n    N = int(input())\n    A = [int(_) for _ in input().split()]\n    B = [int(_) for _ in input().split()]\n    C = [int(_) for _ in input().split()]\n\n    R = []\n\n    for i in range(N):\n        if i == 0:\n            R.append(A[i])\n            continue\n        if i == N-1:\n            if A[i] != R[0] and A[i] != R[-1]:\n                R.append(A[i])\n            elif B[i] != R[0] and B[i] != R[-1]:\n                R.append(B[i])\n            else:\n                R.append(C[i])\n            continue\n\n        if A[i] != R[-1]:\n            R.append(A[i])\n        else:\n            R.append(B[i])\n\n    print(' '.join(map(str, R)))\n"", ""gans = []\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    ans = [a[0]]\n    for i in range(1, n - 1):\n        if a[i] != ans[i - 1]:\n            ans.append(a[i])\n        else:\n            ans.append(b[i])\n    if a[-1] != ans[-1] and a[-1] != ans[0]:\n        ans.append(a[-1])\n    elif b[-1] != ans[-1] and b[-1] != ans[0]:\n        ans.append(b[-1])\n    else:\n        ans.append(c[-1])\n    gans.append(' '.join(map(str, ans)))\nprint('\\n'.join(gans))\n"", ""from math import *\nfrom bisect import *\nfrom collections import *\nfrom random import *\nfrom decimal import *\nimport sys\ninput=sys.stdin.readline\ndef inp():\n    return int(input())\ndef st():\n    return input().rstrip('\\n')\ndef lis():\n    return list(map(int,input().split()))\ndef ma():\n    return list(map(int,input().split()))\nt=inp()\nwhile(t):\n    t-=1\n    n=inp()\n    a=lis()\n    b=lis()\n    c=lis()\n    r=[a[0]]\n    for i in range(1,n):\n        if(i==n-1):\n            if(a[i]!=r[0] and a[i]!=r[-1]):\n                r.append(a[i])\n                continue\n            if(b[i]!=r[0] and b[i]!=r[-1]):\n                r.append(b[i])\n                continue\n            if(c[i]!=r[0] and c[i]!=r[-1]):\n                r.append(c[i])\n                continue\n        if(a[i]!=r[-1]):\n            r.append(a[i])\n            continue\n        if(b[i]!=r[-1]):\n            r.append(b[i])\n            continue\n        if(c[i]!=r[-1]):\n            r.append(c[i])\n            continue\n    print(*r)\n        \n        \n        \n""]","{\n  ""inputs"": [\n    ""5\n3\n1 1 1\n2 2 2\n3 3 3\n4\n1 2 1 2\n2 1 2 1\n3 4 3 4\n7\n1 3 3 1 1 1 1\n2 4 4 3 2 2 4\n4 2 2 2 4 4 2\n3\n1 2 1\n2 3 3\n3 1 2\n10\n1 1 1 2 2 2 3 3 3 1\n2 2 2 3 3 3 1 1 1 2\n3 3 3 1 1 1 2 2 2 3\n""\n  ],\n  ""outputs"": [\n    ""1 2 3\n1 2 1 2\n1 3 4 1 2 1 4\n1 2 3\n1 2 1 2 3 2 3 1 3 2\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1430/B,"greedy,implementation,sortings","You have $n$ barrels lined up in a row, numbered from left to right from one. Initially, the $i$-th barrel contains $a_i$ liters of water.\n\nYou can pour water from one barrel to another. In one act of pouring, you can choose two different barrels $x$ and $y$ (the $x$-th barrel shouldn't be empty) and pour any possible amount of water from barrel $x$ to barrel $y$ (possibly, all water). You may assume that barrels have infinite capacity, so you can pour any amount of water in each of them. \n\nCalculate the maximum possible difference between the maximum and the minimum amount of water in the barrels, if you can pour water at most $k$ times.\n\nSome examples:   if you have four barrels, each containing $5$ liters of water, and $k = 1$, you may pour $5$ liters from the second barrel into the fourth, so the amounts of water in the barrels are $[5, 0, 5, 10]$, and the difference between the maximum and the minimum is $10$;  if all barrels are empty, you can't make any operation, so the difference between the maximum and the minimum amount is still $0$. \n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \le t \le 1000$)Â â€” the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \le k < n \le 2 \cdot 10^5$)Â â€” the number of barrels and the number of pourings you can make.\n\nThe second line contains $n$ integers $a_1, a_2, \dots, a_n$ ($0 \le a_i \le 10^{9}$), where $a_i$ is the initial amount of water the $i$-th barrel has.\n\nIt's guaranteed that the total sum of $n$ over test cases doesn't exceed $2 \cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, print the maximum possible difference between the maximum and the minimum amount of water in the barrels, if you can pour water at most $k$ times.\n\n\n-----Example-----\nInput\n2\n4 1\n5 5 5 5\n3 2\n0 0 0\n\nOutput\n10\n0","[""def solve():\n    n, k = map(int,input().split())\n    lst = list(map(int,input().split()))\n    lst.sort()\n    ans = 0\n    for i in range(n - k - 1, n):\n        ans += lst[i]\n    print(ans)\nfor i in range(int(input())):\n    solve()"", ""t=int(input())\nfor i in range(t):\n    n,k=[int(i) for i in input().split()]\n    a=[int(i) for i in input().split()]\n    a.sort(reverse=True)\n    print(sum(a[:k+1]))"", ""# map(int, input().split())\nrw = int(input())\nfor wewq in range(rw):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort()\n    a.reverse()\n    f = 0\n    for i in range(k + 1):\n        f += a[i]\n    print(f)\n"", ""t=int(input())\nfor you in range(t):\n    l=input().split()\n    n=int(l[0])\n    k=int(l[1])\n    l=input().split()\n    li=[int(i) for i in l]\n    if(k==0):\n        print(max(li)-min(li))\n        continue\n    z=0\n    li.sort()\n    li.reverse()\n    for i in range(k+1):\n        z+=li[i]\n    print(z)\n"", ""for _ in range (int(input())):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split()))\n    a.sort(reverse=True)\n    for i in range (1,k+1):\n        a[0]+=a[i]\n        a[i]=0\n    print(a[0]-a[1])"", ""for __ in range(int(input())):\n    n, k = list(map(int, input().split()))\n    ar = list(map(int, input().split()))\n    ar.sort(reverse=True)\n    ans = 0\n    for i in range(min(n, k + 1)):\n        ans += ar[i]\n    print(ans)"", ""import sys, math\nimport io, os\n#data = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\nfrom bisect import bisect_left as bl, bisect_right as br, insort\nfrom heapq import heapify, heappush, heappop\nfrom collections import defaultdict as dd, deque, Counter\n#from itertools import permutations,combinations\ndef data(): return sys.stdin.readline().strip()\ndef mdata(): return list(map(int, data().split()))\ndef outl(var) : sys.stdout.write('\\n'.join(map(str, var))+'\\n')\ndef out(var) : sys.stdout.write(str(var)+'\\n')\n#from decimal import Decimal\n#from fractions import Fraction\n#sys.setrecursionlimit(100000)\nINF = float('inf')\nmod=10**9+7\n\n\nfor t in range(int(data())):\n    n,k=mdata()\n    a=sorted(mdata(),reverse=True)\n    s=sum(a[:k+1])\n    out(s)\n"", ""import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor i in range(t):\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    a.sort()\n    a.reverse()\n    cum = [a[0]]\n    for i in range(n-1):\n        cum.append(cum[i]+a[i+1])\n    cum.append(cum[-1])\n    print(cum[k])"", ""t = int(input())\nfor _ in range(t):\n    #n = int(input())\n    n, k=map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    s=0\n    for i in range(k+1):\n        s+=a[n-1-i]\n    print(s)"", ""def main():\n    N, K = list(map(int, input().split()))\n    *A, = list(map(int, input().split()))\n    \n    A.sort()\n    print(A[-1] + sum(A[-K-1:-1]))\n\ndef __starting_point():\n    for __ in [0]*int(input()):\n        main()\n\n__starting_point()"", ""import sys\nimport random\n# import numpy as np\nimport math\nimport copy\nfrom heapq import heappush, heappop, heapify\nfrom functools import cmp_to_key\nfrom bisect import bisect_left, bisect_right\nfrom collections import defaultdict, deque, Counter\n# sys.setrecursionlimit(1000000)\n# input aliases\ninput = sys.stdin.readline\ngetS = lambda: input().strip()\ngetN = lambda: int(input())\ngetList = lambda: list(map(int, input().split()))\ngetZList = lambda: [int(x) - 1 for x in input().split()]\n\nINF = float(\""inf\"")\n\nMOD = 10 ** 9 + 7\ndivide = lambda x: pow(x, MOD-2, MOD)\n\ndef judge(at, ax, ay, bt, bx, by):\n    if abs(at - bt) >= abs(ax - bx) + abs(ay - by):\n        return True\n    else:\n        return False\n\n\ndef solve():\n    n, k = getList()\n    li = getList()\n\n    if k >= n:\n        print(sum(li))\n        return\n\n    li.sort(reverse=True)\n    print(sum(li[:k+1]))\n\n    return\n\ndef main():\n    n = getN()\n    for _ in range(n):\n        solve()\n\n    return\ndef __starting_point():\n    main()\n    # solve()\n\n__starting_point()"", ""from sys import stdin\nt = int(stdin.readline())\nfor _ in range(t):\n    n, k = tuple(int(x) for x in stdin.readline().split())\n    lst = sorted(int(x) for x in stdin.readline().split())\n    print(sum(lst[-k-1:]))\n"", ""t = int(input())\nfor _ in range(t):\n    n,k = [int(x) for x in input().split()]\n    l = [int(x) for x in input().split()]\n    l.sort()\n    l.reverse()\n    print(sum(l[:min(k+1,n)]))"", ""for _ in range(int(input())):\n\tn, k = list(map(int, input().split()))\n\tA = list(map(int, input().split()))\n\n\tA.sort(reverse=True)\n\tif k == 0:\n\t\tprint(max(A) - min(A))\n\telse:\n\t\tprint(A[0] + sum(A[1:k+1]))\n"", ""n = int(input())\n\nfor _ in range(n):\n    n, k = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    arr.sort(reverse=True)\n\n    print(sum(arr[:k+1]))\n"", ""\""\""\""T=int(input())\nfor _ in range(0,T):\n    n=int(input())\n    a,b=map(int,input().split())\n    s=input()\n    s=[int(x) for x in input().split()]\n    for i in range(0,len(s)):\n        a,b=map(int,input().split())\""\""\""\n\n\nT=int(input())\nfor _ in range(0,T):\n    n,k=list(map(int,input().split()))\n    s=[int(x) for x in input().split()]\n    s.sort()\n    s=s[::-1]\n    for i in range(1,min(k+1,len(s))):\n        s[0]+=s[i]\n\n    print(s[0])\n"", ""t=int(input())\nwhile t:\n\tt-=1\n\tn,k=list(map(int,input().split()))\n\ta=[int(i) for i in input().split()]\n\ta.sort()\n\tans=0\n\ta.reverse()\n\tfor i in range(k+1):\n\t\tans+=a[i]\n\t\t\n\tprint(ans)\n""]","{\n  ""inputs"": [\n    ""2\n4 1\n5 5 5 5\n3 2\n0 0 0\n""\n  ],\n  ""outputs"": [\n    ""10\n0\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1398/B,"games,greedy,sortings","Alice and Bob play a game. They have a binary string $s$ (a string such that each character in it is either $0$ or $1$). Alice moves first, then Bob, then Alice again, and so on.\n\nDuring their move, the player can choose any number (not less than one) of consecutive equal characters in $s$ and delete them.\n\nFor example, if the string is $10110$, there are $6$ possible moves (deleted characters are bold):  $\textbf{1}0110 \to 0110$;  $1\textbf{0}110 \to 1110$;  $10\textbf{1}10 \to 1010$;  $101\textbf{1}0 \to 1010$;  $10\textbf{11}0 \to 100$;  $1011\textbf{0} \to 1011$. \n\nAfter the characters are removed, the characters to the left and to the right of the removed block become adjacent. I. e. the following sequence of moves is valid: $10\textbf{11}0 \to 1\textbf{00} \to 1$.\n\nThe game ends when the string becomes empty, and the score of each player is the number of $1$-characters deleted by them.\n\nEach player wants to maximize their score. Calculate the resulting score of Alice.\n\n\n-----Input-----\n\nThe first line contains one integer $T$ ($1 \le T \le 500$) â€” the number of test cases.\n\nEach test case contains exactly one line containing a binary string $s$ ($1 \le |s| \le 100$).\n\n\n-----Output-----\n\nFor each test case, print one integer â€” the resulting score of Alice (the number of $1$-characters deleted by her).\n\n\n-----Example-----\nInput\n5\n01111001\n0000\n111111\n101010101\n011011110111\n\nOutput\n4\n0\n6\n3\n6\n\n\n\n-----Note-----\n\nQuestions about the optimal strategy will be ignored.","[""for _ in range(int(input())):\n    s = input()\n    p = [i for i in s.split(\""0\"") if i!=\""\""]\n    p.sort(reverse=True)\n    ans = 0\n    for i in range(0,len(p),2):\n        ans+=len(p[i])\n    print(ans)\n\n"", ""for _ in range(int(input())):\n    s=[len(i)for i in input().split('0')]\n    s.sort()\n    print(sum(s[-1::-2]))"", ""for _ in range(int(input())):\n    s = input()\n    t = [i for i in s.split(\""0\"") if i!=\""\""]\n    t.sort(reverse=True)\n    cnt=0\n    for i in range(0,len(t),2):\n        cnt+=len(t[i])\n    print(cnt)"", ""for _ in range(int(input())):\n    s = input()\n    ar = []\n    cur = 0\n    for c in s:\n        if c == \""1\"":\n            cur += 1\n        else:\n            ar.append(cur)\n            cur = 0\n    if cur != 0:\n        ar.append(cur)\n    ar.sort()\n    ar.reverse()\n    print(sum(ar[::2]))\n"", ""for nt in range(int(input())):\n\ts = input()\n\tn = len(s)\n\tif s[0]==\""1\"":\n\t\tcount = 1\n\telse:\n\t\tcount = 0\n\tgroups = []\n\tfor i in range(1,n):\n\t\tif s[i]==\""1\"":\n\t\t\tcount += 1\n\t\telse:\n\t\t\tif count:\n\t\t\t\tgroups.append(count)\n\t\t\tcount = 0\n\tif count:\n\t\tgroups.append(count)\n\tgroups.sort(reverse=True)\n\tans = 0\n\tfor i in range(0,len(groups),2):\n\t\tans += groups[i]\n\tprint (ans)\n"", ""def solv():\n\ts=list(map(int,input()))\n\tv=[]\n\tsm=0\n\tfor n in s:\n\t\tif n:\n\t\t\tsm+=1\n\t\telse:\n\t\t\tv.append(sm)\n\t\t\tsm=0\n\tif sm:v.append(sm)\n\tv.sort(reverse=True)\n\n\tres=0\n\n\tfor n in range(0,len(v),2):res+=v[n]\n\tprint(res)\n\nfor _ in range(int(input())):solv()"", ""import math\nt=int(input())\nfor w in range(t):\n    s=sorted(input().split('0'),reverse=True)\n    c=0\n    for i in range(0,len(s),2):\n        c+=len(s[i])\n    print(c)"", ""from itertools import groupby\n\nt = int(input())\n\nfor _ in range(t):\n    s = input()\n    l = []\n    for k, v in groupby(s):\n        if k == '1':\n            l.append(len(list(v)))\n    l.sort(reverse=True)\n    n = len(l)\n    res = 0\n    for i in range(0, n, 2):\n        res += l[i]\n    print(res)\n"", ""for _ in range(int(input())):\n    s = input()\n    x = sorted(len(i) for i in s.split('0') if len(i) > 0)\n\n    print(max(sum(x[::2]), sum(x[1::2])))"", ""from sys import stdin,stdout\nfrom math import sqrt,gcd,ceil,floor,log2,log10,factorial,cos,acos,tan,atan,atan2,sin,asin,radians,degrees,hypot\nfrom bisect import insort, insort_left, insort_right, bisect_left, bisect_right, bisect\nfrom array import array\nfrom functools import reduce\nfrom itertools import combinations, combinations_with_replacement, permutations\nfrom fractions import Fraction\nfrom random import choice,getrandbits,randint,random,randrange,shuffle\nfrom re import compile,findall,escape\nfrom statistics import mean,median,mode\nfrom heapq import heapify,heappop,heappush,heappushpop,heapreplace,merge,nlargest,nsmallest\n\nfor test in range(int(stdin.readline())):\n    s=input()\n    l=findall(r'1+',s)\n    lengths=[len(i) for i in l]\n    lengths.sort(reverse=True)\n    alice=0\n    for i in range(0,len(lengths),2):\n        alice+=lengths[i]\n    print(alice)"", ""import sys\ninput = sys.stdin.readline\nT = int(input())\n\nfor t in range(T):\n    s = input()[:-1]\n\n    counts = []\n    current = 0\n    for c in s:\n        if c == '1':\n            current += 1\n        else:\n            counts.append(current)\n            current = 0\n    if current:\n        counts.append(current)\n\n    res = 0\n    counts = sorted(counts, reverse=True)\n    for i in range(len(counts)):\n        if 2*i >= len(counts):\n            break\n        res += counts[2*i]\n    print(res)\n"", ""import sys\nimport math\ndef II():\n\treturn int(sys.stdin.readline())\n\ndef LI():\n\treturn list(map(int, sys.stdin.readline().split()))\n\ndef MI():\n\treturn map(int, sys.stdin.readline().split())\n\ndef SI():\n\treturn sys.stdin.readline().strip()\nt = II()\nfor q in range(t):\n\ts = SI()\n\ta = []\n\tcount = 0\n\tfor i in range(len(s)):\n\t\tif s[i] == \""1\"":\n\t\t\tcount+=1\n\t\telse:\n\t\t\ta.append(count)\n\t\t\tcount = 0\n\ta.append(count)\n\ta.sort(reverse=True)\n\tprint(sum(a[0:len(a):2]))"", ""from math import *\nfrom collections import *\nfrom random import *\nfrom decimal import Decimal\nfrom heapq import *\nfrom bisect import *\nimport sys\ninput=sys.stdin.readline\nsys.setrecursionlimit(10**5)\ndef lis():\n    return list(map(int,input().split()))\ndef ma():\n    return list(map(int,input().split()))\ndef inp():\n    return int(input())\ndef st1():\n    return input().rstrip('\\n')\nt=inp()\nwhile(t):\n    t-=1\n    #n=inp()\n    a=st1()\n    oe=[]\n    c=0\n    for i in a:\n        if(i=='1'):\n            c+=1\n        else:\n            if(c!=0):\n                oe.append(c)\n                c=0\n    if(c):\n        oe.append(c)\n    s=0\n    oe.sort(reverse=True)\n    for i in range(len(oe)):\n        if(i%2==0):\n            s+=oe[i]\n    print(s)\n        \n"", ""for _ in range(int(input())):\n    s = input() + '0'\n    A = []\n    tr = False\n    x = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            if tr:\n                x += 1\n            else:\n                tr = True\n                x = 1\n        else:\n            if tr:\n                tr = False\n                A.append(x)\n    A.sort(reverse=True)\n    Ans = 0\n    for i in range(len(A)):\n        if i % 2 == 0:\n            Ans += A[i]\n    print(Ans)"", ""t = int(input())\nwhile t:\n    s = input()\n    arr = []\n    k = 0\n    for i in s:\n        if i == '1':\n            k += 1\n        else:\n            arr.append(k)\n            k = 0\n    if k:\n        arr.append(k)\n    arr.sort(reverse=True)\n    ans = 0\n    for i in range(0, len(arr), 2):\n        ans += arr[i]\n    print(ans)\n    t -= 1\n"", ""import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    x = input().rstrip()\n    \n    arr = []\n    \n    c = 0\n    for char in x:\n        if char=='1':\n            c+=1\n        else:\n            arr.append(c)\n            c = 0\n            \n    arr.append(c)\n    arr.sort()\n    arr.reverse()\n    \n    ans = 0\n    for i in range(0,len(arr),2):\n        ans += arr[i]\n        \n    print(ans)"", ""import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    S=input().strip()+\""0\""\n\n    L=[]\n\n    NOW=0\n    for s in S:\n        if s==\""0\"":\n            L.append(NOW)\n            NOW=0\n        else:\n            NOW+=1\n\n    L.sort(reverse=True)\n\n    ANS=0\n\n    for i in range(0,len(L),2):\n        ANS+=L[i]\n\n    print(ANS)\n        \n"", ""for _ in range (int(input())):\n    s=input()\n    a = []\n    flag = 0\n    count = 0\n    for i in range (len(s)):\n        if s[i]=='1':\n            count+=1\n        else:\n            a.append(count)\n            count=0\n        if i==len(s)-1 and count!=0:\n            a.append(count)\n    a.sort(reverse=True)\n    ans = 0\n    for i in range(len(a)):\n        if i%2==0:\n            ans+=a[i]\n    print(ans)"", ""for t in range(int(input())):\n\ts = input()\n\tlast = -1\n\tnum = []\n\tn = len(s)\n\tfor i in range(n):\n\t\tif (s[i] == \""0\""):\n\t\t\tif (i - last - 1 > 0):\n\t\t\t\tnum.append(i - last - 1)\n\t\t\tlast = i\n\tif (n - last - 1 > 0):\n\t\tnum.append(n - last - 1)\n\tnum = sorted(num)[::-1]\n\tans = 0\n\tfor i in range(0, len(num), 2):\n\t\tans += num[i]\n\tprint(ans)"", ""for test in range(int(input())):\n    s = input()\n    a = []\n    now = 0\n    n = len(s)\n    for i in range(n):\n        if s[i] == \""0\"":\n            if now > 0:\n                a.append(now)\n            now = 0\n        else:\n            now += 1\n    if now > 0:\n        a.append(now)\n    a.sort(reverse=True)\n    ans = 0\n    for i in range(0, len(a), 2):\n        ans += a[i]\n    print(ans)"", ""for _ in range(int(input())):\n    s = input()\n\n    ones = []\n    cnt = 0\n    for i in s:\n        if i == '1':\n            cnt += 1\n        else:\n            if cnt != 0:\n                ones.append(cnt)\n                cnt = 0\n    if cnt != 0:\n        ones.append(cnt)\n\n    ones.sort(reverse=True)\n    print(sum(ones[::2]))\n"", ""from collections import defaultdict as dd\nimport math\nimport sys\ninput=sys.stdin.readline\ndef nn():\n\treturn int(input())\n\ndef li():\n\treturn list(input())\n\ndef mi():\n\treturn list(map(int, input().split()))\n\ndef lm():\n\treturn list(map(int, input().split()))\n\ndef solve():\n\ts = input()\n\n\tsets = []\n\tstreak = 0\n\tfor i in range(len(s)):\n\t\tif s[i]=='1':\n\t\t\tstreak+=1\n\t\telse:\n\t\t\tif streak>0:\n\t\t\t\tsets.append(streak)\n\t\t\t\tstreak=0\n\tif streak>0:\n\t\tsets.append(streak)\n\t\tstreak=0\n\n\tsets.sort(reverse=True)\n\n\tprint(sum(sets[::2]))\n\n\nq=nn()\nfor _ in range(q):\n\tsolve()\n"", ""t = int(input())\n\nfor _ in range(t):\n    s = [int(i) for i in input().strip()]\n    n = len(s)\n    bckt = []\n    ct = 0\n    \n    for i in range(n):\n        if s[i]:\n            ct += 1\n        else:\n            if ct:\n                bckt.append(ct)\n                ct = 0\n    \n    if ct:\n        bckt.append(ct)\n        \n    bckt.sort(reverse=True)\n    print(sum(bckt[::2]))"", ""for i in range(int(input())):\n\tip=list(map(int,input()))\n\tones=[]\n\ttot=0\n\tfor i in ip:\n\t\tif i==1:\n\t\t\ttot+=1\n\t\telse:\n\t\t\tones.append(tot)\n\t\t\ttot=0\n\tif tot:ones.append(tot)\n\tones.sort(reverse=True)\n\tans=0\n\tfor i in range(0,len(ones),2):\n\t\tans+=ones[i]\n\tprint(ans)"", ""#BINOD\nimport math\ntest = int(input())\nfor t in range(test):\n    s = input()\n    n = len(s)\n    A = []\n    o=0\n    for i in range(n):\n        if(s[i]=='1'):\n            o+=1\n        else:\n            A.append(o)\n            o=0\n    if(s[n-1]=='1'):\n        A.append(o)\n    A.sort(reverse = True)\n    ans = 0\n    for i in range(0,len(A),2):\n        ans += A[i]\n    print(ans)\n\n\n\n\n#Binod\n"", ""for _ in range(int(input())):\n    data = list(map(int,list(input())))\n    fl = False\n    data.append(\""&\"")\n    l = 0\n    st = []\n    for i in range(len(data)):\n        if fl and data[i] == 1:\n            l+=1\n            continue\n        if fl and data[i]!=1:\n            st.append(l)\n            l = 0\n            fl = False\n            continue\n        if not fl and data[i] == 1:\n            l = 1\n            fl = True\n    st.sort(reverse=True)\n    c1 = 0\n    for i in range(0,len(st),2):\n        c1+=st[i]\n    print(c1)"", ""import math\nfrom collections import deque\nfrom sys import stdin, stdout\nfrom string import ascii_letters\ninput = stdin.readline\n#print = stdout.write\nletters = ascii_letters[:26]\n \nfor _ in range(int(input())):\n    arr = list(map(int, input().strip()))\n    lens = []\n    count = 0\n    for i in arr:\n        if i == 0:\n            if count > 0:\n                lens.append(count)\n            count = 0\n        else:\n            count += 1\n    if count > 0:\n        lens.append(count)\n    lens.sort(reverse=True)\n    res = 0\n    for i in range(0, len(lens), 2):\n        res += lens[i]\n    print(res)\n""]","{\n  ""inputs"": [\n    ""5\n01111001\n0000\n111111\n101010101\n011011110111\n""\n  ],\n  ""outputs"": [\n    ""4\n0\n6\n3\n6\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1315/A,implementation,"Screen resolution of Polycarp's monitor is $a \times b$ pixels. Unfortunately, there is one dead pixel at his screen. It has coordinates $(x, y)$ ($0 \le x < a, 0 \le y < b$). You can consider columns of pixels to be numbered from $0$ to $a-1$, and rowsÂ â€” from $0$ to $b-1$.\n\nPolycarp wants to open a rectangular window of maximal size, which doesn't contain the dead pixel. The boundaries of the window should be parallel to the sides of the screen.\n\nPrint the maximal area (in pixels) of a window that doesn't contain the dead pixel inside itself.\n\n\n-----Input-----\n\nIn the first line you are given an integer $t$ ($1 \le t \le 10^4$)Â â€” the number of test cases in the test. In the next lines you are given descriptions of $t$ test cases.\n\nEach test case contains a single line which consists of $4$ integers $a, b, x$ and $y$ ($1 \le a, b \le 10^4$; $0 \le x < a$; $0 \le y < b$)Â â€” the resolution of the screen and the coordinates of a dead pixel. It is guaranteed that $a+b>2$ (e.g. $a=b=1$ is impossible).\n\n\n-----Output-----\n\nPrint $t$ integersÂ â€” the answers for each test case. Each answer should contain an integer equal to the maximal possible area (in pixels) of a rectangular window, that doesn't contain the dead pixel.\n\n\n-----Example-----\nInput\n6\n8 8 0 0\n1 10 0 3\n17 31 10 4\n2 1 0 0\n5 10 3 9\n10 10 4 8\n\nOutput\n56\n6\n442\n1\n45\n80\n\n\n\n-----Note-----\n\nIn the first test case, the screen resolution is $8 \times 8$, and the upper left pixel is a dead pixel. Here you can see one of two possible layouts of the maximal window. [Image]","[""from math import *\n\nzzz = int(input())\nfor zz in range(zzz):\n    a, b, x, y = list(map(int, input().split()))\n    print(max(x*b, (a-x-1)*b, y*a, (b - y - 1)*a))\n"", ""for t in range(int(input())):\n    a, b, x, y = [int(i) for i in input().split()]\n    l = max(x, a - 1 - x)\n    h = max(y, b - 1 - y)\n    print(max(l * b, h * a))\n"", ""for _ in range(int(input())):\n    a, b, x, y = list(map(int, input().split()))\n    num1 = x * b\n    num2 = y * a\n    num3 = (a - x - 1) * b\n    num4 = (b - y - 1) * a\n    print(max(num2, num1, num3, num4))"", ""for _ in range(int(input())):\n    a, b, x, y = map(int, input().split())\n    w = max(a-1-x, x)\n    h = max(b-1-y, y)\n\n    ans = max(w * b, h * a)\n    print(ans)"", ""for _ in range(int(input())):\n    a, b, x, y = list(map(int, input().split()))\n    print(max(x*b, y*a, (a-x-1)*b, (b-y-1)*a))\n"", ""t = int(input())\nfor _ in range(t):\n\ta, b, x, y = map(int, input().split())\n\tr = max([a*y, a*(b-y-1), b*x, b*(a-x-1)])\n\tprint(r)"", ""t = int(input())\nfor _ in range(t):\n    a, b, x, y = list(map(int, input().split()))\n    print(max(a*y, a*(b-y-1), x*b, (a-x-1)*b))\n"", ""t = int(input())\nfor _ in range(t):\n\ta, b, x, y = map(int, input().split())\n\n\tl = max(a*y, a*(b-y-1))\n\tll = max(b*x, b*(a-x-1))\n\tprint(max(l, ll))"", ""import sys\ninput = sys.stdin.readline\nfor k in range(int(input())):\n    a, b, x, y = list(map(int, input().split(\"" \"")))\n    print(max(a*y, b*x, (b-1-y)*a, (a-1-x)*b)) \n"", ""import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n  h,w,x,y = map(int,input().split())\n  can = [h*y,h*(w-1-y),w*x,w*(h-1-x)]\n  print(max(can))"", ""t = int(input())\nfor _ in range(t):\n  n,m,a,b = map(int,input().split())\n  print(max(max(a,n-a-1)*m,max(b,m-b-1)*n))"", ""# from collections import deque\nimport sys\ninput = lambda: sys.stdin.readline().strip()\nfor i in range(int(input())):\n    a,b,x,y = map(int,input().split())\n    print(max(a*y,b*x,a*(b-y-1),b*(a-x-1)))"", ""for _ in range(int(input())):\n    n,m,x,y=map(int,input().split())\n    s=0\n    s=max(s,x*m)\n    s=max(s,(n-x-1)*m)\n    s=max(s,y*n)\n    s=max(s,(m-y-1)*n)\n    print(s)"", ""t = int(input())\nfor i in range(t):\n    a, b, x, y = list(map(int, input().split()))\n    print(max(x * b, y * a, (a - x - 1) * b, (b - y - 1) * a))\n"", ""t = int(input())\nfor _ in range(t):\n    a,b,x,y = map(int, input().split())\n    print(max([x*b,(a-x-1)*b,a*y,a*(b-y-1)]))"", ""from math import *\nfrom collections import *\nt = int(input())\nfor y in range(t):\n\ta,b,x,y = map(int,input().split())\n\tl = max(x,a-x-1)\n\tw = max(y,b-y-1)\n\tprint(max(l*b,a*w))"", ""import sys\nimport math\nfrom collections import defaultdict\nfrom collections import deque\nfrom itertools import combinations\nfrom itertools import permutations\ninput = lambda : sys.stdin.readline().rstrip()\nread = lambda : list(map(int, input().split()))\ngo = lambda : 1/0\ndef write(*args, sep=\""\\n\""):\n  for i in args:\n    sys.stdout.write(\""{}{}\"".format(i, sep))\nINF = float('inf')\nMOD = int(1e9 + 7)\nYES = \""YES\""\nNO = \""NO\""\n\nfor _ in range(int(input())):\n  try:\n    a, b, x, y = read()\n    up = y * a\n    down = (b - y - 1) * a\n    left = x * b\n    right = (a - x - 1) * b \n\n    print(max([up, down, left, right]))\n\n  except ZeroDivisionError:\n    continue\n\n  except Exception as e:\n    print(e)\n    continue"", ""TC = int(input())\n\nfor _ in range(TC):\n    a, b, x, y = list(map(int, input().split()))\n    print((max(\n        y * a,\n        x * b,\n        (b - y - 1) * a,\n        (a - x - 1) * b\n    )))\n\n\n\n"", ""for nt in range(int(input())):\n\ta,b,x,y=map(int,input().split())\n\ta1=max(x,0)*b\n\ta2=(a-x-1)*b\n\ta3=(y)*a\n\ta4=(b-y-1)*a\n\tprint (max(a1,a2,a3,a4))"", ""def main(a, b, x, y):\n\tsol = max(max(x, a-x-1)*b, max(y, b-y-1)*a)\n\tprint(sol)\n\nn = int(input())\nfor _ in range(n):\n\tlst = list(map(int, input().split()))\n\ta, b, x, y = lst[0], lst[1], lst[2], lst[3]\n\tmain(a, b, x, y)\n"", ""t=int(input())\nfor i in range(t):\n    a,b,x,y=list(map(int,input().split()))\n    r = [a*y, b*x, a*(b-y-1), b*(a-x-1)]\n    print(max(r))\n"", ""t = int(input())\nwhile t:\n    t += -1\n    a, b, x, y = map(int, input().split())\n    a1 = b * x\n    a2 = a * y\n    a3 = b * (a - x - 1)\n    a4 = a * (b - y - 1)\n    print(max(a1, a2, a3, a4))"", ""from sys import stdin,stderr\ndef rl():\n    return [int(w) for w in stdin.readline().split()]\n\nt, = rl()\nfor _ in range(t):\n    a,b,x,y = rl()\n    print(max(x*b,y*a,(a-x-1)*b,(b-y-1)*a))\n"", ""t = int(input())\nfor _ in range(t):\n    a, b, x, y = list(map(int, input().split()))\n    h = max(a-x-1, x) * b\n    v = max(b-y-1, y) * a\n    print(max(h, v))\n"", ""import sys\ninput = sys.stdin.readline\n\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        A, B, X, Y = [int(x) for x in input().split()]\n        ma = 0\n        ma = max(X * B, ma)\n        ma = max(Y * A, ma)\n        ma = max((A - X - 1) * B, ma)\n        ma = max((B - Y - 1) * A, ma)\n\n        print(ma)\n\n\n        \n        \n    \n\ndef __starting_point():\n    main()\n\n\n\n__starting_point()"", ""t = int(input())\nwhile t:\n    t -= 1\n    a, b, x, y = list(map(int, input().split()))\n    area1 = a * y\n    area2 = x * b\n    area3 = (a - 1 - x) * b\n    area4 = a * (b - 1 - y)\n    print(max(area1, area2, area3, area4))\n"", ""for _ in range(int(input())):\n    a,b,x,y = map(int,input().split())\n    total = a*b\n    left = x*b\n    right = total - left - b\n    down = a*y\n    up = total - down - a\n    print( max( left, right, down, up ) )"", ""for i in range(int(input())):\n    a, b, x, y = list(map(int, input().split()))\n    print(max(a*max(y, b-y-1), b*max(x, a-x-1)))\n"", ""#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n# vim:fenc=tf-8\n#\n\n\""\""\""\n\""\""\""\n\nfrom operator import itemgetter\nfrom collections import Counter\n\ndef solve(a, b, x, y):\n    area1 = x*b\n    area2 = (a-x-1)*b\n    area3 = a*y\n    area4 = a*(b-y-1)\n    print(max(area1,area2,area3,area4))\n\n\ndef main():\n    t= int(input())\n    for i in range(t):\n        a, b, x, y = map(int,input().split())\n        solve(a, b, x, y)\n\n\ndef __starting_point():\n    main()\n__starting_point()""]","{\n  ""inputs"": [\n    ""6\n8 8 0 0\n1 10 0 3\n17 31 10 4\n2 1 0 0\n5 10 3 9\n10 10 4 8\n""\n  ],\n  ""outputs"": [\n    ""56\n6\n442\n1\n45\n80\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1345/A,math,"You are given a special jigsaw puzzle consisting of $n\cdot m$ identical pieces. Every piece has three tabs and one blank, as pictured below. $\{3$ \n\nThe jigsaw puzzle is considered solved if the following conditions hold:  The pieces are arranged into a grid with $n$ rows and $m$ columns.  For any two pieces that share an edge in the grid, a tab of one piece fits perfectly into a blank of the other piece. \n\nThrough rotation and translation of the pieces, determine if it is possible to solve the jigsaw puzzle.\n\n\n-----Input-----\n\nThe test consists of multiple test cases. The first line contains a single integer $t$ ($1\le t\le 1000$)Â â€” the number of test cases. Next $t$ lines contain descriptions of test cases.\n\nEach test case contains two integers $n$ and $m$ ($1 \le n,m \le 10^5$).\n\n\n-----Output-----\n\nFor each test case output a single line containing ""YES"" if it is possible to solve the jigsaw puzzle, or ""NO"" otherwise. You can print each letter in any case (upper or lower).\n\n\n-----Example-----\nInput\n3\n1 3\n100000 100000\n2 2\n\nOutput\nYES\nNO\nYES\n\n\n\n-----Note-----\n\nFor the first test case, this is an example solution:  [Image] \n\nFor the second test case, we can show that no solution exists.\n\nFor the third test case, this is an example solution: $\left\{\begin{array}{l}{3} \\{3} \end{array} \right\}$","[""for _ in range(int(input())):\n    n, m = list(map(int, input().split()))\n    if n < m:\n        n, m = m, n # n > m\n\n    if m == 1:\n        print(\""YES\"")\n        continue\n\n    if m == 2 and n == 2:\n        print(\""YES\"")\n        continue\n\n    print(\""NO\"")\n"", ""for zz in range(int(input())):\n    n, m = list(map(int, input().split()))\n    if n == 1 or m == 1 or (n <= 2 and m <= 2):\n        print('YES')\n    else:\n        print('NO')\n"", ""for i in range(int(input())):\n    a, b = list(map(int,input().split()))\n    if a > 2 and b >= 2 or b > 2 and a >= 2:\n        print(\""NO\"")\n    else:\n        print(\""YES\"")\n"", ""t=int(input())\nfor i in range(t):\n  a,b=map(int,input().split())\n  if a==2 and b==2:\n    print('YES')\n  elif a==1:\n    print('YES')\n  elif b==1:\n    print('YES')\n  else:\n    print('NO')"", ""for _ in range(int(input())):\n\ta, b = list(map(int, input().split()))\n\tif (a == 1 or b == 1) or (a == 2 and b == 2):\n\t\tprint(\""YES\"")\n\telse:\n\t\tprint(\""NO\"")\n"", ""t=int(input())\nfor _ in range(t):\n    n,m=list(map(int, input().split()))\n    print('YES' if n == 1 or m == 1 or n == 2 and m == 2 else 'NO')\n"", ""t = int(input())\nfor _ in range(t):\n    n, m = list(map(int, input().split()))\n    if n == 1 or m == 1 or (m == 2 and n == 2):\n        print('YES')\n    else:\n        print('NO')\n"", ""import sys\n# from collections import deque\n\n# print(help(deque))\n# 26\ninput = lambda: sys.stdin.readline().strip()\nipnut = input\nfor i in range(int(input())):\n    n,m = map(int,ipnut().split())\n    if n==m==2 or min(n,m)==1:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n    # n = int(input())\n    # s = list(map(int,input()))\n\""\""\""\n10\n10 11 12 13 14 15 16 17 11 11\n\""\""\"""", ""t = int(input())\nfor q in range(0, t):\n    n, k = map(int, input().split())\n    # a = list(map(int, input().split()))\n    # n = int(input())\n    # print(n)\n    if n == k == 2:\n        print(\""YES\"")\n    elif n == 1 or k == 1:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")"", ""import sys\nints = (int(x) for x in sys.stdin.read().split())\nsys.setrecursionlimit(3000)\n\ndef main():\n    ntc = next(ints)\n    for tc in range(ntc):\n        n, m = (next(ints) for i in range(2))\n        print('YES' if n==1 or m==1 or n==m==2 else 'NO')\n    return\n\nmain()\n"", ""from sys import stdin,stdout                           #\nimport math                                            #\nimport heapq                                           #\n                                                       #\nt = 1                                                  #\ndef aint():                                            #\n\treturn int(input().strip())                        #\ndef lint():                                            #\n\treturn list(map(int,input().split()))              #\ndef fint():                                            #\n\treturn list(map(int,stdin.readline().split()))     #\n                                                       #\t\n########################################################\n\ndef main():\n\tn,m=lint()\n\tif n==1 or m==1:\n\t\tprint(\""YES\"")\n\telif n==2 and m==2:\n\t\tprint(\""YES\"")\n\telse:\n\t\tprint(\""NO\"")\n\t#solve\n\nt=int(input())\n\n########################################################\nfor i in range(t):                                     #\n\t#print(\""Case #\""+str(i+1)+\"":\"",end=\"" \"")\t\t       #\n\tmain()                                             #"", ""t=int(input())\nfor i in range(t):\n    n,m=map(int,input().split())\n    if n == 1 or m==1:print(\""YES\"")\n    elif n==2 and m==2:print(\""YES\"")\n    else:print(\""NO\"")"", ""for f in range(int(input())):\n    n,m=map(int,input().split())\n    if n==1 or m==1 or (n==2 and m==2):\n        print(\""YES\"")\n    else:\n        print(\""NO\"")"", ""for _ in range(int(input())):\n    n, m = list(map(int, input().split()))\n    print( \""YES\"" if min(n, m) == 1 or max(n, m) <= 2 else \""NO\"" )\n"", ""t = int(input())\nfor i in range(t):\n    n, m = map(int, input().split())\n    if n != 1 and m != 1 and n*m != 4:\n        print(\""NO\"")\n    else:\n        print(\""YES\"")"", ""t = int(input())\nfor case in range(t):\n    n, m = list(map(int, input().split()))\n    if (min(n, m) == 1):\n        print('YES')\n    elif n == m and n == 2:\n        print('YES')\n    else:\n        print('NO')"", ""import sys\n\nreadline = sys.stdin.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: list(map(int, readline().split()))\nnl = lambda: list(map(int, readline().split()))\n\ndef solve():\n    n, m = nm()\n    if min(n, m) == 1 or max(n, m) == 2:\n        print('YES')\n    else:\n        print('NO')\n\n# solve()\n\nT = ni()\nfor _ in range(T):\n    solve()\n"", ""t = int(input())\nfor i in range(t):\n    n, m = list(map(int, input().split()))\n    if n == 1 or m == 1 or (n == 2 and m == 2):\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n"", ""import sys\nT = int(sys.stdin.readline().strip())\ndef getT(line):\n    return map(int, line.strip().split(\"" \""))\n\nfor t in range(T):\n    (m,n) = getT(sys.stdin.readline())\n    if min(m, n) == 1: print(\""YES\"")\n    elif min(m, n) == 2 and max(m, n) == 2: print(\""YES\"")\n    else: print(\""NO\"")"", ""for _ in range(int(input())):\n    a,b=map(int,input().split())\n    if min(a,b)==1:\n        print('YES')\n    elif a==2 and b==2:\n        print('YES')\n    else:\n        print('NO')"", ""#from sys import stdin, stdout, setrecursionlimit\n#input = stdin.readline\n#print = stdout.write\nfor _ in range(int(input())):\n    n, m = list(map(int, input().split()))\n    ans = 'NO'\n    if n == 1 or m == 1 or (n == 2 and m == 2):\n        ans = 'YES'\n    print(ans)\n\n\n\n\n\n\n"", ""for _ in range(int(input())):\n    a, b = list(map(int, input().split()))\n    if a == 1 or b == 1:\n        print('YES')\n    elif a == b == 2:\n        print('YES')\n    else:\n        print('NO')\n"", ""def solve():\n    N,M = list(map(int,input().split()))\n    if N==1 or M==1:\n        print(\""YES\"")\n    elif N==2 and M==2:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n\nfor _ in range(int(input())):\n        solve()\n"", ""\n\ndef main():\n    n, m = map(int, input().split())\n    if n == 2 and m == 2:\n        print(\""YES\"")\n    else:\n        if n == 1 or m == 1:\n            print(\""YES\"")\n        else:\n            print(\""NO\"")\n\n\n\ndef __starting_point():\n    t = int(input())\n    for i in range(t):\n        main()\n__starting_point()"", ""t = int(input())\nfor i10 in range(t):\n    n, m = list(map(int, input().split()))\n    if n == 1 or m == 1 or n + m == 4:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n"", ""for _ in range(int(input())):\n    n, m = list(map(int, input().split()))\n    if n == 2 and m == 2:\n        print(\""YES\"")\n        continue\n    if n == 1 or m == 1:\n        print(\""YES\"")\n        continue\n    print(\""NO\"")\n"", ""\n\nt = int(input())\n\nfor fk in range(t):\n    n, m = [int(x) for x in input().split()]\n\n    if n == 1 or m == 1:\n        print('YES')\n\n    elif n==2 and m == 2:\n        print('YES')\n\n    else : print('NO')"", ""q = int(input())\n\nfor _ in range(q):\n    n, m = list(map(int, input().split()))\n    if n == 2 and m == 2 or n == 1 or m == 1:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n"", ""q = int(input())\nfor i in range(q):\n    n, m = list(map(int, input().split()))\n    if (n == 1 or m == 1):\n        print(\""YES\"")\n    elif (n == m == 2):\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n"", ""n=int(input())\nfor i in range(n):\n    a,b=[int(i) for i in input().split()]\n    if (a==b==2) or a==1 or b==1:\n        print('YES')\n    else:\n        print('NO')\n"", ""t = int(input())\nfor u in range(t):\n    n,m=list(map(int,input().split()))\n    x = 2*n+2*m\n    y = 3*n*m\n    z = n*m\n    if x+z >= y:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n"", ""for _ in range(int(input())):\n    n, m = tuple(map(int, input().split()))\n\n    a = (n - 1) * m + (m - 1) * n\n    b = n * m\n\n    if a <= b:\n        print('YES')\n    else:\n        print('NO')"", ""t = int(input())\n\nfor case in range(t):\n    n, m = map(int, input().split())\n    ans = 'NO'\n    if (n == m == 2):\n        ans = 'YES'\n    elif (n == 1 or m == 1):\n        ans = 'YES'\n    print (ans)"", ""t = int(input())\nfor case in range(t):\n    n, m = list(map(int, input().split()))\n    perimeter = 2*n + 2*m\n\n    inside = m*(n-1) + n*(m-1)\n    nobs = 2*n*m\n\n    if (nobs > perimeter):\n        print (\""NO\"")\n    else:\n        print (\""YES\"")\n"", ""for _ in range(int(input())):\n    n, m = list(map(int, input().split()))\n    if n * m <= n + m:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n"", ""t = int(input())\nfor i in range(t):\n    n, m = list(map(int, input().split()))\n    if min(n, m) == 1 or m==2 and n==2:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n"", ""# n = int(input())\n# l = list(map(int, input().split()))\nfor tt in range(int(input())):\n\tn, m = map(int, input().split())\n\tif(n==1 or m==1 or (n==2 and m==2)):\n\t\tprint(\""YES\"")\n\t\tcontinue\n\tprint(\""NO\"")"", ""for _ in range(int(input())):\n    n, m = list(map(int, input().split()))\n    if n == m and n == 2:\n        print('YES')\n    elif n >= 2 and m >= 2:\n        print('NO')\n    else:\n        print('YES')\n"", ""for _ in range(int(input())):\n    n, m = map(int, input().split())\n    print('YES' if n == 1 or m == 1 or (n == 2 and m == 2) else 'NO')"", ""import sys\nimport math\nimport itertools\nimport functools\nimport collections\nimport operator\nimport fileinput\nimport copy\n\nORDA = 97       #a\ndef ii(): return int(input())\ndef mi(): return map(int, input().split())\ndef li(): return [int(i) for i in input().split()]\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef revn(n): return str(n)[::-1]\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\ndef sieve(n):\n    if n < 2: return list()\n    prime = [True for _ in range(n + 1)]\n    p = 3\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 2\n    r = [2]\n    for p in range(3, n + 1, 2):\n        if prime[p]:\n            r.append(p)\n    return r\ndef divs(n, start=1):\n    r = []\n    for i in range(start, int(math.sqrt(n) + 1)):\n        if (n % i == 0):\n            if (n / i == i):\n                r.append(i)\n            else:\n                r.extend([i, n // i])\n    return r\ndef divn(n, primes):\n    divs_number = 1\n    for i in primes:\n        if n == 1:\n            return divs_number\n        t = 1\n        while n % i == 0:\n            t += 1\n            n //= i\n        divs_number *= t\ndef prime(n):\n    if n == 2: return True\n    if n % 2 == 0 or n <= 1: return False\n    sqr = int(math.sqrt(n)) + 1\n    for d in range(3, sqr, 2):\n        if n % d == 0: return False\n    return True\ndef convn(number, base):\n    newnumber = 0\n    while number > 0:\n        newnumber += number % base\n        number //= base\n    return newnumber\ndef cdiv(n, k): return n // k + (n % k != 0)\n\n\nfor _ in range(ii()):\n    n, m = mi()\n    if n == 1 or m == 1 or m == 2 and n == 2:\n        print('YES')\n    else:\n        print('NO')""]","{\n  ""inputs"": [\n    ""3\n1 3\n100000 100000\n2 2\n""\n  ],\n  ""outputs"": [\n    ""YES\nNO\nYES\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1270/A,"games,greedy,math","Two players decided to play one interesting card game.\n\nThere is a deck of $n$ cards, with values from $1$ to $n$. The values of cards are pairwise different (this means that no two different cards have equal values). At the beginning of the game, the deck is completely distributed between players such that each player has at least one card. \n\nThe game goes as follows: on each turn, each player chooses one of their cards (whichever they want) and puts on the table, so that the other player doesn't see which card they chose. After that, both cards are revealed, and the player, value of whose card was larger, takes both cards in his hand. Note that as all cards have different values, one of the cards will be strictly larger than the other one. Every card may be played any amount of times. The player loses if he doesn't have any cards.\n\nFor example, suppose that $n = 5$, the first player has cards with values $2$ and $3$, and the second player has cards with values $1$, $4$, $5$. Then one possible flow of the game is:\n\nThe first player chooses the card $3$. The second player chooses the card $1$. As $3>1$, the first player gets both cards. Now the first player has cards $1$, $2$, $3$, the second player has cards $4$, $5$.\n\nThe first player chooses the card $3$. The second player chooses the card $4$. As $3<4$, the second player gets both cards. Now the first player has cards $1$, $2$. The second player has cards $3$, $4$, $5$.\n\nThe first player chooses the card $1$. The second player chooses the card $3$. As $1<3$, the second player gets both cards. Now the first player has only the card $2$. The second player has cards $1$, $3$, $4$, $5$.\n\nThe first player chooses the card $2$. The second player chooses the card $4$. As $2<4$, the second player gets both cards. Now the first player is out of cards and loses. Therefore, the second player wins.\n\nWho will win if both players are playing optimally? It can be shown that one of the players has a winning strategy.\n\n\n-----Input-----\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \le t \le 100$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $k_1$, $k_2$ ($2 \le n \le 100, 1 \le k_1 \le n - 1, 1 \le k_2 \le n - 1, k_1 + k_2 = n$)Â â€” the number of cards, number of cards owned by the first player and second player correspondingly.\n\nThe second line of each test case contains $k_1$ integers $a_1, \dots, a_{k_1}$ ($1 \le a_i \le n$)Â â€” the values of cards of the first player.\n\nThe third line of each test case contains $k_2$ integers $b_1, \dots, b_{k_2}$ ($1 \le b_i \le n$)Â â€” the values of cards of the second player.\n\nIt is guaranteed that the values of all cards are different.\n\n\n-----Output-----\n\nFor each test case, output ""YES"" in a separate line, if the first player wins. Otherwise, output ""NO"" in a separate line. You can print each letter in any case (upper or lower).\n\n\n-----Example-----\nInput\n2\n2 1 1\n2\n1\n5 2 3\n2 3\n1 4 5\n\nOutput\nYES\nNO\n\n\n\n-----Note-----\n\nIn the first test case of the example, there is only one possible move for every player: the first player will put $2$, the second player will put $1$. $2>1$, so the first player will get both cards and will win.\n\nIn the second test case of the example, it can be shown that it is the second player who has a winning strategy. One possible flow of the game is illustrated in the statement.","[""q = int(input())\nfor z in range(q):\n    n, k1, k2 = map(int, input().split())\n    arr1 = list(map(int, input().split()))\n    arr2 = list(map(int, input().split()))\n    if max(arr1) > max(arr2):\n        print('YES')\n    else:\n        print('NO')"", ""t = int(input())\n\nfor _ in range(t):\n    n, k1, k2 = list(map(int, input().strip().split()))\n    prvi = list(map(int, input().strip().split()))\n    drugi = list(map(int, input().strip().split()))\n\n    if max(prvi) > max(drugi):\n        print('YES')\n    else:\n        print('NO')"", ""for i in range(int(input())):\n    n, k1, k2 = map(int,input().split())\n    l1 = list(map(int,input().split()))\n    a = max(l1)\n    l2 = list(map(int,input().split()))\n    b = max(l2)\n    if a > b:\n        print(\""YES\"")\n    else :\n        print(\""NO\"")"", ""a = int(input())\nfor i in range(a):\n    n, k1, k2 = list(map(int, input().split()))\n    k11 = list(map(int, input().split()))\n    k22 = list(map(int, input().split()))\n    if max(k11) > max(k22):\n        print('YES')\n    else:\n        print('NO')\n"", ""from math import *\nimport os, sys\nfrom bisect import *\nfrom io import BytesIO\n\n#input = BytesIO(os.read(0, os.fstat(0).st_size)).readline\nsys.setrecursionlimit(10 ** 9)\n#sys.stdin = open(\""moobuzz.in\"", 'r')\n#sys.stdout = open(\""moobuzz.out\"", 'w')\n\nfor _ in range(int(input())):\n\tn, k1, k2 = list(map(int, input().split()))\n\ta = list(map(int, input().split()))\n\tb = list(map(int, input().split()))\n\tif max(a) > max(b):\n\t\tprint(\""YES\"")\n\telse:\n\t\tprint(\""NO\"")\n"", ""t = int(input())\nfor rwuer in range(t):\n\tn,k1,k2 = map(int,input().split())\n\tl1 = list(map(int,input().split()))\n\tl2 = list(map(int,input().split()))\n\ta1 = max(l1)\n\ta2 = max(l2)\n\tif a1>a2:\n\t\tprint(\""YES\"")\n\telse:\n\t\tprint(\""NO\"")"", ""def solve():\n    n, k1, k2 = list(map(int, input().split()))\n    m1 = max(list(map(int, input().split())))\n    m2 = max(list(map(int, input().split())))\n    if m1 > m2:\n        print('YES')\n    else:\n        print('NO')\n\n\ndef main():\n    t = int(input())\n    # t = 1\n    for _ in range(t):\n        solve()\n\n\nmain()\n"", ""t = int(input())\nfor _ in range(t):\n    n, k1, k2 = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    if max(a) > max(b):\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n"", ""t=int(input())\nfor _ in range(t):\n    n,k1,k2=list(map(int,input().split()))\n    a1=sorted(list(map(int,input().split())))\n    a2=sorted(list(map(int,input().split())))\n    if(n in a1):\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n"", ""for tc in range(int(input())):\n    input()\n    lsa = list(map(int, input().split()))\n    lsb = list(map(int, input().split()))\n    print('YES' if max(max(lsa),max(lsb)) in lsa else 'NO')\n"", ""t = int(input())\nfor i in range(t):\n    n, k1, k2 = list(map(int, input().split()))\n    a = max(list(map(int, input().split())))\n    b = max(list(map(int, input().split())))\n    if a > b:\n        print('YES')\n    else:\n        print('NO')\n"", ""q = int(input())\nwhile q:\n    n, k1, k2 = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    if max(a) > max(b):\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n    q -= 1\n"", ""t = int(input())\n\nfor test in range(t):\n    input()\n    max1 = max(list(map(int,input().split())))\n    max2 = max(list(map(int,input().split())))\n    if max1 > max2:\n        print('YES')\n    else:\n        print('NO')\n"", ""import sys\nimport math\nfrom collections import defaultdict\nfrom collections import deque\nfrom itertools import combinations\nfrom itertools import permutations\ninput = lambda : sys.stdin.readline().rstrip()\nread = lambda : list(map(int, input().split()))\ngo = lambda : 1/0\ndef write(*args, sep=\""\\n\""):\n  for i in args:\n    sys.stdout.write(\""{}{}\"".format(i, sep))\nINF = float('inf')\nMOD = int(1e9 + 7)\nYES = \""YES\""\nNO = \""NO\""\n\nfor _ in range(int(input())):\n  n, x, y = read()\n  X = read()\n  Y = read()\n\n  if n in X:\n    print(YES)\n  else:\n    print(NO)\n"", ""for case in range(int(input())):\n    input()\n    a=max(list(map(int,input().split())))\n    b=max(list(map(int,input().split())))\n    print('YES' if a>b else 'NO')"", ""t=int(input())\nfor q in range(t):\n    n,k1,k2=map(int,input().split())\n    a1=max(list(map(int,input().split())))\n    a2=max(list(map(int,input().split())))\n    if a1>a2:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")"", ""for _ in range(int(input())):\n    n,k1A,k2A = list(map(int,input().split()))\n    k1 = list(map(int,input().split()))\n    k2 = list(map(int,input().split()))\n    print(\""YES\"" if max(k1) > max(k2) else \""NO\"")"", ""from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nimport heapq\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\n \n# M = mod = 998244353\ndef factors(n):return sorted(list(set(reduce(list.__add__,([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split(' ')]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n').split(' ')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n \n\nfor _ in range(val()):\n    n,k1,k2 = li()\n    a = sorted(li())\n    b = sorted(li())\n    print('YES' if a[-1]>b[-1] else 'NO')\n"", ""import sys\nimport math\nimport itertools\nimport functools\nimport collections\nimport random\n\n\ndef ii(): return int(input())\ndef mi(): return list(map(int, input().split()))\ndef li(): return list(map(int, input().split()))\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef wr(arr): return ' '.join(map(str, arr))\ndef revn(n): return str(n)[::-1]\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\ndef sieve(n):\n    if n < 2: return list()\n    prime = [True for _ in range(n + 1)]\n    p = 3\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 2\n    r = [2]\n    for p in range(3, n + 1, 2):\n        if prime[p]:\n            r.append(p)\n    return r\ndef divs(n, start=1):\n    r = []\n    for i in range(start, int(math.sqrt(n) + 1)):\n        if (n % i == 0):\n            if (n / i == i):\n                r.append(i)\n            else:\n                r.extend([i, n // i])\n    return r\ndef divn(n, primes):\n    divs_number = 1\n    for i in primes:\n        if n == 1:\n            return divs_number\n        t = 1\n        while n % i == 0:\n            t += 1\n            n //= i\n        divs_number *= t\ndef prime(n):\n    if n == 2: return True\n    if n % 2 == 0 or n <= 1: return False\n    sqr = int(math.sqrt(n)) + 1\n    for d in range(3, sqr, 2):\n        if n % d == 0: return False\n    return True\ndef convn(number, base):\n    newnumber = 0\n    while number > 0:\n        newnumber += number % base\n        number //= base\n    return newnumber\ndef cdiv(n, k): return n // k + (n % k != 0)\n\n\nt = ii()\nfor _ in range(t):\n    n, k1, k2 = mi()\n    a = li()\n    b = li()\n    if max(a) > max(b):\n        print('YES')\n    else:\n        print('NO')\n"", ""t = int(input())\nfor query in range(t):\n    n, k1, k2 = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    if n in A:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n"", ""t = int(input())\n\nfor qwe in range(t):\n\tn, k1, k2 = map(int, input().split())\n\ta = list(map(int, input().split()))\n\tb = list(map(int, input().split()))\n\n\tif max(a) == n:\n\t\tprint(\""YES\"")\n\telse:\n\t\tprint(\""NO\"")"", ""for _ in range(int(input())):\n\tn,k1,k2 = map(int,input().split())\n\ta = list(map(int,input().split()))\n\tb = list(map(int,input().split()))\n\tif n in a:\n\t\tprint(\""YES\"")\n\telse: print(\""NO\"")\t"", ""for i in range(int(input())):\n    n, k1, k2 = list(map(int, input().split()))\n    u = max(list(map(int, input().split())))\n    v = max(list(map(int, input().split())))\n    if u < v:\n        print('NO')\n    else:\n        print('YES')\n"", ""t=int(input())\nfor l in range(t):\n    n,k1,k2=list(map(int,input().split()))\n    arr1=list(map(int,input().split()))\n    arr2=list(map(int,input().split()))\n    if(max(arr1)>max(arr2)):\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n"", ""for i in ' '*int(input()):\n    n,k1,k2=map(int,input().split())\n    L1=list(map(int,input().split()))\n    L2=list(map(int,input().split()))\n    if max(L1)>max(L2):print('YES')\n    else:print('NO')"", ""def case():\n    n, k1, k2 = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    if max(a) > max(b):\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\nfor _ in range(int(input())):\n    case()"", ""for _ in range(int(input())):\n    n,k1,k2 = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    brr = list(map(int, input().split()))\n    max1 = max(arr)\n    max2 = max(brr)\n    if max1>max2:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n"", ""t = int(input())\nfor i in range(t):\n    n,k1,k2 = list(map(int,input().split()))\n    s1 = max(list(map(int,input().split())))\n    s2 = max(list(map(int,input().split())))\n    if s1 == n:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n"", ""t=int(input())\nfor i in range(t):\n    n, k1, k2=list(map(int, input().split()))\n    d=max(list(map(int, input().split())))\n    d1=max(list(map(int, input().split())))\n    if d>d1:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n""]","{\n  ""inputs"": [\n    ""2\n2 1 1\n2\n1\n5 2 3\n2 3\n1 4 5\n""\n  ],\n  ""outputs"": [\n    ""YES\nNO\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1443/A,"constructive algorithms,math","Today the kindergarten has a new group of $n$ kids who need to be seated at the dinner table. The chairs at the table are numbered from $1$ to $4n$. Two kids can't sit on the same chair. It is known that two kids who sit on chairs with numbers $a$ and $b$ ($a \neq b$) will indulge if:   $gcd(a, b) = 1$ or,  $a$ divides $b$ or $b$ divides $a$. \n\n$gcd(a, b)$Â â€” the maximum number $x$ such that $a$ is divisible by $x$ and $b$ is divisible by $x$.\n\nFor example, if $n=3$ and the kids sit on chairs with numbers $2$, $3$, $4$, then they will indulge since $4$ is divided by $2$ and $gcd(2, 3) = 1$. If kids sit on chairs with numbers $4$, $6$, $10$, then they will not indulge.\n\nThe teacher really doesn't want the mess at the table, so she wants to seat the kids so there are no $2$ of the kid that can indulge. More formally, she wants no pair of chairs $a$ and $b$ that the kids occupy to fulfill the condition above.\n\nSince the teacher is very busy with the entertainment of the kids, she asked you to solve this problem.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \leq t \leq 100$)Â â€” the number of test cases. Then $t$ test cases follow.\n\nEach test case consists of one line containing an integer $n$ ($1 \leq n \leq 100$)Â â€” the number of kids.\n\n\n-----Output-----\n\nOutput $t$ lines, which contain $n$ distinct integers from $1$ to $4n$Â â€” the numbers of chairs that the kids should occupy in the corresponding test case. If there are multiple answers, print any of them. You can print $n$ numbers in any order.\n\n\n-----Example-----\nInput\n3\n2\n3\n4\n\nOutput\n6 4\n4 6 10\n14 10 12 8","[""t=int(input())\nfor you in range(t):\n    n=int(input())\n    for i in range(n):\n        print(4*n-2*i,end=\"" \"")\n    print()\n"", ""for _ in range(int(input())):\n    n = int(input())\n    for i in range(4 * n, 2 * n, -2):\n        print(i, end=' ')\n    print(' ')\n"", ""import sys\ninput=sys.stdin.readline\nfrom collections import defaultdict\n\nfor _ in range(int(input())):\n    n=int(input())\n    x=4*n\n    for i in range(n):\n        print(x,end=\"" \"")\n        x-=2\n    print()\n\n\n"", ""for _ in range (int(input())):\n    n=int(input())\n    for i in range (4*n,4*n-2*n,-2):\n        print(i,end=' ')\n    print()"", ""import sys,math\n# import re\n# from heapq import *\n# from collections import defaultdict as dd\n# from collections import Counter as cc\n# sys.setrecursionlimit(10**6)#thsis is must\nmod = 10**9+7; md = 998244353\ninput = lambda: sys.stdin.readline().strip()\ninp = lambda: list(map(int,input().split()))\n#______________________________________________________\nfor _ in range(int(input())):\n\tn = int(input())\n\tt = 4*n\n\tfor i in range(n):\n\t\tprint(t,end = \"" \"")\n\t\tt-=2\n\tprint()"", ""for i in range(int(input())):\n    n=int(input())\n    l=[]\n    a=4*n\n    for j in range(n):\n        l.append(a)\n        a-=2\n    print(*l)\n    \n"", ""import sys\nimport math\nimport itertools\nimport functools\nimport collections\nimport operator\nimport fileinput\nimport copy\nimport string\n\n\nORDA = 97  # a\ndef ii(): return int(input())\ndef mi(): return list(map(int, input().split()))\ndef li(): return [int(i) for i in input().split()]\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef revn(n): return str(n)[::-1]\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\ndef sieve(n):\n    if n < 2: return list()\n    prime = [True for _ in range(n + 1)]\n    p = 3\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 2\n    r = [2]\n    for p in range(3, n + 1, 2):\n        if prime[p]:\n            r.append(p)\n    return r\ndef divs(n, start=2):\n    r = []\n    for i in range(start, int(math.sqrt(n) + 1)):\n        if (n % i == 0):\n            if (n / i == i):\n                r.append(i)\n            else:\n                r.extend([i, n // i])\n    return r\ndef divn(n, primes):\n    divs_number = 1\n    for i in primes:\n        if n == 1:\n            return divs_number\n        t = 1\n        while n % i == 0:\n            t += 1\n            n //= i\n        divs_number *= t\ndef prime(n):\n    if n == 2: return True\n    if n % 2 == 0 or n <= 1: return False\n    sqr = int(math.sqrt(n)) + 1\n    for d in range(3, sqr, 2):\n        if n % d == 0: return False\n    return True\ndef convn(number, base):\n    new_number = 0\n    while number > 0:\n        new_number += number % base\n        number //= base\n    return new_number\ndef cdiv(n, k): return n // k + (n % k != 0)\ndef ispal(s):\n    for i in range(len(s) // 2 + 1):\n        if s[i] != s[-i - 1]:\n            return False\n    return True\n\n\nfor _ in range(ii()):\n    n = ii()\n    print(*[i for i in range(2 * n + 2, 4 * n + 2, 2)])\n"", ""a = int(input())\nfor i in range (a):\n    b = int(input())\n    for j in range (2 * b + 2, 4 * b, 2):\n        print(j, end = \"" \"")\n    print(4 * b)"", ""def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        p = []\n        for i in range(n):\n            p.append(4 * n - i * 2)\n        print(*p)\nmain()"", ""t = int(input())\nfor case in range(t):\n    n = int(input())\n    ans = [2 * n + 2 * i + 2 for i in range(n)]\n    print(*ans)"", ""import math\nimport sys\n\n\ndef chek(m, b, c, li):\n    for i in range(li):\n        if m[i] + b[i] > c:\n            return False\n    return True\n\n\n# 113759\ninput = lambda: sys.stdin.readline().rstrip()\nf = int(input())\nfor _ in range(f):\n    n = int(input())\n    n = n * 4\n    for i in range(n, n // 2 , -1):\n        if i % 2 == 0:\n            print(i, end=' ')\n    print()"", ""import sys\ninput=sys.stdin.readline\n\nT=int(input())\nfor _ in range(T):\n    #N,K=map(int,input().split())\n    #A=list(map(int,input().split()))\n    n=int(input())\n    v=4*n\n    for i in range(n):\n        print(v,end=\"" \"")\n        v=v-2\n    print()\n"", ""for i in range(int(input())):\n n=int(input())\n g=[]\n c=4*n\n for j in range(n):\n  g.append(c)\n  c=c-2\n print(' '.join(map(str,g))) "", ""# map(int, input().split())\ndef main():\n    n = int(input())\n    for i in range(4 * n, 2 * n, -2):\n        print(i, end = ' ')\n    print('')\n\n\nrw = int(input())\nfor wewq in range(rw):\n    main()\n""]","{""inputs"": [""3\n2\n3\n4\n""], ""outputs"": [""8 6 \n12 10 8 \n16 14 12 10 \n""]}"
https://codeforces.com/problemset/problem/1371/A,math,"A penguin Rocher has $n$ sticks. He has exactly one stick with length $i$ for all $1 \le i \le n$.\n\nHe can connect some sticks. If he connects two sticks that have lengths $a$ and $b$, he gets one stick with length $a + b$. Two sticks, that were used in the operation disappear from his set and the new connected stick appears in his set and can be used for the next connections.\n\nHe wants to create the maximum number of sticks that have the same length. It is not necessary to make all sticks have the same length, some sticks can have the other length. How many sticks with the equal length he can create?\n\n\n-----Input-----\n\nThe input consists of multiple test cases. The first line contains a single integer $t$ ($1 \le t \le 1000$)Â â€” the number of test cases. Next $t$ lines contain descriptions of test cases.\n\nFor each test case, the only line contains a single integer $n$ ($1 \le n \le 10^{9}$).\n\n\n-----Output-----\n\nFor each test case, print a single integer Â â€” the answer to the problem.\n\n\n-----Example-----\nInput\n4\n1\n2\n3\n4\n\nOutput\n1\n1\n2\n2\n\n\n\n-----Note-----\n\nIn the third case, he can connect two sticks with lengths $1$ and $2$ and he will get one stick with length $3$. So, he will have two sticks with lengths $3$.\n\nIn the fourth case, he can connect two sticks with lengths $1$ and $3$ and he will get one stick with length $4$. After that, he will have three sticks with lengths $\{2, 4, 4\}$, so two sticks have the same length, and one stick has the other length.","[""for __ in range(int(input())):\n    n = int(input())\n    print((n + 1) // 2)"", ""from math import ceil\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print(int(ceil(n/2)))"", ""for _ in range(int(input())):\n      print((int(input())+1)//2)"", ""tests = int(input())\nfor _ in range(tests):\n    n = int(input())\n    print((n + 1) // 2)"", ""t = int(input())\nfor i in range(t):\n    n = int(input())\n    print((n + 1) // 2)\n    \n"", ""t = int(input())\nfor test in range(t):\n    a = int(input())\n    print((a+1)//2)"", ""\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    print((n+1)//2)"", ""#list(map(int,input().split()))\n\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    print((n+1)//2)\n"", ""# for _ in range(1):\nfor _ in range(int(input())):\n    # a, b = map(int, input().split())\n    n = int(input())\n    # arr = list(map(int, input().split()))\n    # s = input()\n    x = (n + 1) // 2\n    print(x)\n"", ""from math import ceil\nfor _ in range(int(input())):\n    print(ceil(int(input())/2))"", ""for _ in range(int(input())):\n    n = int(input())\n    print((n + 1) // 2)\n    #n, m = map(int, input().split())\n    '''A = list(map(int, input().split()))\n    Ans = 0\n    for i in range(len(A)):'''\n"", ""from math import *\n\ndef r1(t):\n    return t(input())\n\ndef r2(t):\n    return [t(i) for i in input().split()]\n\nfor _ in range(r1(int)):\n    n = r1(int)\n    print((n + 1) // 2)\n"", ""t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print((n+1)//2)"", ""q = int(input())\nfor _ in range(q):\n    a = int(input())\n    print((a+1)//2)"", ""import sys\nimport math\ndef II():\n\treturn int(sys.stdin.readline())\n\ndef LI():\n\treturn list(map(int, sys.stdin.readline().split()))\n\ndef MI():\n\treturn map(int, sys.stdin.readline().split())\n\ndef SI():\n\treturn sys.stdin.readline().strip()\nt = II()\nfor q in range(t):\n\tn = II()\n\tprint(math.ceil(n/2))"", ""import sys\nimport math\nimport itertools\nimport functools\nimport collections\nimport operator\nimport fileinput\nimport copy\n\nORDA = 97  # a\ndef ii(): return int(input())\ndef mi(): return list(map(int, input().split()))\ndef li(): return [int(i) for i in input().split()]\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef revn(n): return str(n)[::-1]\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\ndef sieve(n):\n    if n < 2: return list()\n    prime = [True for _ in range(n + 1)]\n    p = 3\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 2\n    r = [2]\n    for p in range(3, n + 1, 2):\n        if prime[p]:\n            r.append(p)\n    return r\ndef divs(n, start=1):\n    r = []\n    for i in range(start, int(math.sqrt(n) + 1)):\n        if (n % i == 0):\n            if (n / i == i):\n                r.append(i)\n            else:\n                r.extend([i, n // i])\n    return r\ndef divn(n, primes):\n    divs_number = 1\n    for i in primes:\n        if n == 1:\n            return divs_number\n        t = 1\n        while n % i == 0:\n            t += 1\n            n //= i\n        divs_number *= t\ndef prime(n):\n    if n == 2: return True\n    if n % 2 == 0 or n <= 1: return False\n    sqr = int(math.sqrt(n)) + 1\n    for d in range(3, sqr, 2):\n        if n % d == 0: return False\n    return True\ndef convn(number, base):\n    newnumber = 0\n    while number > 0:\n        newnumber += number % base\n        number //= base\n    return newnumber\ndef cdiv(n, k): return n // k + (n % k != 0)\ndef ispal(s):\n    for i in range(len(s) // 2 + 1):\n        if s[i] != s[-i - 1]:\n            return False\n    return True\n\nfor _ in range(ii()):\n    print(math.ceil(ii() / 2))\n\n\n"", ""import sys\ninput = sys.stdin.readline\n\nans = []\nfor i in range(int(input())):\n    n = int(input())\n    ans.append(n//2 + n %2)\n\nprint(*ans,sep='\\n')"", ""import sys\ninput = lambda :sys.stdin.readline().rstrip()\nfor _ in range(int(input())):\n\tn=int(input())\n\tprint(n//2 + (1 if n%2 else 0))"", ""def solve():\n    print((int(input()) + 1) // 2)\n\n\nfor i in range(int(input())):\n    solve()\n"", ""import sys\n# from collections import deque\n# from collections import Counter\n# from math import sqrt\n# from math import log\nfrom math import ceil\n# from bisect import bisect_left, bisect_right\n\n# alpha=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n# mod=10**9+7\n# mod=998244353\n\n# def BinarySearch(a,x): \n# \ti=bisect_left(a,x) \n# \tif(i!=len(a) and a[i]==x): \n# \t\treturn i \n# \telse: \n# \t\treturn -1\n\n# def sieve(n): \n# \tprime=[True for i in range(n+1)]\n# \tp=2\n# \twhile(p*p<=n): \n# \t\tif (prime[p]==True): \n# \t\t\tfor i in range(p*p,n+1,p): \n# \t\t\t\tprime[i]=False\n# \t\tp+=1\n# \tprime[0]=False\n# \tprime[1]=False\n# \ts=set()\n# \tfor i in range(len(prime)):\n# \t\tif(prime[i]):\n# \t\ts.add(i)\n# \treturn s\n\n# def gcd(a, b):\n# \tif(a==0):\n# \t\treturn b \n# \treturn gcd(b%a,a)\n\nfast_reader=sys.stdin.readline\nfast_writer=sys.stdout.write\n\ndef input():\n\treturn fast_reader().strip()\n\ndef print(*argv):\n\tfast_writer(' '.join((str(i)) for i in argv))\n\tfast_writer('\\n')\n\n#____________________________________________________________________________________________________________________________________\n\nfor _ in range(int(input())):\n\tn=int(input())\n\tprint(ceil(n/2))"", ""t = int(input())\n\nfor _ in range(t):\n    a = int(input())\n    print((a + 1) // 2)\n"", ""#!usr/bin/env python3\nfrom collections import defaultdict, deque\nfrom heapq import heappush, heappop\nfrom itertools import permutations, accumulate\nimport sys\nimport math\nimport bisect\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef LS():return [list(x) for x in sys.stdin.readline().split()]\ndef S():\n    res = list(sys.stdin.readline())\n    if res[-1] == \""\\n\"":\n        return res[:-1]\n    return res\ndef IR(n):\n    return [I() for i in range(n)]\ndef LIR(n):\n    return [LI() for i in range(n)]\ndef SR(n):\n    return [S() for i in range(n)]\ndef LSR(n):\n    return [LS() for i in range(n)]\n\nsys.setrecursionlimit(1000000)\nmod = 1000000007\n\ndef solve():\n    t = I()\n    for _ in range(t):\n        n = I()\n        print((n+1)>>1)\n    return\n\n#Solve\ndef __starting_point():\n    solve()\n\n__starting_point()"", ""import sys\ninput = sys.stdin.readline\n\nT = int(input())\n\nfor t in range(T):\n    N = int(input())\n    print((N+1)//2)\n"", ""import sys\nINF = 10**20\nMOD = 10**9 + 7\nI = lambda:list(map(int,input().split()))\nfrom math import gcd\nfrom math import ceil\nfrom collections import defaultdict as dd, Counter\nfrom bisect import bisect_left as bl, bisect_right as br\n\n\n\""\""\""\nFacts and Data representation\nConstructive? Top bottom up down\n\""\""\""\ndef solve():\n  n, = I()\n  if n % 2:\n    print(1 + n // 2)\n  else:\n    print(n // 2)\n\nt, = I()\nwhile t:\n  t -= 1\n  solve()"", ""t=int(input())\nfor i in range(t):\n    n=int(input())\n    print((n+1)//2)""]","{\n  ""inputs"": [\n    ""4\n1\n2\n3\n4\n""\n  ],\n  ""outputs"": [\n    ""1\n1\n2\n2\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1421/A,"bitmasks,greedy,math","In order to celebrate Twice's 5th anniversary, Tzuyu and Sana decided to play a game.\n\nTzuyu gave Sana two integers $a$ and $b$ and a really important quest.\n\nIn order to complete the quest, Sana has to output the smallest possible value of ($a \oplus x$) + ($b \oplus x$) for any given $x$, where $\oplus$ denotes the bitwise XOR operation. \n\n\n-----Input-----\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \le t \le 10^{4}$). Description of the test cases follows.\n\nThe only line of each test case contains two integers $a$ and $b$ ($1 \le a, b \le 10^{9}$).\n\n\n-----Output-----\n\nFor each testcase, output the smallest possible value of the given expression.\n\n\n-----Example-----\nInput\n6\n6 12\n4 9\n59 832\n28 14\n4925 2912\n1 1\n\nOutput\n10\n13\n891\n18\n6237\n0\n\n\n\n-----Note-----\n\nFor the first test case Sana can choose $x=4$ and the value will be ($6 \oplus 4$) + ($12 \oplus 4$) = $2 + 8$ = $10$. It can be shown that this is the smallest possible value.","[""n = int(input())\nfor _ in range(n):\n    a, b = list(map(int, input().split()))\n    print(a ^ b)\n"", ""for __ in range(int(input())):\n    a, b = list(map(int, input().split()))\n    print(a ^ b)"", ""import sys\ninput = sys.stdin.readline\n\ndef main():\n    a, b = map(int, input().split())\n    print(a^b)\n    \nfor _ in range(int(input())):\n    main()"", ""from math import *\nfrom bisect import *\nfrom collections import *\nfrom random import *\nfrom decimal import *\nfrom itertools import *\nimport sys\ninput=sys.stdin.readline\ndef inp():\n    return int(input())\ndef st():\n    return input().rstrip('\\n')\ndef lis():\n    return list(map(int,input().split()))\ndef ma():\n    return list(map(int,input().split()))\nt=inp()\nwhile(t):\n    t-=1\n    a,b=ma()\n    print(a^b)\n        \n"", ""read = lambda: map(int, input().split())\nt = int(input())\nfor i in range(t):\n    a, b = read()\n    print(a^b)"", ""def main():\n    a, b = list(map(int, input().split()))\n    print(a + b - 2*(a&b))\ndef __starting_point():\n    t = int(input())\n    for i in range(t):\n        main()\n\n__starting_point()"", ""for _ in range(int(input())):\n    a, b = list(map(int, input().split()))\n    n = a & b\n    print((a^n) + (b^n))\n"", ""import sys\ninput=sys.stdin.readline\n\nT=int(input())\nfor _ in range(T):\n    n,m=list(map(int,input().split()))\n    print(n^m)\n"", ""from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\nfor _ in range(val()):\n    a, b = li()\n\n    ans = 0\n    for i in range(32):\n        if (a >> i) & 1 == (b >> i) & 1:\n            ans += 0\n        else:\n            ans += 1 << i\n    print(ans)"", ""import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n  a, b = map(int, input().split())\n  print(a + b - (a & b) * 2)"", ""import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom collections import Counter\n\n#sys.setrecursionlimit(100000000)\n\ninp = lambda: int(input())\nstrng = lambda: input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda: list(input().strip())\nmul = lambda: map(int, input().strip().split())\nmulf = lambda: map(float, input().strip().split())\nseq = lambda: list(map(int, input().strip().split()))\n\nceil = lambda x: int(x) if (x == int(x)) else int(x) + 1\nceildiv = lambda x, d: x // d if (x % d == 0) else x // d + 1\n\nflush = lambda: stdout.flush()\nstdstr = lambda: stdin.readline()\nstdint = lambda: int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nstdarr = lambda: map(int, stdstr().split())\n\nmod = 1000000007\n\n\nfor _ in range(stdint()):\n    a,b = stdarr()\n\n    print(a^b)"", ""\nt = int(input())\n\nfor _ in range(t):\n    a,b = map(int,input().split())\n    if a > b:\n        a,b = b,a\n    print(a^b)"", ""\""\""\""\n    Author: Sagar Pandey\n\n\""\""\""\n# ---------------------------------------------------Import Libraries---------------------------------------------------\nimport sys\nimport os\nfrom math import sqrt, log, log2, log10, gcd, floor, pow, sin, cos, tan, pi, inf, factorial\nfrom copy import copy, deepcopy\nfrom sys import stdin, stdout\nfrom collections import Counter, defaultdict, deque\nfrom itertools import permutations\nimport heapq\nfrom bisect import bisect_left as bl\n# If the element is already present in the list,\n# the left most position where element has to be inserted is returned.\nfrom bisect import bisect_right as br\nfrom bisect import bisect\n\n# If the element is already present in the list,\n# the right most position where element has to be inserted is r\n\n# ---------------------------------------------------Global Variables---------------------------------------------------\n# sys.setrecursionlimit(100000000)\nmod = 1000000007\n# ---------------------------------------------------Helper Functions---------------------------------------------------\niinp = lambda: int(sys.stdin.readline())\ninp = lambda: sys.stdin.readline().strip()\nstrl = lambda: list(inp().strip().split(\"" \""))\nintl = lambda: list(map(int, inp().split(\"" \"")))\nmint = lambda: list(map(int, inp().split()))\nflol = lambda: list(map(float, inp().split(\"" \"")))\nflush = lambda: stdout.flush()\n\n\ndef permute(nums):\n    def fun(arr, nums, cur, v):\n        if len(cur) == len(nums):\n            arr.append(cur.copy())\n        i = 0\n        while i < len(nums):\n            if v[i]:\n                i += 1\n                continue\n            else:\n                cur.append(nums[i])\n                v[i] = 1\n                fun(arr, nums, cur, v)\n                cur.pop()\n                v[i] = 0\n                i += 1\n            # while i<len(nums) and nums[i]==nums[i-1]:i+=1    # Uncomment for unique permutations\n        return arr\n\n    res = []\n    nums.sort()\n    v = [0] * len(nums)\n    return fun(res, nums, [], v)\n\n\ndef subsets(res, index, arr, cur):\n    res.append(cur.copy())\n    for i in range(index, len(arr)):\n        cur.append(arr[i])\n        subsets(res, i + 1, arr, cur)\n        cur.pop()\n    return res\n\n\ndef sieve(N):\n    root = int(sqrt(N))\n    primes = [1] * (N + 1)\n    primes[0], primes[1] = 0, 0\n    for i in range(2, root + 1):\n        if primes[i]:\n            for j in range(i * i, N + 1, i):\n                primes[j] = 0\n    return primes\n\n\ndef bs(arr, l, r, x):\n    if x < arr[0] or x > arr[len(arr) - 1]:\n        return -1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n\n\ndef isPrime(n):\n    if n <= 1: return False\n    if n <= 3: return True\n    if n % 2 == 0 or n % 3 == 0: return False\n    p = int(sqrt(n))\n    for i in range(5, p + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\n\n# -------------------------------------------------------Functions------------------------------------------------------\n\ndef solve():\n    a,b=mint()\n    print(a^b)\n\n\n# -------------------------------------------------------Main Code------------------------------------------------------\nfor _ in range(iinp()):\n    solve()\n"", ""t = int(input())\nfor _ in range(t):\n    a, b = map(int, input().split())\n    print((a + b) - (a & b) * 2)"", ""t = int(input())\n\nfor _ in range(t):\n    a,b = list(map(int,input().split()))\n    x = a&b\n    print((a^x) + (b^x))\n"", ""t=int(input())\nfor you in range(t):\n    l=input().split()\n    a=int(l[0])\n    b=int(l[1])\n    z=a&b\n    print((a^z)+(b^z))\n"", ""from sys import stdin, stdout\ninput = stdin.readline\nfrom collections import defaultdict as dd\nimport math\ndef geti(): return list(map(int, input().strip().split()))\ndef getl(): return list(map(int, input().strip().split()))\ndef gets(): return input()\ndef geta(): return int(input())\ndef print_s(s): stdout.write(s+'\\n')\n\ndef solve():\n    for _ in range(geta()):\n        a,b=geti()\n        print(a^b)\n\n\ndef __starting_point():\n    solve()\n\n__starting_point()"", ""def read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\nt = read_int()\nfor case_num in range(t):\n    a, b = read_ints()\n    print(a ^ b)\n"", ""from sys import stdin,stdout\nfor _ in range(int(stdin.readline())):\n    # n=int(stdin.readline())\n    a,b=list(map(int,stdin.readline().split()))\n    print(a^b)\n"", ""import sys, math\nimport io, os\n#data = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\nfrom bisect import bisect_left as bl, bisect_right as br, insort\nfrom heapq import heapify, heappush, heappop\nfrom collections import defaultdict as dd, deque, Counter\n#from itertools import permutations,combinations\ndef data(): return sys.stdin.readline().strip()\ndef mdata(): return list(map(int, data().split()))\ndef outl(var) : sys.stdout.write('\\n'.join(map(str, var))+'\\n')\ndef out(var) : sys.stdout.write(str(var)+'\\n')\n#from decimal import Decimal\n#from fractions import Fraction\n#sys.setrecursionlimit(100000)\nINF = float('inf')\nmod=10**9+7\n\n\nfor t in range(int(data())):\n    a,b=mdata()\n    out(a^b)\n\n""]","{\n  ""inputs"": [\n    ""6\n6 12\n4 9\n59 832\n28 14\n4925 2912\n1 1\n""\n  ],\n  ""outputs"": [\n    ""10\n13\n891\n18\n6237\n0\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1305/A,"brute force,constructive algorithms,greedy,sortings","Kuroni has $n$ daughters. As gifts for them, he bought $n$ necklaces and $n$ bracelets:  the $i$-th necklace has a brightness $a_i$, where all the $a_i$ are pairwise distinct (i.e. all $a_i$ are different),  the $i$-th bracelet has a brightness $b_i$, where all the $b_i$ are pairwise distinct (i.e. all $b_i$ are different). \n\nKuroni wants to give exactly one necklace and exactly one bracelet to each of his daughters. To make sure that all of them look unique, the total brightnesses of the gifts given to each daughter should be pairwise distinct. Formally, if the $i$-th daughter receives a necklace with brightness $x_i$ and a bracelet with brightness $y_i$, then the sums $x_i + y_i$ should be pairwise distinct. Help Kuroni to distribute the gifts.\n\nFor example, if the brightnesses are $a = [1, 7, 5]$ and $b = [6, 1, 2]$, then we may distribute the gifts as follows:  Give the third necklace and the first bracelet to the first daughter, for a total brightness of $a_3 + b_1 = 11$. Give the first necklace and the third bracelet to the second daughter, for a total brightness of $a_1 + b_3 = 3$. Give the second necklace and the second bracelet to the third daughter, for a total brightness of $a_2 + b_2 = 8$. \n\nHere is an example of an invalid distribution:   Give the first necklace and the first bracelet to the first daughter, for a total brightness of $a_1 + b_1 = 7$. Give the second necklace and the second bracelet to the second daughter, for a total brightness of $a_2 + b_2 = 8$. Give the third necklace and the third bracelet to the third daughter, for a total brightness of $a_3 + b_3 = 7$. \n\nThis distribution is invalid, as the total brightnesses of the gifts received by the first and the third daughter are the same. Don't make them this upset!\n\n\n-----Input-----\n\nThe input consists of multiple test cases. The first line contains an integer $t$ ($1 \le t \le 100$)  — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \le n \le 100$)  — the number of daughters, necklaces and bracelets.\n\nThe second line of each test case contains $n$ distinct integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 1000$)  — the brightnesses of the necklaces.\n\nThe third line of each test case contains $n$ distinct integers $b_1, b_2, \dots, b_n$ ($1 \le b_i \le 1000$)  — the brightnesses of the bracelets.\n\n\n-----Output-----\n\nFor each test case, print a line containing $n$ integers $x_1, x_2, \dots, x_n$, representing that the $i$-th daughter receives a necklace with brightness $x_i$. In the next line print $n$ integers $y_1, y_2, \dots, y_n$, representing that the $i$-th daughter receives a bracelet with brightness $y_i$.\n\nThe sums $x_1 + y_1, x_2 + y_2, \dots, x_n + y_n$ should all be distinct. The numbers $x_1, \dots, x_n$ should be equal to the numbers $a_1, \dots, a_n$ in some order, and the numbers $y_1, \dots, y_n$ should be equal to the numbers $b_1, \dots, b_n$ in some order. \n\nIt can be shown that an answer always exists. If there are multiple possible answers, you may print any of them.\n\n\n-----Example-----\nInput\n2\n3\n1 8 5\n8 4 5\n3\n1 7 5\n6 1 2\n\nOutput\n1 8 5\n8 4 5\n5 1 7\n6 2 1\n\n\n\n-----Note-----\n\nIn the first test case, it is enough to give the $i$-th necklace and the $i$-th bracelet to the $i$-th daughter. The corresponding sums are $1 + 8 = 9$, $8 + 4 = 12$, and $5 + 5 = 10$.\n\nThe second test case is described in the statement.","[""#list(map(int,input().split()))\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    aa=list(map(int,input().split()))\n    bb=list(map(int,input().split()))\n    aa.sort()\n    bb.sort()\n    print(*aa)\n    print(*bb)\n"", ""for _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    s = sorted(list(map(int, input().split())))\n    print(*a)\n    print(*s)\n"", ""for _ in range(int(input())):\n    n = int(input())\n    ar1 = list(map(int, input().split()))\n    ar2 = list(map(int, input().split()))\n    ar1.sort()\n    ar2.sort()\n    print(*ar1)\n    print(*ar2)"", ""import math, collections, sys\ninput = sys.stdin.readline\ndef solve():\n    n=int(input())\n    a = list(map(int, input().split()))\n    b= list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    print(*a)\n    print(*b)\nfor _ in range(int(input())):\n    solve()"", ""import math,sys\nfrom collections import Counter, defaultdict, deque\nfrom sys import stdin, stdout\ninput = stdin.readline\nli = lambda:list(map(int,input().split()))\n\ndef solve():\n    n=int(input())\n    a=li()\n    b=li()\n    a.sort()\n    b.sort()\n    print(*a)\n    print(*b)\n\nfor _ in range(int(input())):\n    solve()"", ""import sys\nreader = (s.rstrip() for s in sys.stdin)\ninput = reader.__next__\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    print(*a)\n    print(*b)\n\nt = int(input())\nfor i in range(t):\n    solve()\n\n"", ""for _ in range(int(input())):\n    n = int(input())\n    l1 = list(map(int,input().split()))\n    l2 = list(map(int,input().split()))\n    l1.sort()\n    l2.sort()\n    print(*l1, sep= \"" \"")\n    print(*l2, sep= \"" \"")"", ""t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = map(int, input().split())\n    b = map(int, input().split())\n    print(*sorted(a))\n    print(*sorted(b))""]","{\n  ""inputs"": [\n    ""2\n3\n1 8 5\n8 4 5\n3\n1 7 5\n6 1 2\n""\n  ],\n  ""outputs"": [\n    ""1 8 5\n8 4 5\n5 1 7\n6 2 1\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1369/A,"geometry,math","Lee is going to fashionably decorate his house for a party, using some regular convex polygons...\n\nLee thinks a regular $n$-sided (convex) polygon is beautiful if and only if he can rotate it in such a way that at least one of its edges is parallel to the $OX$-axis and at least one of its edges is parallel to the $OY$-axis at the same time.\n\nRecall that a regular $n$-sided polygon is a convex polygon with $n$ vertices such that all the edges and angles are equal.\n\nNow he is shopping: the market has $t$ regular polygons. For each of them print YES if it is beautiful and NO otherwise.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \le t \le 10^4$) — the number of polygons in the market. \n\nEach of the next $t$ lines contains a single integer $n_i$ ($3 \le n_i \le 10^9$): it means that the $i$-th polygon is a regular $n_i$-sided polygon. \n\n\n-----Output-----\n\nFor each polygon, print YES if it's beautiful or NO otherwise (case insensitive).\n\n\n-----Example-----\nInput\n4\n3\n4\n12\n1000000000\n\nOutput\nNO\nYES\nYES\nYES\n\n\n\n-----Note-----\n\nIn the example, there are $4$ polygons in the market. It's easy to see that an equilateral triangle (a regular $3$-sided polygon) is not beautiful, a square (a regular $4$-sided polygon) is beautiful and a regular $12$-sided polygon (is shown below) is beautiful as well. [Image]","[""t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    if n%4 == 0:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")"", ""for _ in range(int(input())):\n    # a, b = map(int, input().split())\n    n = int(input())\n    # arr = list(map(int, input().split()))\n    if n % 4 == 0:\n        print('YES')\n    else:\n        print('NO')\n"", ""t11 = int(input())\nfor _ in range(t11):\n    a = int(input())\n    if a % 4 == 0:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")"", ""import math as ma\n# import sys\n# input=sys.stdin.readline\n\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    if n%4==0:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")"", ""t11 = int(input())\nfor _ in range(t11):\n    n = int(input())\n    if n % 4 == 0:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")"", ""import math\nt = int(input())\nfor g in range(t):\n    n = int(input())\n    if(n%4==0):\n        print(\""YES\"")\n    else:\n        print(\""NO\"")"", ""for _ in range(int(input())):\n    if int(input()) % 4 == 0:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n"", ""import math\nt = int(input())\nfor helloworld in range(t):\n\tn = int(input())\n\tif n % 4 == 0:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')"", ""for nt in range(int(input())):\n\tn = int(input())\n\tif n%4==0:\n\t\tprint (\""YES\"")\n\telse:\n\t\tprint (\""NO\"")"", ""import sys\n\ndef ii():\n    return sys.stdin.readline().strip()\n\ndef idata():\n    return [int(x) for x in ii().split()]\n\ndef solve():\n    n = int(ii())\n    if n % 4 == 0:\n        print('YES')\n    else:\n        print('NO')\n    return\n\nfor t in range(int(ii())):\n    solve()\n"", ""t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 4 == 0:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n"", ""from math import *\n\ndef r1(t):\n    return t(input())\n\ndef r2(t):\n    return [t(i) for i in input().split()]\n\nfor _ in range(r1(int)):\n    n = r1(int)\n    if n % 4 == 0:\n        print('YES')\n    else:\n        print('NO')\n"", ""t=int(input())\nfor i in range(t):\n    n=int(input())\n    if n%4==0:\n        print('YES')\n    else:\n        print('NO')"", ""t = int(input())\nfor q in range(t):\n    n = int(input())\n    if n % 4 == 0:\n        print('YES')\n    else:\n        print('NO')"", ""import sys\ndef second(ele):\n    return(ele[1])\nfor _ in range(int(input())):\n    n = int(input())\n    if(n%4==0):\n        print(\""YES\"")\n    else:\n        print(\""NO\"")"", ""def read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\nt = read_int()\nfor case_num in range(t):\n    n = read_int()\n    print('YES' if n % 4 == 0 else 'NO')\n"", ""for _ in range(int(input())):\n    n = int(input())\n    if(n%4==0):\n        print(\""YES\"")\n    else:\n        print(\""NO\"")"", ""import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n=int(input())\n    if n%4==0:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n"", ""from sys import stdin, stdout\nimport math\n\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    print(\""YES\"" if n%4==0 else \""NO\"")\n"", ""t=int(input())\nfor i in range(t):\n    n=int(input())\n    if n%4==0:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n    \n    \n"", ""for _ in range(int(input())):\n    a=int(input())\n    if a%4==0: print(\""YES\"")\n    else: print(\""NO\"")\n"", ""def solve():\n    n = int(input())\n    if n % 4 == 0:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n\n\nfor i in range(int(input())):\n    solve()""]","{\n  ""inputs"": [\n    ""4\n3\n4\n12\n1000000000\n""\n  ],\n  ""outputs"": [\n    ""NO\nYES\nYES\nYES\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1304/A,math,"Being tired of participating in too many Codeforces rounds, Gildong decided to take some rest in a park. He sat down on a bench, and soon he found two rabbits hopping around. One of the rabbits was taller than the other.\n\nHe noticed that the two rabbits were hopping towards each other. The positions of the two rabbits can be represented as integer coordinates on a horizontal line. The taller rabbit is currently on position $x$, and the shorter rabbit is currently on position $y$ ($x \lt y$). Every second, each rabbit hops to another position. The taller rabbit hops to the positive direction by $a$, and the shorter rabbit hops to the negative direction by $b$.\n\n [Image] \n\nFor example, let's say $x=0$, $y=10$, $a=2$, and $b=3$. At the $1$-st second, each rabbit will be at position $2$ and $7$. At the $2$-nd second, both rabbits will be at position $4$.\n\nGildong is now wondering: Will the two rabbits be at the same position at the same moment? If so, how long will it take? Let's find a moment in time (in seconds) after which the rabbits will be at the same point.\n\n\n-----Input-----\n\nEach test contains one or more test cases. The first line contains the number of test cases $t$ ($1 \le t \le 1000$).\n\nEach test case contains exactly one line. The line consists of four integers $x$, $y$, $a$, $b$ ($0 \le x \lt y \le 10^9$, $1 \le a,b \le 10^9$) — the current position of the taller rabbit, the current position of the shorter rabbit, the hopping distance of the taller rabbit, and the hopping distance of the shorter rabbit, respectively.\n\n\n-----Output-----\n\nFor each test case, print the single integer: number of seconds the two rabbits will take to be at the same position.\n\nIf the two rabbits will never be at the same position simultaneously, print $-1$.\n\n\n-----Example-----\nInput\n5\n0 10 2 3\n0 10 3 3\n900000000 1000000000 1 9999999\n1 2 1 1\n1 3 1 1\n\nOutput\n2\n-1\n10\n-1\n1\n\n\n\n-----Note-----\n\nThe first case is explained in the description.\n\nIn the second case, each rabbit will be at position $3$ and $7$ respectively at the $1$-st second. But in the $2$-nd second they will be at $6$ and $4$ respectively, and we can see that they will never be at the same position since the distance between the two rabbits will only increase afterward.","[""def one():\n    return int(input())\n\n\ndef two():\n    return list(map(int, input().split()))\n\n\ndef lis():\n    return list(map(int, input().split()))\n\n\ndef st():\n    return input()\n\n\nfor _ in range(one()):\n    x, y, a, b = list(map(int, input().split()))\n    d = y - x\n    if d%(a+b)==0:\n        print(d//(a+b))\n    else:\n        print(-1)\n"", ""t = int(input())\nfor _ in range(t):\n    x,y,a,b = list(map(int,input().split()))\n    k = y - x\n    if k % (a + b) == 0:\n        print(k // (a+b))\n    else:\n        print(-1)\n"", ""from math import *\n\nt = int(input())\nfor i in range(t):\n    x, y, a, b = list(map(int, input().split()))\n    if (y - x) % (a + b) == 0:\n        print((y - x) // (a + b))\n    else:\n        print(-1)\n"", ""for __ in range(int(input())):\n    x, y, a, b = map(int, input().split())\n    z = y - x\n    c = a + b\n    print(-1 if z % c else z // c)"", ""for _ in range(int(input())):\n\tx, y, a, b = list(map(int, input().split()))\n\t\n\tt = (y - x) / (a + b)\n\ttz = (y - x) // (a + b)\n\n\tif t != tz:\n\t\tprint(-1)\n\telse:\n\t\tprint(tz)\n"", ""#  =========     /\\       /|    |====/|\n#      |        /  \\       |    |   / |\n#      |       /____\\      |    |  /  |\n#      |      /      \\     |    | /   |\n#  ========= /        \\  =====  |/====|  \n#  code\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        x,y,a,b = map(int,input().split())\n        i = (y - x)//(a + b)\n        if x + a * i == y - b * i:\n            print(i)\n        else:\n            print(-1)\n    return\n\ndef __starting_point():\n    main()\n__starting_point()"", ""from math import *\nimport itertools\n\n\nzzz = int(input())\n\nfor zz in range(zzz):\n    x, y, a, b = list(map(int, input().split()))\n    s = y - x\n    t = s / (a + b)\n    if int(t) == t:\n        print(int(t))\n    else:\n        print(-1)\n"", ""from math import *\n\nt = int(input())\nfor y in range(t):\n\tx,y,a,b = list(map(int,input().split()))\n\tif (y-x)%(a+b) != 0: print(-1)\n\telse:\n\t\tprint((y-x)//(a+b))\n"", ""import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nQuery = [list(map(int, input().split())) for _ in range(Q)]\n\nfor x, y, a, b in Query:\n    d = y-x\n    r = a+b\n    if d%r == 0:\n        print(d//r)\n    else:\n        print(-1)"", ""t = int(input())\nfor _ in range(t):\n    x,y,a,b = [int(i) for i in input().split()]\n    s = (y-x)/(a+b)\n    if s.is_integer():\n        print(int(s))\n    else:\n        print(-1)"", ""t=int(input())\nfor _ in range(t):\n    \n    x,y,a,b=list(map(int,input().split()))\n    if (y-x)%(a+b)!=0:\n        print(-1)\n    else:\n        print(int((y-x)/(a+b)))\n"", ""for _ in range(int(input())):\n    x, y, a, b = map(int, input().split())\n\n    d = y - x\n    if d % (a + b ) == 0:\n        print(d // (a + b))\n    else:\n        print(-1)"", ""for nt in range(int(input())):\n\tx,y,a,b=map(int,input().split())\n\tif (y-x)%(a+b)==0:\n\t\tprint ((y-x)//(a+b))\n\telse:\n\t\tprint (-1)"", ""def solve(X, Y, A, B):\n    d, r = divmod(Y - X, A + B)\n    if r == 0:\n        return d\n    else:\n        return -1\n\n\ndef __starting_point():\n    T, = list(map(int, input().split()))\n    for t in range(T):\n        X, Y, A, B = list(map(int, input().split()))\n        ans = solve(X, Y, A, B)\n        print(ans)\n\n__starting_point()"", ""import sys\nimport math\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef iinput():\n    return [int(x) for x in sys.stdin.readline().split()]\n\ndef main():\n    x, y, a, b = iinput()\n    if (y - x) % (a + b) == 0:\n        print((y - x) // (a + b))\n    else:\n        print(-1)\n    return\n\nfor ______ in range(int(input())):\n    main()\n""]","{\n  ""inputs"": [\n    ""5\n0 10 2 3\n0 10 3 3\n900000000 1000000000 1 9999999\n1 2 1 1\n1 3 1 1\n""\n  ],\n  ""outputs"": [\n    ""2\n-1\n10\n-1\n1\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1417/A,"greedy,math","— Hey folks, how do you like this problem?\n\n— That'll do it. \n\nBThero is a powerful magician. He has got $n$ piles of candies, the $i$-th pile initially contains $a_i$ candies. BThero can cast a copy-paste spell as follows:   He chooses two piles $(i, j)$ such that $1 \le i, j \le n$ and $i \ne j$.  All candies from pile $i$ are copied into pile $j$. Formally, the operation $a_j := a_j + a_i$ is performed. \n\nBThero can cast this spell any number of times he wants to — but unfortunately, if some pile contains strictly more than $k$ candies, he loses his magic power. What is the maximum number of times BThero can cast the spell without losing his power?\n\n\n-----Input-----\n\nThe first line contains one integer $T$ ($1 \le T \le 500$) — the number of test cases.\n\nEach test case consists of two lines:   the first line contains two integers $n$ and $k$ ($2 \le n \le 1000$, $2 \le k \le 10^4$);  the second line contains $n$ integers $a_1$, $a_2$, ..., $a_n$ ($1 \le a_i \le k$). \n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $1000$, and the sum of $k$ over all test cases does not exceed $10^4$.\n\n\n-----Output-----\n\nFor each test case, print one integer — the maximum number of times BThero can cast the spell without losing his magic power.\n\n\n-----Example-----\nInput\n3\n2 2\n1 1\n3 5\n1 2 3\n3 7\n3 2 2\n\nOutput\n1\n5\n4\n\n\n\n-----Note-----\n\nIn the first test case we get either $a = [1, 2]$ or $a = [2, 1]$ after casting the spell for the first time, and it is impossible to cast it again.","[""import math\nt = int(input())\nfor test in range(t):\n    n,k = map(int,input().split())\n    A = list(map(int,input().split()))\n    A.sort()\n    ans = 0\n    for i in range(1,n):\n        if(A[i]>k):\n            ans = 0\n            break\n        rem = k-A[i]\n        ans+=rem//A[0]\n    print(ans)"", ""t = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    a.sort()\n    ct = 0\n    \n    for i in range(1, n):\n        ct += (k-a[i])//a[0]\n        \n    print(ct)"", ""for _ in range(int(input())):\n    n,k = map(int,input().split())\n    A = list(map(int,input().split()))\n    A.sort()\n    ans = 0\n    for i in range(1,n):\n        if(A[i]>k):\n            ans = 0\n            break\n        rem = k-A[i]\n        ans+=rem//A[0]\n    print(ans)"", ""#   ==========     //\\\\       //||     ||====//||\n#       ||        //  \\\\        ||     ||   // ||\n#       ||       //====\\\\       ||     ||  //  ||\n#       ||      //      \\\\      ||     || //   ||\n#   ========== //        \\\\  ========  ||//====|| \n#  code\n\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in a[1:]:\n        ans += (k - i) // a[0]\n    print(ans)\n    return\n\ndef main():\n    t = 1\n    t = int(input())\n    for _ in range(t):\n        solve()\n\ndef __starting_point():\n    main()\n__starting_point()"", ""t = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    m = a[0]\n    a = a[1:]\n    total = 0\n    for b in a:\n        total += (k-b)//m\n\n    print(total)"", ""import math\nt=int(input())\nfor _ in range(t):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    a.sort()\n    b=a[0]\n    sumi=0\n    for i in range(1,n):\n        c=k-a[i]\n        sumi+=c//b\n    print(sumi)\n"", ""import sys\nimport random\nfrom fractions import Fraction\nfrom math import *\nfrom decimal import *\n \ndef input():\n    return sys.stdin.readline().strip()\n \ndef iinput():\n    return int(input())\n\ndef finput():\n    return float(input())\n\ndef tinput():\n    return input().split()\n\ndef linput():\n    return list(input())\n \ndef rinput():\n    return list(map(int, tinput()))\n\ndef fiinput():\n    return list(map(float, tinput()))\n \ndef rlinput():\n    return list(map(int, input().split()))\ndef trinput():\n    return tuple(rinput())\n\ndef srlinput():\n    return sorted(list(map(int, input().split())))\n\ndef NOYES(fl):\n    if fl:\n        print(\""NO\"")\n    else:\n        print(\""YES\"")\ndef YESNO(fl):\n    if fl:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n    \ndef modst(a, s):\n    res = 1\n    while s:\n        if s % 2:\n            res =res * a %998244353\n        a *= a\n        a = a % 998244353\n        s //= 2\n    return res\n\n\n\n    \ndef main():\n    #n = iinput()\n    #k = iinput() \n    #m = iinput() \n    #n = int(sys.stdin.readline().strip()) \n    n, k = rinput()\n    #n, m = rinput()\n    #m, k = rinput()\n    #n, k, m = rinput()\n    #n, m, k = rinput()\n    #k, n, m = rinput()\n    #k, m, n = rinput() \n    #m, k, n = rinput()\n    #m, n, k = rinput()\n    q = srlinput()\n    #q = linput()\n    res = 0\n    for i in range(1, n):\n        res += (k - q[i]) // q[0]\n    print(res)\n           \n        \n            \n    \n    \n    \n    \n    \n    \n            \n                \n        \n    \n            \n        \n\n            \n        \n    \n                \n    \n    \n    \n            \n    \n        \n    \n\nfor i in range(iinput()):\n    main()\n    \n"", ""from sys import stdin\n###############################################################\ndef iinput(): return int(stdin.readline())\ndef minput(): return list(map(int, stdin.readline().split()))\ndef linput(): return list(map(int, stdin.readline().split()))\n###############################################################\n\n\nt = iinput()\nwhile t:\n    t -= 1\n    n, k = minput()\n    a = linput()\n    a.sort()\n    ans = 0\n    for i in range(1, n):\n        ans += max(0, k - a[i]) // a[0]\n    print(ans)\n"", ""def solve(n,k):\n    s=list(map(int,input().split()))\n    s.sort()\n    ans=0\n    p=s[0]\n    for i in range(1,n):\n        ans+=((k-s[i])//p)\n    print(ans)\n\n\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    solve(n,k)"", ""for _ in range(int(input())):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    m = min(a)\n    ind = a.index(m)\n    ans = 0\n    for i in range(n):\n        if i == ind:\n            continue\n        ans += (k - a[i]) // m\n    print(ans)"", ""import sys\nimport math\ndef II():\n\treturn int(sys.stdin.readline())\n \ndef LI():\n\treturn list(map(int, sys.stdin.readline().split()))\n \ndef MI():\n\treturn list(map(int, sys.stdin.readline().split()))\n \ndef SI():\n\treturn sys.stdin.readline().strip()\nt = II()\nfor q in range(t):\n    n,k = MI()\n    a = LI()\n    a.sort()\n    count = 0\n    for i in range(1,n):\n        b = max(k-a[i],0)\n        count+=b//a[0]\n    print(count)\n"", ""#Codeforces Round #673\n#Problem A\nimport sys\n\n#\n#BEGIN TEMPLATE\n#\ndef input(): return sys.stdin.readline()[:-1]\ndef getInt(): return int(input())\ndef getIntIter(): return list(map(int, input().split()))\ndef getIntList(): return list(getIntIter())\ndef flush(): sys.stdout.flush()\n#\n#END TEMPLATE\n#\n\nfor _ in range(getInt()):\n    n,k = getIntIter()\n    nums = getIntList()\n    m = min(nums)\n    ans = 0\n    for num in nums:\n        ans += (k-num)//m\n    ans -= (k-m)//m\n    print(ans)\n"", ""for _ in range(int(input())):\n    n, k = list(map(int, input().split()))\n    *arr, = list(map(int, input().split()))\n    cnt = 0\n    mn = min(arr)\n    arr.remove(mn)\n    for v in arr:\n        cnt += (k - v) // mn\n    print(cnt)\n\n\n\n\n\n"", ""t = int(input())\nfor _ in range(t):\n    n,k = [int(x) for x in input().split()]\n    l = [int(x) for x in input().split()]\n    ans = 0\n    m = min(l)\n    mi = l.index(m)\n    for i in range(n):\n        if i!=mi:\n            ans+=max((k-l[i])//m,0)\n    print(ans)\n"", ""'''Author- Akshit Monga'''\nt=int(input())\nfor _ in range(t):\n    n,k=map(int,input().split())\n    arr=[int(x) for x in input().split()]\n    m=min(arr)\n    ans=0\n    for i in arr:\n        ans+=(k-i)//m\n    print(ans-(k-m)//m)"", ""from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n,x = list(map(int,input().split()))\n    a = sorted(list(map(int,input().split())),reverse=True)\n    g = a.pop()\n    ans = 0\n    for i in a:\n        ans += max(0,(x-i)//g)\n    print(ans)\n""]","{\n  ""inputs"": [\n    ""3\n2 2\n1 1\n3 5\n1 2 3\n3 7\n3 2 2\n""\n  ],\n  ""outputs"": [\n    ""1\n5\n4\n""\n  ]\n}"
