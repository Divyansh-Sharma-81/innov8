problems,tags,problem_statement,solution,input-output
https://codeforces.com/problemset/problem/1333/B,"greedy,implementation","Once again, Boris needs the help of Anton in creating a task. This time Anton needs to solve the following problem:\n\nThere are two arrays of integers $a$ and $b$ of length $n$. It turned out that array $a$ contains only elements from the set $\{-1, 0, 1\}$.\n\nAnton can perform the following sequence of operations any number of times:  Choose any pair of indexes $(i, j)$ such that $1 \le i < j \le n$. It is possible to choose the same pair $(i, j)$ more than once.   Add $a_i$ to $a_j$. In other words, $j$-th element of the array becomes equal to $a_i + a_j$. \n\nFor example, if you are given array $[1, -1, 0]$, you can transform it only to $[1, -1, -1]$, $[1, 0, 0]$ and $[1, -1, 1]$ by one operation.\n\nAnton wants to predict if it is possible to apply some number (zero or more) of these operations to the array $a$ so that it becomes equal to array $b$. Can you help him?\n\n\n-----Input-----\n\nEach test contains multiple test cases. \n\nThe first line contains the number of test cases $t$ ($1 \le t \le 10000$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \le n \le 10^5$)  — the length of arrays.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \dots, a_n$ ($-1 \le a_i \le 1$)  — elements of array $a$. There can be duplicates among elements.\n\nThe third line of each test case contains $n$ integers $b_1, b_2, \dots, b_n$ ($-10^9 \le b_i \le 10^9$)  — elements of array $b$. There can be duplicates among elements.\n\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, output one line containing ""YES"" if it's possible to make arrays $a$ and $b$ equal by performing the described operations, or ""NO"" if it's impossible.\n\nYou can print each letter in any case (upper or lower).\n\n\n-----Example-----\nInput\n5\n3\n1 -1 0\n1 1 -2\n3\n0 1 1\n0 2 2\n2\n1 0\n1 41\n2\n-1 0\n-1 -41\n5\n0 1 -1 1 -1\n1 1 -1 1 -1\n\nOutput\nYES\nNO\nYES\nYES\nNO\n\n\n\n-----Note-----\n\nIn the first test-case we can choose $(i, j)=(2, 3)$ twice and after that choose $(i, j)=(1, 2)$ twice too. These operations will transform $[1, -1, 0] \to [1, -1, -2] \to [1, 1, -2]$\n\nIn the second test case we can't make equal numbers on the second position.\n\nIn the third test case we can choose $(i, j)=(1, 2)$ $41$ times. The same about the fourth test case.\n\nIn the last lest case, it is impossible to make array $a$ equal to the array $b$.","[""from math import *\n\nmod = 1000000007\n\nfor zz in range(int(input())):\n    n = int(input())\n    a = [ int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    ha = True\n    hp = False\n    hm = False\n    for i in range(n):\n        if b[i] != a[i]:\n            if b[i] > a[i]:\n                if (hp):\n                    pass\n                else:\n                    ha = False\n                    break\n            else:\n                if (hm):\n                    pass\n                else:\n                    ha = False\n                    break\n        if a[i] > 0:\n            hp = True\n        elif a[i] < 0:\n            hm = True\n\n    if ha:\n        print('YES')\n    else:\n        print('NO')\n"", ""t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d1 = False\n    d2 = False\n    ans = True\n    for j in range(n):\n        if a[j] > b[j]:\n            if not d1:\n                ans = False\n        if a[j] < b[j]:\n            if not d2:\n                ans = False\n        if a[j] == -1:\n            d1 = True\n        elif a[j] == 1:\n            d2 = True\n    if ans:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")"", ""import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    pos = neg = False\n    ok = True\n    for i in range(n):\n        if a[i] > b[i] and not neg:\n            ok = False\n            break\n        if a[i] < b[i] and not pos:\n            ok = False\n            break\n        if a[i] == -1:\n            neg = True\n        if a[i] == 1:\n            pos = True\n    print('YES' if ok else 'NO')"", ""from math import *\n\n\n\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    cnt1 = 0\n    cnt0 = 0\n    cntotr = 0\n    f = True\n    for i in range(n):\n        if a[i] > b[i]:\n            if cntotr == 0:\n                f = False\n                break\n        if a[i] < b[i]:\n            if cnt1 == 0:\n                f = False\n                break\n        if a[i] == 0:\n            cnt0 += 1\n        elif a[i] == 1:\n            cnt1 += 1\n        else:\n            cntotr += 1\n    if f:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"", ""t = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = map(int, input().split())\n    B = map(int, input().split())\n    \n    seen_pos = seen_neg = False\n    for a, b in zip(A, B):\n        if (b > a and not seen_pos) or (b < a and not seen_neg):\n            print('NO')\n            break\n        \n        if a > 0:\n            seen_pos = True\n        elif a < 0:\n            seen_neg = True        \n    else:\n        print('YES')"", ""import math\nfrom collections import defaultdict\nml=lambda:map(int,input().split())\nll=lambda:list(map(int,input().split()))\nii=lambda:int(input())\nip=lambda:input()\n\n\""\""\""========main code===============\""\""\""\n\nt=ii()\nfor _ in range(t):\n    x=ii()\n    a=ll()\n    b=ll()\n    one=-1\n    minus=-1\n    f=0\n    for i in range(x):\n        if(b[i]>a[i]):\n            if(one==-1):\n                f=1\n                break\n        elif (b[i]<a[i]):\n            if(minus==-1):\n                f=1\n                break\n        if(a[i]==1):\n            one=1\n        elif(a[i]==-1):\n            minus=1\n    if(f):\n        print(\""NO\"")\n    else:\n        print(\""YES\"")"", ""t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int, input().split()))\n    b=list(map(int, input().split()))\n    grow = shrink = False\n    for ai, bi in zip(a,b):\n        if bi < ai:\n            if not shrink:\n                print('NO')\n                break\n        elif bi > ai and not grow:\n            print('NO')\n            break\n        if ai == 1:\n            grow = True\n        elif ai == -1:\n            shrink = True\n    else:\n        print('YES')\n"", ""t = int(input())\nfor case_num in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    pos = False\n    neg = False\n    ok = True\n    for i in range(n):\n        if (not pos) and (not neg) and (a[i] != b[i]):\n            ok = False\n            break\n        if (not pos) and (a[i] < b[i]):\n            ok = False\n            break\n        if (not neg) and (a[i] > b[i]):\n            ok = False\n            break\n        if a[i] < 0:\n            neg = True\n        if a[i] > 0:\n            pos = True\n    print('YES' if ok else 'NO')\n"", ""import math\n\n\ndef main():\n    was = set()\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(n):\n        if a[i] - b[i] > 0:\n            if not -1 in was:\n                print(\""NO\"")\n                return\n        elif a[i] - b[i] < 0:\n            if not 1 in was:\n                print(\""NO\"")\n                return\n        was.add(a[i])\n    print(\""YES\"")\n\ndef __starting_point():\n    t = int(input())\n    for i in range(t):\n        main()\n\n__starting_point()"", ""from bisect import *\nfrom collections import *\nfrom itertools import *\nimport functools\nimport sys\nimport math\nfrom decimal import *\nfrom copy import *\nfrom heapq import *\nfrom fractions import *\ngetcontext().prec = 30\nMAX = sys.maxsize\nMAXN = 300010\nMOD = 10**9+7\nspf = [i for i in range(MAXN)]\nspf[0]=spf[1] = -1\ndef sieve():\n    for i in range(2,MAXN,2):\n        spf[i] = 2\n    for i in range(3,int(MAXN**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i,MAXN,i):\n                if spf[j]==j:\n                    spf[j]=i\ndef fib(n,m):\n    if n == 0:\n        return [0, 1]\n    else:\n        a, b = fib(n // 2)\n        c = ((a%m) * ((b%m) * 2 - (a%m)))%m\n        d = ((a%m) * (a%m))%m + ((b)%m * (b)%m)%m\n        if n % 2 == 0:\n            return [c, d]\n        else:\n            return [d, c + d]\n\ndef charIN(x= ' '):\n    return(sys.stdin.readline().strip().split(x))\n\ndef arrIN(x = ' '):\n    return list(map(int,sys.stdin.readline().strip().split(x)))\n\ndef ncr(n,r):\n    num=den=1\n    for i in range(r):\n        num = (num*(n-i))%MOD\n        den = (den*(i+1))%MOD\n\n    return (num*(pow(den,MOD-2,MOD)))%MOD\n\ndef flush():\n    return sys.stdout.flush()\n\n'''*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'''\ndef solve():\n    n = int(input())\n    a = arrIN()\n    b = arrIN()\n    x = [[0,0,0] for i in range(n)]\n    for i in range(n):\n        x[i][0] = int(a[i]==-1)\n        x[i][1] = int(a[i]==0)\n        x[i][2] = int(a[i]==1)\n        x[i][0]|=x[i-1][0]\n        x[i][1]|=x[i-1][1]\n        x[i][2]|=x[i-1][2]\n    if a[0]!=b[0]:\n        print('NO')\n    else:\n        for i in range(1,n):\n            if a[i]!=b[i]:\n                if a[i]>b[i]:\n                    if not x[i-1][0]:\n                        print('NO')\n                        break\n                else:\n                    if not x[i-1][2]:\n                        print('NO')\n                        break\n        else:\n            print('YES')\n\n\nt = int(input())\nfor i in range(t):\n    solve()\n\n""]","{\n  ""inputs"": [\n    ""5\n3\n1 -1 0\n1 1 -2\n3\n0 1 1\n0 2 2\n2\n1 0\n1 41\n2\n-1 0\n-1 -41\n5\n0 1 -1 1 -1\n1 1 -1 1 -1\n""\n  ],\n  ""outputs"": [\n    ""YES\nNO\nYES\nYES\nNO\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1355/A,"brute force,implementation,math","Let's define the following recurrence: $$a_{n+1} = a_{n} + minDigit(a_{n}) \cdot maxDigit(a_{n}).$$\n\nHere $minDigit(x)$ and $maxDigit(x)$ are the minimal and maximal digits in the decimal representation of $x$ without leading zeroes. For examples refer to notes.\n\nYour task is calculate $a_{K}$ for given $a_{1}$ and $K$.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \le t \le 1000$) — the number of independent test cases.\n\nEach test case consists of a single line containing two integers $a_{1}$ and $K$ ($1 \le a_{1} \le 10^{18}$, $1 \le K \le 10^{16}$) separated by a space.\n\n\n-----Output-----\n\nFor each test case print one integer $a_{K}$ on a separate line.\n\n\n-----Example-----\nInput\n8\n1 4\n487 1\n487 2\n487 3\n487 4\n487 5\n487 6\n487 7\n\nOutput\n42\n487\n519\n528\n544\n564\n588\n628\n\n\n\n-----Note-----\n\n$a_{1} = 487$ \n\n $a_{2} = a_{1} + minDigit(a_{1}) \cdot maxDigit(a_{1}) = 487 + \min (4, 8, 7) \cdot \max (4, 8, 7) = 487 + 4 \cdot 8 = 519$ \n\n $a_{3} = a_{2} + minDigit(a_{2}) \cdot maxDigit(a_{2}) = 519 + \min (5, 1, 9) \cdot \max (5, 1, 9) = 519 + 1 \cdot 9 = 528$ \n\n $a_{4} = a_{3} + minDigit(a_{3}) \cdot maxDigit(a_{3}) = 528 + \min (5, 2, 8) \cdot \max (5, 2, 8) = 528 + 2 \cdot 8 = 544$ \n\n $a_{5} = a_{4} + minDigit(a_{4}) \cdot maxDigit(a_{4}) = 544 + \min (5, 4, 4) \cdot \max (5, 4, 4) = 544 + 4 \cdot 5 = 564$ \n\n $a_{6} = a_{5} + minDigit(a_{5}) \cdot maxDigit(a_{5}) = 564 + \min (5, 6, 4) \cdot \max (5, 6, 4) = 564 + 4 \cdot 6 = 588$ \n\n $a_{7} = a_{6} + minDigit(a_{6}) \cdot maxDigit(a_{6}) = 588 + \min (5, 8, 8) \cdot \max (5, 8, 8) = 588 + 5 \cdot 8 = 628$","[""import sys\n\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n\ta, k = list(map(int, input().split()))\n\tfor _ in range(k - 1):\n\t\tif '0' in str(a):\n\t\t\tbreak\n\t\ta += int(min(list(str(a)))) * int(max(list(str(a))))\n\tprint(a)\n"", ""for _ in range(int(input())):\n    n,k = map(int,input().split())\n    for i in range(k-1):\n        n = str(n)\n        if (\""0\"" in n):\n            break\n        n = int(n) + int(min(n))*int(max(n))\n\n    print(n)"", ""import sys\nINF = 10**20\nMOD = 10**9 + 7\nI = lambda:list(map(int,input().split()))\nfrom math import gcd\nfrom math import ceil\nfrom collections import defaultdict as dd, Counter\nfrom bisect import bisect_left as bl, bisect_right as br\n\nt, = I()\nwhile t:\n    t -= 1\n    a, k = I()\n    b = str(a)\n    s = []\n    while b not in s:\n        s.append(b)\n        b = str(int(b) + int(min(b)) * int(max(b)))\n    if k >= len(s):\n        print(s[-1])\n    else:\n        print(s[k - 1])"", ""t = int(input())\n\nfor i in range(t):\n  a, b = list(map(int, input().split()))\n\n  last = -1\n  b -= 1\n  while last != a and b:\n    b -= 1\n    last = a\n    aa = a\n    maks = 0\n    mini = 10\n    while aa:\n      mini = min(mini, aa%10)\n      maks = max(maks, aa%10)\n      aa = aa//10\n\n    a += mini*maks\n\n  print(a)\n"", ""def read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\nt = read_int()\nfor case_num in range(t):\n    a, k = read_ints()\n    i = 1\n    while i < k:\n        s = str(a)\n        lo = int(min(s))\n        hi = int(max(s))\n        if lo == 0:\n            break\n        a += lo * hi\n        i += 1\n    print(a)\n"", ""t=int(input())\nfor _ in range(t):\n    N,K=map(int,input().split())\n    while(K>1):\n        x=list(str(N))\n        if('0' in x):\n            break\n        x=[int(i) for i in x]\n        N=N+min(x)*max(x)\n        K-=1\n    print(N)"", ""def maxd(val) :\n\tmx = 0\n\twhile val > 0 :\n\t\tmx = max(mx, val % 10)\n\t\tval //= 10\n\treturn mx\n\ndef mind(val) :\n\tmn = 9\n\twhile val > 0 :\n\t\tmn = min(mn, val % 10)\n\t\tval //= 10\n\treturn mn\nt = int(input())\nwhile t > 0:\n\tt -= 1\n\ta, k = map(int, input().split())\n\tk -= 1\n\twhile k > 0 and mind(a) > 0 :\n\t\ta = a + mind(a) * maxd(a)\n\t\tk -= 1\n\tprint(a)"", ""T = int(input())\nn = [0]*T\n\nfor t in range(T):\n # n = int(input())\n  n,k = [int(i) for i in input().split(' ')]\n  n1 = str(n)\n  while n1.count('0') <1 and k>1: \n    n += int(min(n1))*int(max(n1))\n    n1 = str(n)\n    k-=1\n  print(n1)"", ""for _ in range(int(input())):\n    n,k = map(int,input().split())\n    for i in range(k-1):\n        n = str(n)\n        if (\""0\"" in n):\n            break\n        n = int(n)+int(min(n))*int(max(n))\n    print(n)"", ""for _ in range(int(input())):\n    a, k = list(map(int, input().split()))\n    for _ in range(k-1):\n        mn = min(str(a))\n        mx = max(str(a))\n        if mn == \""0\"":\n            break\n        a += int(mn)*int(mx)\n    print(a)\n"", ""def main():\n\tt = int(input())\n\tfor _ in range(t):\n\t\tn, k = [int(x) for x in input().split(\"" \"")]\n\t\tfor _ in range(k-1):\n\t\t\tnr = [int(x) for x in str(n)]\n\t\t\tmin_d = min(nr)\n\t\t\tmax_d = max(nr)\n\t\t\tif min_d == 0:\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tn += min_d * max_d\n\n\t\tprint(n)\n\n\nmain()"", ""import os\nimport sys\nif os.path.exists('/mnt/c/Users/Square/square/codeforces'):\n\tf = iter(open('A.txt').readlines())\n\tdef input():\n\t\treturn next(f)\n\t# input = lambda: sys.stdin.readline().strip()\t\nelse:\n\tinput = lambda: sys.stdin.readline().strip()\n\nfprint = lambda *args: print(*args, flush=True)\n\ndef min_max(x):\n\tl = list(str(x))\n\treturn int(min(l)), int(max(l))\n\nt = int(input())\nfor _ in range(t):\n\ta, K = map(int, input().split())\n\tK -= 1\n\n\tfor _ in range(K):\n\t\tu, v = min_max(a)\n\t\tif u == 0:\n\t\t\tbreak\n\t\ta += u*v\n\tprint(a)\n\n"", ""import math\nfor _ in range(int(input())):\n    a,k=list(map(int,input().split()))\n    for i in range(k-1):\n        d=list(str(a))\n        l=int(min(d))*int(max(d))\n        if l==0:\n            break\n        a+=l\n    print(a)\n    \n        \n    \n\n    \n"", ""import sys\n# from collections import deque\n# import heapq\n# from math import inf\n# from math import gcd\n\n# print(help(deque))\n# 26\npprint = lambda s:  print(' '.join(map(str,s)))\ninput = lambda: sys.stdin.readline().strip()\nipnut = input\nfor i in range(int(input())):\n    a,k = map(int,input().split())\n    # n = int(input())\n    # s = list(map(int,input().split()))\n    for i in range(k-1):\n        x = list(map(int,str(a)))\n        a_i = min(x)\n        a_m = max(x)\n        a = a+a_i*a_m\n        if a_i==0:\n            break\n    print(a)\n\n\""\""\""\n10\n10 11 12 13 14 15 16 17 11 11\n\""\""\""\n"", ""import sys\ninput=sys.stdin.readline\nfrom collections import defaultdict as dd,deque as dq\nt=int(input())\nwhile t:\n    #n=int(input())\n    n,k=map(int,input().split())\n    #l=list(map(int,input().split())\n    k-=1\n    while k:\n        l=str(n).strip()\n        x=int(min(l))*int(max(l))\n        if(x==0):\n            break\n        n=n+x\n        k-=1\n    print(n)\n    t-=1"", ""t=int(input())\ndef m(n):\n    s=[int(i) for i in str(n)]\n    s.sort()\n    return (s[0],s[-1])\nfor _ in range(t):\n    n,k=(map(int,input().split()))\n    pre=n\n    for i in range(2,k+1):\n        a=m(n)\n        n=n+a[0]*a[1]\n        if pre==n:\n            break \n        else:\n            pre=n\n        \n    print(n)"", ""import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n  a1,k = map(int,input().split())\n  a = a1\n  k -= 1\n  while k and str(a).count(\""0\"") == 0:\n    ls = [int(str(a)[i]) for i in range(len(str(a)))]\n    a += max(ls)*min(ls)\n    k -= 1\n  print(a)"", ""def solve():\n\ta, k = list(map(int,input().split()))\n\tseen = set()\n\titems = [a]\n\tfor i in range(k-1):\n\t\tlast = items[-1]\n\t\tmin_dig = int(min(str(last)))\n\t\tmax_dig = int(max(str(last)))\n\t\tnw = last + min_dig * max_dig\n\t\titems.append(nw)\n\t\tif '0' in str(items):\n\t\t\tbreak\n\tprint(items[-1])\n\nfor i in range(int(input())):\n\tsolve()\n"", ""def digits(n):\n\tl=[]\n\twhile(n>0):\n\t\tl.append(n%10)\n\t\tn=n//10\n\tmina=min(l)\n\tmaxa=max(l)\n\treturn mina*maxa\nt=int(input())\nfor you in range(t):\n\tl=input().split()\n\ta=int(l[0])\n\tk=int(l[1])\n\tfor i in range(k-1):\n\t\tif(digits(a)==0):\n\t\t\tbreak\n\t\ta+=digits(a)\n\tprint(a)\n"", ""t = int(input())\nfor ii in range(t):\n    a, k = map(int, input().split())\n    cur = 0\n    while cur < k - 1 and '0' not in str(a):\n        mi = 1000\n        ma = -1\n        for i in str(a):\n            mi = min(int(i), mi)\n            ma = max(int(i), ma)\n        a += mi * ma\n        cur += 1\n    print(a)"", ""t = int(input())\nfor _ in range(t):\n    a, k = list(map(int, input().split()))\n    for i in range(k - 1):\n        a += int(min(str(a))) * int(max(str(a)))\n        if '0' in str(a):\n            break\n    print(a)\n"", ""\ndef f(x):\n\ts=str(x)\n\tmn=12\n\tmx=0\n\n\tfor i in s:\n\t\tmx=max(mx,int(i))\n\t\tmn=min(mn,int(i))\n\treturn mn*mx\n\nfor _ in range(int(input())):\n\ta,k=list(map(int,input().split()))\n\tk-=1\n\tprev=-1\n\n\twhile(k>0):\n\t\tif(prev==a):\n\t\t\tbreak\n\t\tprev=a\n\t\ta+=f(a)\n\t\tk-=1\n\n\tprint(a)\n"", ""'''input\n8\n1 4\n487 1\n487 2\n487 3\n487 4\n487 5\n487 6\n487 7\n'''\nimport math\ndef dig(x):\n\tmn = x%10\n\tmx = x%10\n\twhile x>0:\n\t\tmn = min(mn,x%10)\n\t\tmx = max(mx,x%10)\n\t\tx//=10\n\treturn mn,mx\ndef solve():\n\ta,k = map(int,input().split())\n\tl = [a]\n\tln = 1\n\tfor i in range(1000):\n\t\tpv = l[ln-1]\n\t\tmn,mx = dig(pv) \n\t\tif mn ==0:\n\t\t\tbreak\n\t\tl.append(pv+mx*mn)\n\t\tln+=1\n\tk = min(k,len(l))\n\tprint(l[k-1])\n\treturn\nt = 1\nt = int(input())\nwhile t>0:\n\tt-=1\n\tsolve()"", ""def main():\n    t = int(input())\n    for ti in range(t):\n        a, k = map(int, input().split())\n\n        for i in range(k - 1):\n            astr = str(a)\n            mn, mx = int(min(astr)), int(max(astr))\n            if mn == 0 or mx == 0:\n                break\n            a += mn * mx\n        print(a)\n\nmain()"", ""from sys import stdin, stdout  \ninput = stdin.readline\n#print = stdout.write\n\nfor _ in range(int(input())):\n    n, k = list(map(int, input().split()))\n    have = n\n    for i in range(k - 1):\n        digits = list(map(int, str(have)))\n        bf = min(digits) * max(digits)\n        if bf == 0:\n            break\n        have += bf\n    print(have)\n"", ""cases = int(input())\n\nfor _ in range(cases):\n    \n    n, k = [int(s) for s in input().split()]\n    \n    mind = -1\n    \n    for _ in range(k-1):\n        \n        if mind==0:\n            break\n        \n        s = str(n)\n        mind, maxd = int(s[0]), int(s[0])\n        \n        for l in s:\n            value = int(l)\n            if value>maxd:\n                maxd = value\n            elif value<mind:\n                mind = value\n            \n            if mind==0:\n                break\n                \n        n += maxd*mind\n\n    print(n)\n"", ""t=int(input())\nfor i in range(t):\n    a1,k=map(int,input().split())\n    an=a1\n    for j in range(1,k):\n        astr=str(an)\n        min=9\n        max=0\n        for r in range(len(astr)):\n            if int(astr[r])<min:\n                min=int(astr[r])\n            if int(astr[r])>max:\n                max=int(astr[r])\n        an+=min*max\n        if min==0:\n            break\n    print(an)"", ""\n\nT = int(input())\n\nfor t in range(T):\n    a, K = list(map(int, input().split()))\n\n    for k in range(K - 1):\n        a_ar = list(map(int, list(str(a))))\n\n        if min(a_ar) == 0:\n            break\n\n        a += min(a_ar) * max(a_ar)\n\n    print(a)\n"", ""for _ in range(int(input())):\n    a, k = list(map(int, input().split()))\n    if '0' in str(a):\n        print(a)\n    else:\n        while '0' not in str(a) and k != 1:\n            k -= 1\n            a += int(max(str(a))) * int(min(str(a)))\n        print(a)\n"", ""import sys\ninput = lambda: sys.stdin.readline().strip()\nt = int(input())\nwhile t:\n    t-=1\n    a1,k = map(int,input().split())\n    while k>1:\n        k-=1\n        val = list(map(int,list(str(a1))))\n        if min(val)==0:\n            break\n        # print(val)\n        a1 = a1+min(val)*max(val)\n    print(a1)"", ""for i in range(int(input())):\n    a, k = map(int, input().split())\n    while '0' not in str(a) and k > 1:\n        mi = 10\n        ma = -1\n        for j in range(len(str(a))):\n            if int(str(a)[j]) > ma:\n                ma = int(str(a)[j])\n            if int(str(a)[j]) < mi:\n                mi = int(str(a)[j])\n        a += ma * mi\n        k -= 1\n    print(a)"", ""import sys, os\n\nif 'local' in os.environ :\n    sys.stdin = open('./input.txt', 'r')\n\nf = lambda:list(map(int, input().split()))\n\n\nmidigit = lambda x: str(x)\ndef solve():\n    t = f()[0]\n    for _ in range(t):\n        a, k = f()\n        if k == 1:\n            print(a)\n            continue\n        for i in range(k-1):\n            an = a + int(min(str(a))) * int(max(str(a)))\n            if a == an:\n                break\n            a = an\n        print(a)\n\nsolve()\n"", ""for _ in range(int(input())):\n    a, k = tuple(map(int, input().split()))\n\n    for i in range(k - 1):\n        nums = [i for i in str(a)]\n        delta = int(min(nums)) * int(max(nums))\n\n        if delta == 0:\n            break\n        a += delta\n\n    print(a)\n"", ""t = int(input())\nbuf = []\nfor _ in range(t):\n    a, k = input().split()\n    k = int(k) - 1\n    for _ in range(k):\n        c = min(a)\n        d = max(a)\n        a = str(int(a) + int(c) * int(d))\n        if '0' in a:\n            break\n    buf.append(a)\n\nprint('\\n'.join(buf))\n"", ""from sys import stdin, stdout\nimport heapq\nimport cProfile, math\nfrom collections import Counter, defaultdict, deque\nfrom bisect import bisect_left, bisect, bisect_right\nimport itertools\nfrom copy import deepcopy\nfrom fractions import Fraction\nimport sys, threading\nimport operator as op\nfrom functools import reduce\nimport sys\n\n\ndef get_int():\n    return int(stdin.readline().strip())\n\n\ndef get_tuple():\n    return list(map(int, stdin.readline().split()))\n\n\ndef get_list():\n    return list(map(int, stdin.readline().split()))\n\n\ndef solve():\n    n,k = get_tuple()\n    n = str(n)\n    while '0' not in n and k>1:\n        n = int(n) + int(max(n))*int(min(n))\n        n = str(n)\n        k -= 1\n    return n\n\n\ndef main():\n    ans = solve()\n    print(ans)\n\nTestCases = True\n\nif TestCases:\n    for i in range(get_int()):\n        main()\nelse:\n    main()\n""]","{\n  ""inputs"": [\n    ""8\n1 4\n487 1\n487 2\n487 3\n487 4\n487 5\n487 6\n487 7\n""\n  ],\n  ""outputs"": [\n    ""42\n487\n519\n528\n544\n564\n588\n628\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1437/B,"constructive algorithms,greedy","You are given a string $s$ of even length $n$. String $s$ is binary, in other words, consists only of 0's and 1's.\n\nString $s$ has exactly $\frac{n}{2}$ zeroes and $\frac{n}{2}$ ones ($n$ is even).\n\nIn one operation you can reverse any substring of $s$. A substring of a string is a contiguous subsequence of that string.\n\nWhat is the minimum number of operations you need to make string $s$ alternating? A string is alternating if $s_i \neq s_{i + 1}$ for all $i$. There are two types of alternating strings in general: 01010101... or 10101010...\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \le t \le 1000$) — the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($2 \le n \le 10^5$; $n$ is even) — the length of string $s$.\n\nThe second line of each test case contains a binary string $s$ of length $n$ ($s_i \in$ {0, 1}). String $s$ has exactly $\frac{n}{2}$ zeroes and $\frac{n}{2}$ ones.\n\nIt's guaranteed that the total sum of $n$ over test cases doesn't exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, print the minimum number of operations to make $s$ alternating.\n\n\n-----Example-----\nInput\n3\n2\n10\n4\n0110\n8\n11101000\n\nOutput\n0\n1\n2\n\n\n\n-----Note-----\n\nIn the first test case, string 10 is already alternating.\n\nIn the second test case, we can, for example, reverse the last two elements of $s$ and get: 0110 $\rightarrow$ 0101.\n\nIn the third test case, we can, for example, make the following two operations:   11101000 $\rightarrow$ 10101100;  10101100 $\rightarrow$ 10101010.","[""t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    ans = 0\n    for y in range(1, n):\n        if s[y] == s[y-1]:\n            ans += 1\n    print((ans + ans % 2) // 2)\n    \n"", ""import sys\ninput=sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = input().strip()\n    c = 0\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            c += 1\n    print((c+1)//2)"", ""t = int(input())\n\nfor q in range(t):\n    n = int(input())\n    s = input()\n    a, b = 0, 0\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            if s[i] == '0':\n                a += 1\n            else:\n                b += 1\n    print(max(a, b))\n"", ""import collections\nimport math\nfrom itertools import permutations as p\n\nfor t in range(int(input())):\n    n=int(input())\n    s=input()\n    stack=[]\n    for i in s:\n        if i=='1':\n            if stack and stack[-1]=='0':\n                stack.pop()\n        else:\n            if stack and stack[-1]=='1':\n                stack.pop()\n        stack.append(i)\n    print(len(stack)//2)"", ""import sys\n\ninput = sys.stdin.readline\n\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef lcm(a, b):\n    return (a * b) / gcd(a, b)\n\ndef main():\n    for _ in range(int(input())):\n        n=int(input())\n        # a=list(map(int, input().split()))\n        s=input()\n        c=0\n        for i in range(1,len(s)):\n            if s[i]==s[i-1]:\n                c+=1\n        print(c//2+c%2)\n\n    return\n\ndef __starting_point():\n    main()\n\n\n__starting_point()"", ""for _ in range(int(input())):\n    n = int(input())\n    *s, = list(map(int, input()))\n    cnt = [0, 0]\n    for i in range(len(s)):\n        if i > 0 and s[i] == s[i - 1]:\n            cnt[s[i]] += 1\n    print(max(cnt))\n\n\n"", ""import sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    #n, m = map(int, sys.stdin.readline().split())\n    #q = list(map(int, sys.stdin.readline().split()))\n    s = sys.stdin.readline().strip()\n    res = 0\n    i = 0\n    while i < n:\n        while i < n and s[i] != \""1\"":\n            i += 1\n        if i >= n:\n            break\n        while i < n and s[i] == \""1\"":\n            i += 1\n            res += 1\n            #print(i, res)\n        i += 1\n        res -= 1\n        #print(\"" \"", i, res)\n    i = 0\n    ans = 0\n    while i < n:\n        while i < n and s[i] != \""0\"":\n            i += 1\n        if i >= n:\n            break\n        while i < n and s[i] == \""0\"":\n            i += 1\n            ans += 1\n            #print(i, res)\n        i += 1\n        ans -= 1\n        #print(\"" \"", i, res)\n    print(max(ans, res))\n    \n   \n        \n        \n            \n        \n                \n            \n            \n        \n            \n    \n    \n    \n    \n    \n    \n            \n                \n        \n    \n            \n        \n\n            \n        \n    \n                \n    \n    \n    \n            \n    \n        \n    \n\nfor i in range(int(sys.stdin.readline().strip())):\n    main()"", ""ans = []\nfor _ in range(int(input())):\n    n = int(input())\n    u = list(map(int, list(input())))\n    cnt1 = cnt0 = 0\n    for i in range(1, n):\n        if u[i] == u[i - 1]:\n            if u[i] == 0:\n                cnt0 += 1\n            else:\n                cnt1 += 1\n    ans.append(max(cnt1, cnt0))\nprint(*ans, sep='\\n')\n"", ""def solve(n):\n    s=input()\n    ans=0\n    flag=0\n    for i in range(n-1):\n        if s[i]==s[i+1]:\n            if flag==1:\n                ans+=1\n                flag=0\n            else:\n                flag=1\n    if flag:\n        ans+=1\n    return ans\n\nfor _ in range(int(input())):\n    print(solve(int(input())))\n\n"", ""for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    blocks = [[s[0], 1]]\n    for i in range(1, n):\n        if s[i] == blocks[-1][0]:\n            blocks[-1][1] += 1\n        else:\n            blocks += [[s[i], 1]]\n    one = 0\n    zero = 0\n    for i in range(len(blocks)):\n        if blocks[i][0] == '0':\n            zero += blocks[i][1] - 1\n        else:\n            one += blocks[i][1] - 1\n    print(max(one, zero))"", ""for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    l = list(s)\n    c0 = 0\n    c1 = 0\n    for i in range(n-1):\n        if(l[i] == l[i+1]):\n            if(l[i] == '0'):\n                c0 += 1\n            else:\n                c1 += 1\n\n    print(max(c0, c1))\n"", ""t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    S = 0\n    for j in range(1,len(s)):\n        if s[j-1]=='1' and s[j]=='1':\n            S+=1\n    if s[0]=='1' and s[-1]=='1' and len(s)>2:\n        S+=1\n    print(S)\n"", ""import sys\ninput=sys.stdin.readline\n\nT=int(input())\nfor _ in range(T):\n    n=int(input())\n    s=input()\n    ans1=0\n    ans2=0\n    i=0\n    while(i<n):\n        c=1\n        while (s[i]==s[i-1]):\n            c=c+1\n            i=i+1\n            \n        if (s[i-1]=='1'):\n            ans2=ans2+c-1\n        else:\n            ans1=ans1+c-1\n        i=i+1\n    print(max(ans1,ans2))\n            \n            \n"", ""t=int(input())\nfor i in range(t):\n    n=int(input())\n    s=input().strip()\n    o=0\n    z=0\n    for j in range(1,n):\n        if s[j]==s[j-1]:\n            if s[j]=='1':\n                o=o+1\n            else:\n                z=z+1\n    print(max(z,o))"", ""import sys\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c for j in range(b)] for i in range(a)]\ndef list3d(a, b, c, d): return [[[d for k in range(c)] for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e for l in range(d)] for k in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nINF = 10**19\nMOD = 10**9 + 7\nEPS = 10**-10\n\ndef RLE(data):\n    from itertools import groupby\n\n    return [(x, len(list(grp))) for x, grp in groupby(data)]\n\n\ndef check(S, T):\n    A = [0] * N\n    for i in range(N):\n        if S[i] != T[i]:\n            A[i] = 1\n    \n    rle = RLE(A)\n    cnt = 0\n    for x, _ in rle:\n        if x:\n            cnt += 1\n    return cnt\n\nfor _ in range(INT()):\n    N = INT()\n    S = input()\n\n    T1 = '01' * (N//2)\n    T2 = '10' * (N//2)\n\n    ans = min(check(S, T1), check(S, T2))\n    print(ans)\n"", ""import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n=int(input())\n    S=input().strip()\n\n    A=0\n    for i in range(1,n):\n        if S[i]==S[i-1]:\n            A+=1\n\n    print((A+1)//2)\n"", ""for irjfr in range(int(input())):\n    input()\n    s = input()\n    res = int(s[0] == s[-1] == '1')\n    for i in range(len(s) - 1):\n        res += int(s[i] == s[i + 1] == '1')\n    print(res)"", ""for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans1 = 0\n    ans2 = 0\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            if s[i] == '0':\n                ans1 += 1\n            else:\n                ans2 += 1\n    print(max(ans1, ans2))\n"", ""import math\nfor  _ in range(int(input())):\n    n = int(input())\n    s = input()\n    r = 0\n    for i in range(1,n):\n        if s[i-1] != s[i]:\n            continue\n        else:\n            r+=1\n    print(math.ceil(r/2))\n\n""]","{\n  ""inputs"": [\n    ""3\n2\n10\n4\n0110\n8\n11101000\n""\n  ],\n  ""outputs"": [\n    ""0\n1\n2\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1355/B,"dp,greedy,sortings","Young wilderness explorers set off to their first expedition led by senior explorer Russell. Explorers went into a forest, set up a camp and decided to split into groups to explore as much interesting locations as possible. Russell was trying to form groups, but ran into some difficulties...\n\nMost of the young explorers are inexperienced, and sending them alone would be a mistake. Even Russell himself became senior explorer not long ago. Each of young explorers has a positive integer parameter $e_i$ — his inexperience. Russell decided that an explorer with inexperience $e$ can only join the group of $e$ or more people.\n\nNow Russell needs to figure out how many groups he can organize. It's not necessary to include every explorer in one of the groups: some can stay in the camp. Russell is worried about this expedition, so he asked you to help him.\n\n\n-----Input-----\n\nThe first line contains the number of independent test cases $T$($1 \leq T \leq 2 \cdot 10^5$). Next $2T$ lines contain description of test cases.\n\nThe first line of description of each test case contains the number of young explorers $N$ ($1 \leq N \leq 2 \cdot 10^5$).\n\nThe second line contains $N$ integers $e_1, e_2, \ldots, e_N$ ($1 \leq e_i \leq N$), where $e_i$ is the inexperience of the $i$-th explorer.\n\nIt's guaranteed that sum of all $N$ doesn't exceed $3 \cdot 10^5$.\n\n\n-----Output-----\n\nPrint $T$ numbers, each number on a separate line.\n\nIn $i$-th line print the maximum number of groups Russell can form in $i$-th test case.\n\n\n-----Example-----\nInput\n2\n3\n1 1 1\n5\n2 3 1 2 2\n\nOutput\n3\n2\n\n\n\n-----Note-----\n\nIn the first example we can organize three groups. There will be only one explorer in each group. It's correct because inexperience of each explorer equals to $1$, so it's not less than the size of his group.\n\nIn the second example we can organize two groups. Explorers with inexperience $1$, $2$ and $3$ will form the first group, and the other two explorers with inexperience equal to $2$ will form the second group.\n\nThis solution is not unique. For example, we can form the first group using the three explorers with inexperience equal to $2$, and the second group using only one explorer with inexperience equal to $1$. In this case the young explorer with inexperience equal to $3$ will not be included in any group.","[""import sys\n\ninput=sys.stdin.readline\n\nfor _ in range(int(input())):\n    N=int(input())\n    e=list(map(int,input().split()))\n    e.sort()\n    ans=0\n    val=0\n    g=0\n    for i in range(0,N):\n        g+=1\n        val=e[i]\n        if g>=val:\n            ans+=1\n            g=0\n            val=0\n    print(ans)\n"", ""from sys import stdin\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    ans = 0\n    arr = sorted(list(map(int,stdin.readline().split())))\n    peo = 0\n    for i in range(n):\n        peo += 1\n        if peo == arr[i]:\n            ans += 1\n            peo = 0\n    print(ans)\n"", ""import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n  n = int(input())\n  a = list(map(int,input().split()))\n  a.sort()\n  ans = 0\n  sepa = -1\n  for i in range(n):\n    if i-sepa >= a[i]:\n      sepa = i\n      ans += 1\n  print(ans)"", ""import sys\n\ndef solve():\n    input = sys.stdin.readline\n    T = int(input())\n    Ans = [0] * T\n    for t in range(T):\n        N = int(input())\n        A = [int(a) for a in input().split()]\n        skillDict = dict()\n        for a in A:\n            if a in skillDict: skillDict[a] += 1\n            else: skillDict[a] = 1\n        for i in range(1, N+1):\n            if i in skillDict:\n                Ans[t] += skillDict[i] // i\n                if i+1 not in skillDict: skillDict[i+1] = 0\n                skillDict[i+1] += skillDict[i] % i\n    print(\""\\n\"".join(map(str, Ans)))\n  \n\n    return 0\n\ndef __starting_point():\n    solve()\n__starting_point()"", ""import sys\ninput = sys.stdin.readline\n\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    e = list(map(int, input().split()))\n    \n    e = sorted(e)\n    ans = 0\n    \n    cnt = 0\n    max_ = 0\n    for i in range(n):\n        cnt += 1\n        max_ = max(e[i], max_)\n        if max_ <= cnt:\n            ans += 1\n            max_ = 0\n            cnt = 0\n    print(ans)""]","{\n  ""inputs"": [\n    ""2\n3\n1 1 1\n5\n2 3 1 2 2\n""\n  ],\n  ""outputs"": [\n    ""3\n2\n""\n  ]\n}"
https://codeforces.com/problemset/problem/474/B,"binary search,implementation","It is lunch time for Mole. His friend, Marmot, prepared him a nice game for lunch.\n\nMarmot brought Mole n ordered piles of worms such that i-th pile contains a_{i} worms. He labeled all these worms with consecutive integers: worms in first pile are labeled with numbers 1 to a_1, worms in second pile are labeled with numbers a_1 + 1 to a_1 + a_2 and so on. See the example for a better understanding.\n\nMole can't eat all the worms (Marmot brought a lot) and, as we all know, Mole is blind, so Marmot tells him the labels of the best juicy worms. Marmot will only give Mole a worm if Mole says correctly in which pile this worm is contained.\n\nPoor Mole asks for your help. For all juicy worms said by Marmot, tell Mole the correct answers.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5), the number of piles.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^3, a_1 + a_2 + ... + a_{n} ≤ 10^6), where a_{i} is the number of worms in the i-th pile.\n\nThe third line contains single integer m (1 ≤ m ≤ 10^5), the number of juicy worms said by Marmot.\n\nThe fourth line contains m integers q_1, q_2, ..., q_{m} (1 ≤ q_{i} ≤ a_1 + a_2 + ... + a_{n}), the labels of the juicy worms.\n\n\n-----Output-----\n\nPrint m lines to the standard output. The i-th line should contain an integer, representing the number of the pile where the worm labeled with the number q_{i} is.\n\n\n-----Examples-----\nInput\n5\n2 7 3 4 9\n3\n1 25 11\n\nOutput\n1\n5\n3\n\n\n\n-----Note-----\n\nFor the sample input:\n\n  The worms with labels from [1, 2] are in the first pile.  The worms with labels from [3, 9] are in the second pile.  The worms with labels from [10, 12] are in the third pile.  The worms with labels from [13, 16] are in the fourth pile.  The worms with labels from [17, 25] are in the fifth pile.","[""n=int(input())\na=list(map(int,input().split()))\nk=[]\nfor i in range(n):\n    for j in range(a[i]):\n        k.append(i+1)\nm=int(input())\nb=list(map(int,input().split()))\nfor i in b:\n    print(k[i-1])"", ""n, p, m, w = int(input()), list(map(int, input().split())), int(input()), sorted(enumerate(map(int, input().split())), key = lambda x: x[1])\nans, pos = [-1] * m, [0, 0]\nfor i, c in w:\n    while pos[0] + p[pos[1]] < c:\n        pos[0] += p[pos[1]]\n        pos[1] += 1\n    ans[i] = pos[1] + 1\nprint(*ans, sep = '\\n')\n"", ""from sys import stdin, stdout\nfrom bisect import *\ninput = stdin.read()\nn, ai_str, m, qi_str = [_f for _f in input.split('\\n') if _f]\n\na = list(map(int, ai_str.split()))\nq = list(map(int, qi_str.split()))\nassert len(a) > 0 and len(q) > 0\n\nb = [0] * len(a)\nfor i, ai in enumerate(a):\n\tb[i] = b[i-1] + ai\n\n\nfor qi in q:\n\tprint(bisect_left(b, qi) + 1)\n"", ""\n\n\ninput()\nheaps = list(map(int, input().split()))\ninput()\nnumbers = list(map(int, input().split()))\n#heaps = [2, 7, 3, 4, 9]\n#numbers = [1, 25, 11]\nres = [0] * len(numbers)\n\nsums = [heaps[0]]\nmask = [1] * heaps[0]\nfor i in range(1, len(heaps)):\n    mask += [i+1] * (heaps[i])\n    sums.append(heaps[i] + sums[-1])\n\nfor i in range(len(numbers)):\n    print(mask[numbers[i]-1])\n\n"", ""num = int(input())\npiles = list(map(int, input().split(' ')))\ntuplex = []\ncurr = 1\nfor i in piles:\n    tuplex.append((curr, curr+i-1))\n    curr = curr+i\n\nquer = int(input())\nqueries = list(map(int, input().split(' ')))\nquer2 = [[queries[x], x, -1] for x in range(len(queries))]\nquer2.sort(key = lambda x:x[0])\n\nind = 0\nfor i in range(len(quer2)):\n    while not (tuplex[ind][0] <= quer2[i][0] <= tuplex[ind][1]):\n        ind += 1\n    quer2[i][2] = ind\n\nquer2.sort(key = lambda x:x[1])\nfor i in quer2:\n    print(i[2]+1)"", ""kheap=int(input())\nheaps=list(map(int,input().split()))\nkworms=int(input())\nworms=list(map(int,input().split()))\nd1={i:0 for i in range(1,sum(heaps)+1)}\nprev=0\ncounter=1\nfor i in heaps:\n    start=prev+1\n    prev+=i\n    for i2 in range(start,prev+1):\n        d1[i2]=counter\n    counter+=1\nfor num in worms:\n    print(d1[num])"", ""'''\nCreated on Oct 6, 2014\n\n@author: Ismael\n'''\nn = int(input())\nA = list(map(int,input().split()))\nq = int(input())\nQ = list(map(int,input().split()))\nans = []\nprec = 1\niStack = 0\nfor ai in A:\n    iStack += 1\n    for query in range(prec,prec+ai):\n        ans.append(iStack)\n    prec = ai\nfor query in Q:\n    print(ans[query-1])"", ""\n#class heap:\n\t#def __init__(self, first, last):\n\t\t#self.first = first\n\t\t#self.last = last\n\t#def __contains__(self, x):\n\t\t#if self.first <= x <= self.last:\n\t\t\t#return True\n\t\t#else:\n\t\t\t#return False\n\t\t\ndef borders(nums):\n\tprev = 1\n\tfor x in nums:\n\t\tyield prev, prev + x - 1\n\t\tprev += x\n\ndef inside(x, first, last):\n\treturn first <= x <= last\n\n#nums = list(int(x) for x in '2 7 3 4 9'.split(\"" \""))\n#print(nums)\n#print(list(borders(nums)))\n\n#j = list(int(x) for x in '1 25 11'.split(\"" \""))\n\n\n\n\nheapsamount = int(input())\nnums = list(int(x) for x in input().split(\"" \""))\njamount = int(input())\nj = list(int(x) for x in input().split(\"" \""))\n\n#heapsamount = 5\n#nums = list(int(x) for x in '2 7 3 4 9'.split(\"" \""))\n#jamount = 4\n#j = [1, 25, 11, 4]\n\nb= list(borders(nums))\n\n#for hp, number in zip(hps, j):\n\n#hps = list(heap(*args) for args in b)\n#for number in j:\n\t#for hp, hpnum in zip(hps, range(1,heapsamount+1)):\n\t\t#if number in hp:\n\t\t\t#print(hpnum)\n\t\t\t\n\t\t\t\nsor = list([x, y, None] for x, y in zip(j, list(range(jamount))))\n\nsor.sort(key=lambda x: x[0])\n\ni=0\nj=0\nfor number, index, n in sor:\n\tbord = b[i]\n\t\n\twhile not inside(number, bord[0], bord[1]):\n\t\ti+=1\n\t\tbord = b[i]\n\t\t\n\t#while inside(number, bord[0], bord[1]):\n\tsor[j][2] = i+1\n\t\t\n\tj+=1\n\t\nsor.sort(key=lambda x:x[1])\nfor x in sor:\n\tprint(x[2])\n\t\t\n\t\t\n\t\n\t\n"", ""n,a = int(input()), list(map(int, input().split()))\nm,q = int(input()), list(map(int, input().split()))\n\ndp = []\nfor i in range(n):\n    dp += [i+1]*a[i]\nfor x in q:\n    print (dp[x-1])"", ""__author__ = 'hamed1soleimani'\nimport math\ninput()\np = input().split()\ninput()\nq = input().split()\n\n\nworms = list(range(10 ** 6))\n\nm = 0\nfor i in range(len(p)):\n    for j in range(int(p[i])):\n        worms[m] = i\n        m += 1\n\nfor x in q:\n    print(worms[int(x) - 1] + 1)\n\n\n"", ""n=int(input())\na=list(map(int,input().split())) \nm=int(input()) \nq=list(map(int,input().split()))\n\nb=[]\nfor i in range(n):\n    b+=[i+1]*a[i]\n \n\nfor i in q:\n    print(b[i-1])\n"", ""n = int(input())\na = list(map(int, input().split()))\ninput()\nqueries = list(map(int, input().split()))\n\nans = []\nfor i in range(n):\n\tans += [i]*a[i]\n\nfor q in queries:\n\tprint(ans[q-1]+1)\n"", ""n = int(input())\npre = []\nrow = 1\nfor i in input().split(' '):\n    for j in range(int(i)):\n        pre.append(row)\n    row += 1\nm = int(input())\ntasty_worms = []\nfor i in input().split(' '):\n    i = int(i)\n    print(pre[i - 1])\n"", ""mp = {}\n\t\ndef main():\n\n\ta,b =-1,0\n\tn = int(input())\n\tline = input() #Read the whole line\n\tx = line.split()\n \t\n\t\t\t\n\tfor i in range(n):\n\t\ta = b\n\t\tb = b + int(x[i])\n\t\tfor k in range(a+1,b+1):\n                        mp[k] = 1 + i\n\n\tm = int(input())\t\n\tline = input()\n\tq = line.split()\n\n\tfor i in range(m):\n\t\tprint(mp[int(q[i])])\n\nmain()\t \n"", ""from itertools import accumulate\n\ndef bs(ws, w):\n   i, e = -1, len(ws)-1\n   \n   while e-i > 1:\n      m = (e+i)//2\n      if w <= ws[m]:\n         e = m\n      else:\n         i = m\n   return e\n   \ninput()\nworms = list(accumulate(map(int, input().split())))\ninput()\ntofind = list(map(int, input().split()))\n\nprint(\""\\n\"".join(str(bs(worms, w)+1) for w in tofind))"", ""3\n\nfrom bisect import bisect_left\n\nn = int(input())\nA = list(map(int, input().split()))\nm = int(input())\nQ = list(map(int, input().split()))\n\nsum_A = list(A)\nfor i in range(1, n):\n    sum_A[i] += sum_A[i-1]\nfor q in Q:\n    print(bisect_left(sum_A, q) + 1)"", ""n = int(input())\na = [0]\nb = list(map(int,input().split()))\nfor i in range(len(b)):\n    for j in range(b[i]):\n        a.append(i+1)\nn = int(input())\nb = list(map(int,input().split()))\nfor i in range(len(b)):\n    print(a[b[i]])\n\n    \n"", ""# Codeforces contest 271d1 problem B\n\nimport bisect\n\nn = int(input())\nworms = [int(x) for x in input().split(' ')]\nfor i in range(n-1):\n    worms[i+1] += worms[i]\n\nm = int(input())\nv = [int(x) for x in input().split(' ')]\n[(lambda x: print(bisect.bisect_left(worms, x)+1))(x) for x in v]\n\n\n"", ""import math\nimport random\nimport itertools\nimport collections\nimport sys\nimport time\nimport fractions\nimport os\nimport functools\nimport bisect\n\n\ndef timer(f):\n    def tmp(*args, **kwargs):\n        t = time.time()\n        res = f(*args, **kwargs)\n        print(\""\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438: %f\"" % (time.time()-t))\n        return res\n    return tmp\n\ndef contains(l, elem):\n    index = bisect.bisect_left(l, elem)\n    if index < len(l):\n        return l[index] == elem\n    return False\n\n\nn = int(input())\n\nl = list(map(int, input().split(' ')))\nq = int(input())\nqs = list(map(int, input().split(' ')))\n\n\""\""\""\nn = 3\nl = [5, 3, 4]\nq = 12\nqs = [i+1 for i in range(q)]\n\""\""\""\n\""\""\""\nn = 5\nl = [random.randint(0, 10) for i in range(n)]\nq = random.randint(0, 15)\nqs = [random.randint(0, 10) for i in range(q)]\nl = sorted(l)\nprint(l)\nprint(qs)\n\""\""\""\n\n#print(l)\n#print(qs)\n\npartials = list(itertools.accumulate(l))\n#print(partials)\n\nfor i in range(q):\n    kuchka = bisect.bisect_left(partials, qs[i])\n    print(kuchka+1)"", ""n = int(input())\na = list(map(int, input().split()))\nm = int(input())\nq = list(map(int, input().split()))\n\nqq = sorted(q)\nans = dict()\n\nlimit = 0\ni = 0\nfor k in qq:\n    while not (limit < k <= limit + a[i]):\n        limit += a[i]\n        i += 1\n    ans[k] = i + 1\n\nfor k in q:\n    print(ans[k])\n"", ""from bisect import bisect_left\nn=int(input())\nS=A=list(map(int,input().split()))\nfor i in range(1,n): \n  S[i] += S[i-1]\nm=int(input())\nfor q in list(map(int,input().split())):\n  print(bisect_left(S, q)+1)"", ""from sys import stdin\n\ndef main():\n    '''\n    Name: Kevin S. Sanchez\n    Code: B. Worms\n    '''\n    inp = stdin\n    n = int(inp.readline())\n    worms = list(map(int, inp.readline().split()))\n    J = int(inp.readline())\n    Jworms = list(map(int, inp.readline().split()))\n\n    lunch = list()\n    \n    for i in range (0,len(worms)):\n        lunch += [i+1] * worms[i]\n\n    for i in Jworms:\n        print(lunch[i-1])\n\nmain()\n"", ""from bisect import *\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n - 1): a[i + 1] += a[i]\ninput()\nfor i in map(int, input().split()): print(bisect_left(a, i) + 1)"", ""from sys import stdin\nfrom bisect import bisect_left\n\nstdin.readline()\nx, l = 0, []\nfor y in map(int, stdin.readline().split()):\n    x += y\n    l.append(x)\nstdin.readline()\n\nfor y in map(int, stdin.readline().split()):\n    print(bisect_left(l, y) + 1)\n"", ""from sys import stdin\nfrom bisect import bisect_left\n\n\ndef main():\n    stdin.readline()\n    x, a = 0, []\n    for y in map(int, stdin.readline().split()):\n        x += y\n        a.append(x)\n\n    stdin.readline()\n    for x in map(int, stdin.readline().split()):\n        print(bisect_left(a, x) + 1)\n\n\nmain()\n""]","{\n  ""inputs"": [\n    ""5\n2 7 3 4 9\n3\n1 25 11\n""\n  ],\n  ""outputs"": [\n    ""1\n5\n3\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1419/B,"brute force,constructive algorithms,greedy,implementation,math","Jett is tired after destroying the town and she wants to have a rest. She likes high places, that's why for having a rest she wants to get high and she decided to craft staircases.\n\nA staircase is a squared figure that consists of square cells. Each staircase consists of an arbitrary number of stairs. If a staircase has $n$ stairs, then it is made of $n$ columns, the first column is $1$ cell high, the second column is $2$ cells high, $\ldots$, the $n$-th column if $n$ cells high. The lowest cells of all stairs must be in the same row.\n\nA staircase with $n$ stairs is called nice, if it may be covered by $n$ disjoint squares made of cells. All squares should fully consist of cells of a staircase. This is how a nice covered staircase with $7$ stairs looks like: [Image] \n\nFind out the maximal number of different nice staircases, that can be built, using no more than $x$ cells, in total. No cell can be used more than once.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ $(1 \le t \le 1000)$  — the number of test cases.\n\nThe description of each test case contains a single integer $x$ $(1 \le x \le 10^{18})$  — the number of cells for building staircases.\n\n\n-----Output-----\n\nFor each test case output a single integer  — the number of different nice staircases, that can be built, using not more than $x$ cells, in total.\n\n\n-----Example-----\nInput\n4\n1\n8\n6\n1000000000000000000\n\nOutput\n1\n2\n1\n30\n\n\n\n-----Note-----\n\nIn the first test case, it is possible to build only one staircase, that consists of $1$ stair. It's nice. That's why the answer is $1$.\n\nIn the second test case, it is possible to build two different nice staircases: one consists of $1$ stair, and another consists of $3$ stairs. This will cost $7$ cells. In this case, there is one cell left, but it is not possible to use it for building any nice staircases, that have not been built yet. That's why the answer is $2$.\n\nIn the third test case, it is possible to build only one of two nice staircases: with $1$ stair or with $3$ stairs. In the first case, there will be $5$ cells left, that may be used only to build a staircase with $2$ stairs. This staircase is not nice, and Jett only builds nice staircases. That's why in this case the answer is $1$. If Jett builds a staircase with $3$ stairs, then there are no more cells left, so the answer is $1$ again.","[""import sys\nimport random\nfrom fractions import Fraction\nfrom math import *\n \ndef input():\n    return sys.stdin.readline().strip()\n \ndef iinput():\n    return int(input())\n\ndef finput():\n    return float(input())\n\ndef tinput():\n    return input().split()\n\ndef linput():\n    return list(input())\n \ndef rinput():\n    return list(map(int, tinput()))\n\ndef fiinput():\n    return list(map(float, tinput()))\n \ndef rlinput():\n    return list(map(int, input().split()))\ndef trinput():\n    return tuple(rinput())\n\ndef srlinput():\n    return sorted(list(map(int, input().split())))\n\ndef NOYES(fl):\n    if fl:\n        print(\""NO\"")\n    else:\n        print(\""YES\"")\ndef YESNO(fl):\n    if fl:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n    \ndef main():\n    n = iinput()\n    #k = iinput() \n    #m = iinput() \n    #n = int(sys.stdin.readline().strip()) \n    #n, k = rinput()\n    #n, m = rinput()\n    #m, k = rinput()\n    #n, k, m = rinput()\n    #n, m, k = rinput()\n    #k, n, m = rinput()\n    #k, m, n = rinput() \n    #m, k, n = rinput()\n    #m, n, k = rinput()\n    #q = srlinput()\n    #q = linput()\n    s, t, res = 1, 1, 0\n    while s <= n:\n        res += 1\n        n -= s\n        t = 2 * t + 1\n        s = (t * (t + 1)) // 2\n    print(res)\n        \n    \n                \n    \n    \n    \n            \n    \n        \n    \n\nfor i in range(iinput()):\n    main()\n"", ""for _ in [0]*int(input()):\n n=int(input());o=0;c=1\n while n >= 0:\n  n-=c*(c+1)//2;o+=1;c=2*c+1\n print(o-1)"", ""tests = int(input())\nfor test in range(tests):\n    n = int(input())\n    ans = 0\n    s = 0\n    for i in range(1, 31):\n        d = 2 ** i - 1\n        r = d * (d + 1) // 2\n        if s + r <= n:\n            ans += 1\n            s += r\n        else:\n            break\n    print(ans)\n        \n"", ""t = int(input())\nfor _ in range(t):\n  x = int(input())\n  ans = 0\n  size = 1\n  temp = (size*(size+1))//2\n  while x >= temp:\n    ans += 1\n    x -= temp\n    size = 2*size + 1\n    temp = (size*(size+1))//2\n  print(ans)\n"", ""q = int(input())\nfor _ in range(q):\n    n = int(input())\n    wyn = 0\n    pot = 1\n    total = 1\n    while total <= n:\n        wyn += 1\n        pot += 1\n        total += (2**pot-1)*(2**pot)//2\n    print(wyn)"", ""for _ in range(int(input())):\n    n = int(input())\n\n    i = 1\n    have = 0\n    ans = 0\n    while have + i * (i + 1) // 2 <= n:\n        have += i * (i + 1) // 2\n        ans += 1\n        i = i * 2 + 1\n\n    print(ans)\n"", ""from bisect import bisect_left,bisect_right\na=[1]\nf=1\nwhile a[-1]<=10**18:\n  f=f*2+1\n  a.append(a[-1]+f*(f+1)//2)\nfor _ in range(int(input())):\n  n=int(input())\n  print(bisect_right(a,n))"", ""import bisect\np2 = [2 ** n - 1 for n in range(32)]\np2 = [x * (x + 1) // 2 for x in p2]\nfor i in range(1, 32):\n    p2[i] += p2[i - 1]\nfor _ in range(int(input())):\n    n = int(input())\n    print(bisect.bisect_right(p2, n) - 1)\n"", ""for _ in range(int(input())):\n\tans=0\n\tn=int(input())\n\tcp=1\n\twhile cp*(cp+1)//2<=n:\n\t\tans+=1\n\t\tn-=cp*(cp+1)//2\n\t\tcp=cp*2+1\n\tprint(ans)"", ""y=lambda:int(input())\nfor _ in range(y()):\n n=y();c=0\n while 2**(2*c+1)-2**c<=n:n-=2**(2*c+1)-2**c;c+=1\n print(c)"", ""l=[]\ni=1\nwhile(i<10**18+5):\n    l.append((i*(i+1))//2)\n    i=i*2+1\nt=int(input())\nfor you in range(t):\n    n=int(input())\n    count=0\n    sum=0\n    for i in range(len(l)):\n        sum+=l[i]\n        if(sum>n):\n            break\n    print(i)\n"", ""from bisect import bisect_right\nt = int(input())\na = []\ns = 0\nx = 2\nwhile s <= 10 ** 18:\n    s += x * (x - 1) // 2\n    a.append(s)\n    x *= 2\nfor _ in range(t):\n    print(bisect_right(a, int(input())))\n"", ""nice = [1]\nwhile nice[-1] <= 10**18:\n    nice.append((nice[-1]<<1)+1)\nfor i in range(len(nice)):\n    nice[i] = nice[i] * (nice[i] + 1) // 2\n\nt = int(input())\nfor _ in range(t):\n    x = int(input())\n    i = 0\n    num = 0\n    while x > 0 and i < len(nice):\n        if x >= nice[i]:\n            x -= nice[i]\n            num += 1\n        i += 1\n    print(num)"", ""T = int(input())\n\ndef need(n):\n    return (n*(n+1))//2\n\nfor t in range(T):\n    x = int(input())\n    ans = 0\n    nxt = 1\n    while True:\n        if x < need(nxt):\n            break\n        ans+=1\n        x -= need(nxt)\n        nxt = nxt*2+1\n    print(ans)"", ""from math import log2\nfor _ in range(int(input())):\n    x = int(input())\n    acc = 0\n    for i in range(1, 60):\n        acc += (2**i-1) * (2**(i-1))\n        if acc > x:\n            break\n    print(i-1)\n"", ""import sys\ninput = sys.stdin.readline\n\nT = int(input())\n\nfor t in range(T):\n    X = int(input())\n    answer = 0\n    pow2 = 1\n\n    while True:\n        r = 2**pow2 - 1\n        needed = r*(r+1) // 2\n        if needed <= X:\n            answer += 1\n            X -= needed\n        else:\n            break\n        pow2 += 1\n\n    print(answer)\n"", ""for _ in range(int(input())):\n    n = int(input())\n    i = 1\n    while True:\n        x = pow(2,i-1)*(pow(2,i)-1)\n        if n < x:\n            break\n        n -= x\n        i += 1\n    print(i-1)"", ""gans = []\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    cur = 1\n    while n >= cur * (cur + 1) // 2:\n        n -= cur * (cur + 1) // 2\n        ans += 1\n        cur = cur * 2 + 1\n        #print(cur, n)\n    gans.append(ans)\nprint('\\n'.join(map(str, gans)))\n"", ""arr=[]\ns=1\ni=1\nwhile s<((10**18)+1):\n    temp=(s*(s+1))//2\n    arr.append(temp)\n    s+=(2**i)\n    i+=1\nt=int(input())\nfor i in range(t):\n    x=int(input())\n    ans=0\n    j=0\n    while x>0:\n        if arr[j]<=x:\n            x-=arr[j]\n            ans+=1\n        else:\n            x=0\n        j+=1\n    print(ans)"", ""l = [1]\nfor i in range(70):\n    l.append(2*l[-1] + 1)\n# print(l[-1])\nl = [(ll * (ll+1))//2 for ll in l]\nlll = [l[0]]\nfor i in range(1, 70):\n    lll.append(lll[-1] + l[i])\nl = lll\n\nfor t in range(int(input())):\n    n = int(input())\n    for i in range(70):\n        if l[i] > n:\n            print(i)\n            break"", ""t = int(input())\n\nj = 0\nr  = 0\nR = []\nfor i in range(10**5):\n    j = 2*j+1\n    s = j*(j+1)//2\n    r += s\n    R.append(r)\n    if r > 10**18:\n        break\n\nimport bisect\n\nfor _ in range(t):\n    x = int(input())\n    i = bisect.bisect_right(R, x)\n    print(i)\n"", ""A = [1]\ns = 1\nfor i in range(32):\n    s *= 4\n    A.append(A[-1] * 2 + s)\nS = [0] * 33\nfor i in range(32):\n    S[i+1] = S[i] + A[i]\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    for i in range(33):\n        if S[i] > N:\n            print(i - 1)\n            break\n\n"", ""import sys\nii = lambda: sys.stdin.readline().strip()\nidata = lambda: [int(x) for x in ii().split()]\n\ndef solve():\n    ans = 0\n    cnt = 1\n    s = 1\n    n = int(ii())\n    while s <= n:\n        cnt = 2 * cnt + 1\n        ans += 1\n        n -= s\n        s = (cnt * (cnt + 1)) // 2\n    print(ans)\n    return\n\nfor t in range(int(ii())):\n    solve()\n""]","{\n  ""inputs"": [\n    ""4\n1\n8\n6\n1000000000000000000\n""\n  ],\n  ""outputs"": [\n    ""1\n2\n1\n30\n""\n  ]\n}"
https://codeforces.com/problemset/problem/717/C,"implementation,sortings","Harry Water, Ronaldo, Her-my-oh-knee and their friends have started a new school year at their MDCS School of Speechcraft and Misery. At the time, they are very happy to have seen each other after a long time. The sun is shining, birds are singing, flowers are blooming, and their Potions class teacher, professor Snipe is sulky as usual. Due to his angst fueled by disappointment in his own life, he has given them a lot of homework in Potions class. \n\nEach of the n students has been assigned a single task. Some students do certain tasks faster than others. Thus, they want to redistribute the tasks so that each student still does exactly one task, and that all tasks are finished. Each student has their own laziness level, and each task has its own difficulty level. Professor Snipe is trying hard to improve their work ethics, so each student’s laziness level is equal to their task’s difficulty level. Both sets of values are given by the sequence a, where a_{i} represents both the laziness level of the i-th student and the difficulty of his task. \n\nThe time a student needs to finish a task is equal to the product of their laziness level and the task’s difficulty. They are wondering, what is the minimum possible total time they must spend to finish all tasks if they distribute them in the optimal way. Each person should receive one task and each task should be given to one person. Print the answer modulo 10 007.\n\n\n-----Input-----\n\nThe first line of input contains integer n (1 ≤ n ≤ 100 000) — the number of tasks. The next n lines contain exactly one integer number a_{i} (1 ≤ a_{i} ≤ 100 000) — both the difficulty of the initial task and the laziness of the i-th students.\n\n\n-----Output-----\n\nPrint the minimum total time to finish all tasks modulo 10 007.\n\n\n-----Example-----\nInput\n2\n1\n3\n\nOutput\n6\n\n\n\n-----Note-----\n\nIn the first sample, if the students switch their tasks, they will be able to finish them in 3 + 3 = 6 time units.","[""n=int(input())\na=sorted(int(input()) for _ in range(n))\nprint(sum(a[i]*a[-i-1] for i in range(n))%10007)"", ""n = int(input())\nA = [0] * n\nfor i in range(n):\n    per = int(input())\n    A[i] = per\nA.sort()\nanswer = 0\nfor i in range(n):\n    answer  = (answer + A[i] * A[n - i - 1]) % 10007\nprint(answer)"", ""n = int(input())\nai = []\nnum = 0\nfor i in range(n):\n    ai += [int(input())]\nai.sort()\nfor i in range(n//2):\n    num += ai[n-i-1] * ai[i] * 2\nif n % 2:\n    num += ai[n//2] ** 2\nprint(num % 10007)\n"", ""n = int(input())\na =[]\nb =[]\nfor i in range(n):\n\ta.append(int(input()))\n\tb.append(a[len(a)-1])\na.sort()\nb.sort()\nb.reverse()\nsum = 0\nfor i in range(n):\n\tsum+=(a[i]*b[i])\n\tsum%=10007\nprint(sum)"", ""n = int(input())\na = [int(input()) for i in range(n)]\na.sort()\nprint(sum(map(lambda x,y: x*y, a, reversed(a))) % 10007)\n"", ""#import sys\n#sys.stdin=open('input.txt')\n#a=map(int,input().split())\nn=int(input())\nl=[]\nfor i in range(n):\n\tl.append(int(input()))\nd=l[::]\nl.sort()\nd.sort(reverse=True)\nprint(sum((l[x]*d[x] for x in range(n)))%10007)\n#print('right:',input())\n"", ""n = int(input())\nsp = []\nfor i in range(n):\n    sp.append(int(input()))\nsp.sort()\ns = 0\nfor i in range(n):\n    s = (s + sp[i] * sp[-i-1]) % 10007\nprint(s)\n"", ""I=input\nn=int(I())\nR=list(range(n))\na=sorted(int(I())for _ in R)\nk=0\nfor i in R:k=(k+a[i]*a[n-i-1])%10007\nprint(k)"", ""n=int(input())\nlist=[]\nsumm=int(0)\nfor i in range(n):\n    a=int(input())\n    list.append(a)\nrev=list[::]\nlist.sort()\nrev.sort(reverse=True)\nfor x in range(n):\n    summ=(summ+((list[x]*rev[x])%10007)%10007)%10007\nprint(summ)"", ""n = int(input())\na = sorted([int(input()) for i in range(n)])\n\ntime = 0\nfor i in range(n):\n    time += a[i] * a[n - 1 - i]\n    \nprint(time % 10007)\n"", ""n = int(input())\nC = []\nA = [int(input()) for i in range(n)]\nA.sort()\nB = A\nfor x in range(n):\n    C.append(A[x]*B[n-x-1])\na = sum(C)\nprint(a%10007)\n"", ""n = int(input())\ndt = sorted([int(input()) for i in range(n)])\n\nans = 0\nfor i in range(n):\n\tans += dt[i] * dt[-i-1]\nprint(ans%10007)"", ""#!/usr/bin/env\tpython\n#-*-coding:utf-8 -*-\nn=int(input())\nA=sorted(int(input())for _ in range(n))\nB=10007\ns=0\nfor i in range(n):s=(A[i]*A[-1-i]+s)%B\nprint(s)\n"", ""n = int(input())\n\nnum = [int(input()) for _ in range(n)]\nnum.sort()\n\nbegin = 0\nend = n-1\nans = 0\n\nwhile begin<=end:\n    if begin == end:\n        ans += (num[begin]*num[end])\n        ans %= 10007\n    else:\n        ans += 2*num[begin]*num[end]\n        ans %= 10007\n    begin+=1\n    end-=1\n        \nprint(ans)"", ""n = int(input())\n\nnum = [int(input()) for _ in range(n)]\nnum.sort()\n\nbegin = 0\nend = n-1\nans = 0\n\nwhile begin<=end:\n    if begin == end:\n        ans += (num[begin]*num[end])\n        ans %= 10007\n    else:\n        ans += 2*num[begin]*num[end]\n        ans %= 10007\n    begin+=1\n    end-=1\n        \nprint(ans)"", ""n = int(input())\nnum = sorted([int(input()) for _ in range(n)])\nprint(sum([x*y for x,y in zip(num, reversed(num))])%10007)"", ""'''\na=input()\nstring=input()\nn=int(input())\nlist1=[]\nscore=0\n\nfor i in range(n):\n    list1.append((input()).split())\n\n\nmaX=int(input())\n\nlist2=[0]*len(string)\nvar = 0\nwhile n>0:\n    times = 0\n    for i in range (len(string)):\n        if string[i:i+len(list1[var][0])] == list1[var][0] and not maX in list2[i:i+len(list1[var][0])]:\n            score += int(list1[var][1])\n            for j in range(i, i+len(list1[var][0])):\n                list2[j] += 1\n            if i+len(list1[var][0]) == len(string):\n                break\n            if times == maX:\n                break\n    var += 1\n    n -= 1\n\nprint(score)\n'''\n\nfinal=0\nn= int(input())\nlist1=[]\n\nfor i in range(n):\n    list1.append(int(input()))\nlist1.sort()\nfor i in range(n):\n    final += list1[i] * list1[n-i-1]\nprint(final%10007)\n\n\n    \n"", ""\n\nn = int(input())\n\na = []\n\nfor i in range(n): \n    a.append(int(input()))\n\na.sort()\n\nb = [];\n\nfor i in range(int((n+1)/2)):\n    b.append(a[i]*a[n-1-i])\n\nres = sum(b)*2\n\nif n%2 == 1:\n    res-=b[len(b)-1]\n\nprint(res % 10007)\n"", ""n=int(input())\na=sorted(int(input()) for _ in range(n))\nprint(sum(a[i]*a[-i-1] for i in range(n))%10007)"", ""n=int(input())\nl=[]\nfor i in range(n):\n    l.append(int(input()))\nl.sort()\nr=l[:];\nr.reverse()\nres=0;\nfor i in range(n):\n    res=(res+l[i]*r[i])%10007\nprint(res)"", ""n = int(input())\na=[]\nfor i in range(n):\n    a += [int(input())]\na.sort()\nans = 0\nfor i in range(n):\n    ans += a[i] * a[n-i-1]\nprint(ans % 10007)"", ""laziness = []\nfor i in range(int(input())):\n    laziness.append(int(input()))\n\nlaziness.sort()\nj = len(laziness) - 1\nsum = 0\nfor numb in laziness:\n    sum += numb * laziness[j]\n    j -= 1\n\nprint(sum % 10007)\n"", ""num= int(input())\nwork=[]\nfor i in range(num):\n    work.append(int(input()))\nlaziness= work.copy()\ntime= 0\n\nlaziness.sort()\nwork.sort()\nwork=work[::-1]\n\nfor i in range(len(work)):\n    time += work[i] * laziness[i]\n\nprint(time % (10007))\n\n""]","{\n  ""inputs"": [\n    ""2\n1\n3\n""\n  ],\n  ""outputs"": [\n    ""6\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1227/B,constructive algorithms,"Permutation $p$ is a sequence of integers $p=[p_1, p_2, \dots, p_n]$, consisting of $n$ distinct (unique) positive integers between $1$ and $n$, inclusive. For example, the following sequences are permutations: $[3, 4, 1, 2]$, $[1]$, $[1, 2]$. The following sequences are not permutations: $[0]$, $[1, 2, 1]$, $[2, 3]$, $[0, 1, 2]$.\n\nThe important key is in the locked box that you need to open. To open the box you need to enter secret code. Secret code is a permutation $p$ of length $n$. \n\nYou don't know this permutation, you only know the array $q$ of prefix maximums of this permutation. Formally:  $q_1=p_1$,  $q_2=\max(p_1, p_2)$,  $q_3=\max(p_1, p_2,p_3)$,  ...  $q_n=\max(p_1, p_2,\dots,p_n)$. \n\nYou want to construct any possible suitable permutation (i.e. any such permutation, that calculated $q$ for this permutation is equal to the given array).\n\n\n-----Input-----\n\nThe first line contains integer number $t$ ($1 \le t \le 10^4$) — the number of test cases in the input. Then $t$ test cases follow.\n\nThe first line of a test case contains one integer $n$ $(1 \le n \le 10^{5})$ — the number of elements in the secret code permutation $p$.\n\nThe second line of a test case contains $n$ integers $q_1, q_2, \dots, q_n$ $(1 \le q_i \le n)$ — elements of the array $q$ for secret permutation. It is guaranteed that $q_i \le q_{i+1}$ for all $i$ ($1 \le i < n$).\n\nThe sum of all values $n$ over all the test cases in the input doesn't exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, print:  If it's impossible to find such a permutation $p$, print ""-1"" (without quotes).  Otherwise, print $n$ distinct integers $p_1, p_2, \dots, p_n$ ($1 \le p_i \le n$). If there are multiple possible answers, you can print any of them. \n\n\n-----Example-----\nInput\n4\n5\n1 3 4 5 5\n4\n1 1 3 4\n2\n2 2\n1\n1\n\nOutput\n1 3 4 5 2 \n-1\n2 1 \n1 \n\n\n\n-----Note-----\n\nIn the first test case of the example answer $[1,3,4,5,2]$ is the only possible answer:  $q_{1} = p_{1} = 1$;  $q_{2} = \max(p_{1}, p_{2}) = 3$;  $q_{3} = \max(p_{1}, p_{2}, p_{3}) = 4$;  $q_{4} = \max(p_{1}, p_{2}, p_{3}, p_{4}) = 5$;  $q_{5} = \max(p_{1}, p_{2}, p_{3}, p_{4}, p_{5}) = 5$. \n\nIt can be proved that there are no answers for the second test case of the example.","[""t = int(input())\nfor faw in range(t):\n    n = int(input())\n    a = [0] + list(map(int,input().split()))\n    nun = []\n    ans = []\n    f = True\n    for i in range(1, n + 1):\n        if a[i] == a[i-1]:\n            if len(nun) == 0:\n                f = False\n                break\n            else:\n                ans.append(nun.pop())\n        else:\n            ans.append(a[i])\n            for i in range(a[i - 1] + 1, a[i]):\n                nun.append(i)\n    if f:\n        print(*ans)\n    else:\n        print(-1)\n"", ""t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=[int(x) for x in input().split()]\n    b=[0] * n\n    m=0\n    c=set(range(1, n+1))\n    for i in range(n):\n        if a[i] > m:\n            b[i] = a[i]\n            m = a[i]\n            c.discard(a[i])\n    c=sorted(c)\n    j=0\n    for i in range(n):\n        if b[i] == 0:\n            b[i] = c[j]\n            j+=1\n            if b[i] > a[i]:\n                print(-1)\n                break\n    else:\n        print(*b)\n"", ""t = int(input())\nfor z in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ret = [0 for i in range(n)]\n    was = set()\n    can = set([i for i in range(1, n + 1)])\n    for i in range(n):\n        x = arr[i]\n        if not x in was:\n            ret[i] = x\n            was.add(x)\n    left = sorted(list(can - was), reverse=True)\n    for i in range(n):\n        if not left:\n            break\n        x = left[-1]\n        if not ret[i]:\n            ret[i] = x\n            left.pop()\n    mx = ret[0]\n    flag = True\n    for i in range(n):\n        mx = max(mx, ret[i])\n        if mx != arr[i]:\n            flag = False\n            break\n    if flag:\n        print(*ret)\n    else:\n        print(-1)\n"", ""n = int(input())\nfor i in range(n):\n    k = int(input())\n    used = [0]*k\n    a = list(map(int, input().split()))\n    p = 0\n    ans = [0]*k\n    for i in range(k):\n        if a[i] != p:\n            ans[i] = a[i]\n            used[a[i]-1] = 1\n        p = a[i]\n    t = 0\n    flag = 0\n    for i in range(k):\n        if ans[i] == 0:\n            while used[t] == 1 and t < a[i]:\n                t +=1\n            if t == a[i]:\n                flag = 1\n                break\n            else:\n                used[t] = 1\n                ans[i] = t+1\n    if flag == 1:\n        print(-1)\n    else:\n        print(*ans)\n"", ""t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * (n + 2)\n    c = 1\n    d = a[0]\n    ans = [a[0]]\n    b[a[0]] = 1\n    for i in range(1, len(a)):\n        if a[i] == a[i - 1]:\n            while b[c] != 0:\n                c += 1\n            if c > a[i]:\n                ans = -1\n                break\n            else:\n                b[c] = 1\n                ans.append(c)\n        else:\n            ans.append(a[i])\n            b[a[i]] = 1\n    if ans == -1:\n        print(ans)\n    else:\n        print(*ans)\n    \n    \n"", ""t = int(input())\nfor i in range(t):\n\tn = int(input())\n\ta = [int(ii) for ii in input().split()]\n\tb = [0 for ii in range(n)]\n\twas = [0 for ii in range(n + 1)]\n\tminimum = 1\n\tfor j in range(n):\n\t\tif j == 0 or a[j] != a[j - 1]:\n\t\t\twas[a[j]] = 1\n\t\t\tb[j] = a[j]\n\t\telse:\n\t\t\twhile was[minimum] == 1:\n\t\t\t\tminimum += 1\n\t\t\tif minimum > a[j]:\n\t\t\t\tminimum = -1\n\t\t\t\tbreak\n\t\t\tb[j] = minimum\n\t\t\twas[minimum] = 1\n\tif minimum == -1:\n\t\tprint (-1)\n\telse:\n\t\tfor j in b:\n\t\t\tprint(j, end = ' ')\n\t\tprint ('')"", ""a =  int(input())\nAns = []\nfor i in range(a):\n    B = []\n    x = int(input())\n    A = list(map(int, input().split()))\n    C = []\n    for j in range(1, len(A) + 1):\n        C.append([j, 0])\n    k = 1\n    n = 0\n    for j in range(len(A)):\n        if A[j] >k:\n            B.append(A[j])\n            k = A[j]\n            C[A[j] - 1][1] = 1\n        else:\n            while C[n][1] == 1:\n                n += 1\n            C[n][1] = 1\n            B.append(n + 1)\n    b0 = B[0]\n    Tr = True\n    for j in range(len(B)):\n        b0 = max(b0, B[j])\n        if A[j] != b0:\n            Tr = False\n    if Tr:\n        Ans.append(B)\n    else:\n        Ans.append([-1])\n    #Ans.append(B[-1])\nfor b in Ans:\n    print(*b)\n"", ""t = int(input())\nfor request in range(t):\n    n = int(input())\n    result, initial = list(map(int, input().split())), []\n    box, flag = [], True\n    initial.append(result[0])\n    for d in range(1, result[0]):\n                box.append(d)\n    for i in range(1, n):\n        if result[i - 1] < result[i]:\n            initial.append(result[i])\n            for d in range(result[i - 1] + 1, result[i]):\n                box.append(d)\n        else:\n            try:\n                initial.append(box.pop())\n            except:\n                flag = False\n                break\n    if flag:\n        print(*initial)\n    else:\n        print(-1)"", ""t = int(input())\nfor tt in range(t):\n    n = int(input())\n    ent = list(map(int,input().split()))\n    used = [0]*(n+1)\n    mnex = 1\n    mx = 0\n    ans = []\n    ansex = True\n    for i in range(n):\n        if ent[i] > mx:\n            mx = ent[i]\n            if used[mx] == 0:\n                ans.append(mx)\n                used[mx] = 1\n            else:\n                ansex = False\n                break\n        else:\n            while used[mnex] == 1:\n                mnex += 1\n            if mnex <= mx:\n                used[mnex]=1\n                ans.append(mnex)\n                mnex+=1\n            else:\n                ansex = False\n                break\n    if ansex:\n        print(*ans)\n    else:\n        print(-1)\n                \n\n\n\n\n\n"", ""t=int(input())\nfor i in range(t):\n    n=int(input())\n    q=list(map(int,input().split()))\n    pr=[0]*n\n    ans=[0]*n\n    ans[0]=q[0]\n    sh=0\n    s=set([q[0]])\n    for i in range(1,n):\n        if q[i]==q[i-1]:\n            pr[i]=pr[i-1]\n            sh+=1\n        else:\n            pr[i]=i\n            ans[i]=q[i]\n            s.add(q[i])\n    steak=[]\n    for i in range(n,0,-1):\n        if i not in s:\n            steak.append(i)\n    tr=True\n    for i in range(n):\n        if ans[i]==0:\n            x=steak.pop()\n            if x<q[pr[i]]:\n                ans[i]=x\n            else:\n                tr=False\n                break\n    if tr:\n        print(*ans)\n    else:\n        print(-1)\n"", ""a = int(input())\nfor i in range(a):\n    b = int(input())\n    l = list(map(int, input().split()))\n    k = []\n    t = [i for i in range(b + 1)]\n    k.append(l[0])\n    last = k[0]\n    j = 0\n    t[last] = 0\n    for i in l[1:]:\n        if i != last:\n            last = i\n            k.append(last)\n            t[last] = 0\n        else:\n            while t[j] == 0:\n                j += 1\n            k.append(t[j])\n            j += 1\n    ch = [k[0]]\n    for i in k[1:]:\n        ch.append(max(ch[-1], i))\n    if l != ch:\n        print(-1)\n    else:\n        print(*k)"", ""t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    used = []\n    for i in range(n):\n        used.append(False)\n    p = [str(a[0])]\n    used[a[0] - 1] = True\n    ans = 1\n    now = 0\n    for i in range(1, n):\n        while now < n and used[now]:\n            now += 1\n        if a[i] > a[i - 1]:\n            p.append(str(a[i]))\n            if used[a[i] - 1]:\n                ans = 0\n                break\n            used[a[i] - 1] = True\n        else:\n            if now + 1 > a[i] or used[now]:\n                ans = 0\n                break\n            used[now] = True\n            p.append(str(now + 1))\n    if ans:\n        print(\"" \"".join(p))\n    else:\n        print(-1)"", ""from collections import deque\nfor i in range(int(input())):\n    n = int(input())\n    h = deque([i+1 for i in range(n)])\n    used = [False]*n\n    ans = [0]*n\n    c = list(map(int,input().split()))\n    ans[0] = c[0]\n    used[c[0]-1] = True\n    f = True\n    for i in range(n):\n        if i+1>c[i]:\n            f = False\n    if not f:\n        print(-1)\n        continue\n    for i in range(n-1):\n        if c[i+1]!=c[i]:\n            ans[i+1] = c[i+1]\n        else:\n            x = h.popleft()\n            while used[x-1]:\n                x = h.popleft()\n            ans[i+1] = x\n        used[ans[i+1] - 1] = True\n    print(*ans)"", ""t=int(input())\nfor magic in range(t):\n    n=int(input())\n    res=[0 for j in range(n+1)]\n    have=[1 for sth in range(n+1)]\n    br_p=0\n    given=[0]+list(map(int,input().split()))\n    for i in range(1,n+1):\n        if given[i-1]<given[i]:\n            res[i]=given[i]\n            have[given[i]]=0\n        elif given[i-1]>given[i]:\n            br_p=1\n            break\n    if br_p:\n        print(-1)\n    else:\n        ind_last=1\n        for i in range(1,n+1):\n            if res[i]==0:\n                while have[ind_last]==0:\n                    ind_last+=1\n                res[i]=ind_last\n                ind_last+=1\n        for i in range(1,n+1):\n            if given[i]<res[i]:\n                br_p=1\n                break\n        if br_p:\n            print(-1)\n        else:\n            print(*res[1:])\n\n\n\n"", ""t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [False] * n\n    b[a[0] - 1] = True\n    k = 0\n    res = [a[0]]\n    flag = True\n    for j in range(1, n):\n        if a[j] == a[j - 1]:\n            while k < n and b[k]:\n                k += 1\n            if k + 1 > a[j]:\n                flag = False\n                break\n            res.append(k + 1)\n            b[k] = True\n        else:\n            b[a[j] - 1] = True\n            res.append(a[j])\n    if flag:\n        print(' '.join(map(str, res)))\n    else:\n        print(-1)"", ""t=int(input())\nfor g in range(t):\n  n=int(input())\n  a=list(map(int,input().split()))\n  b=list(False for i in range(n))\n  flag=False\n  count=0\n  res=list(range(n))\n  for i in range(n):\n    if i==0:\n      res[i]=a[i]\n      b[a[i]-1]=True\n    elif a[i]!=a[i-1]:\n      res[i]=a[i]\n      b[a[i]-1]=True\n    else:\n      for j in range(count,n):\n        if j+1>a[i]:\n          flag=True\n          count=j\n          break\n        else:\n          if not b[j]:\n            res[i]=j+1\n            b[j]=True\n            count=j\n            break\n  if flag:\n    print(-1)\n  else:\n    for i in range(n):\n      print(res[i],end=' ')\n    print()\n"", ""for __ in range(int(input())):\n    n = int(input())\n    ar1 = list(map(int, input().split()))\n    ar = ar1.copy()\n    lol = set()\n    for j in range(1, n + 1):\n        lol.add(j)\n    lol.discard(ar[0])\n    for i in range(1, n):\n        if ar1[i] > ar1[i - 1]:\n            lol.discard(ar1[i])\n        else:\n            ar[i] = 0\n    kek = list(lol)\n    kek.sort()\n    num = 0\n    flag = 0\n    for j in range(n):\n        if ar[j] == 0:\n            ar[j] = kek[num]\n            num += 1\n        if ar[j] > ar1[j]:\n            flag = 1\n    if flag == 1:\n        print(-1)\n    else:\n        print(*ar)\n"", ""for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = [0] * n\n    used = [False] * (n + 1)\n    ans[0] = a[0]\n    used[a[0]] = True\n    lst = 1\n    ok = True\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            ans[i] = a[i]\n            used[a[i]] = True\n        elif a[i] < a[i - 1]:\n            print(-1)\n            ok = False\n            break\n        else:\n            while used[lst]:\n                lst += 1\n            #print(lst)\n            if a[i] < lst:\n                print(-1)\n                ok = False\n                break\n            else:\n                ans[i] = lst\n                lst += 1\n                used[ans[i]] = True\n    if ok:\n        for i in range(n):\n            print(ans[i], end=' ')\n        print()"", ""m = int(input())\nfor j in range(m):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    used = [0] * (n + 1)\n    t = 1\n    b.append(a[0])\n    f = True\n    used[a[0]] = 1\n    for k in range(1, n):\n        if a[k] == a[k - 1]:\n            while used[t] == 1:\n                t += 1                    \n            if t < a[k - 1]:\n                b.append(t)\n                used[t] = 1\n                t += 1\n            else:\n                f = False\n                break\n        elif a[k] > a[k - 1]:\n            b.append(a[k])\n            used[a[k]] = 1\n        else:\n            f = False\n            break\n    if f:\n        print(*b)\n    else:\n        print(-1)\n            \n"", ""t = int(input())\nfor i in range(t):\n    n = int(input())\n    q = list(map(int, input().split()))\n    used = set()\n    ans = []\n    used.add(q[0])\n    ans.append(q[0])\n    cnt = 1\n    flag = False\n    for i in range(1, n):\n        if q[i] == q[i - 1]:\n            while cnt in used:\n                cnt += 1\n            used.add(cnt)\n            if q[i] > cnt:\n                ans.append(cnt)\n            else:\n                flag = True\n                break\n        else:\n            used.add(q[i])\n            ans.append(q[i])\n    if flag:\n        print(-1)\n    else:\n        print(*ans)"", ""for i in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    q=-1\n    t=0\n    r=[]\n    for i in range(n):\n        if a[i]<q or a[i]<i+1:\n            t=1\n            break\n        else:\n            q=a[i]\n    if t==1:\n        print(-1)\n    else:\n        q=-1\n        w=[True]*n\n        z=0\n        for i in range(n):\n            if a[i]>q:\n                r.append(a[i])\n                w[a[i]-1]=False\n                q=a[i]\n            else:\n                while w[z]==False:\n                    z+=1\n                r.append(z+1)\n                z+=1\n        print(*r)\n"", ""t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    used = [0for i in range(n + 2)]\n    ans = []\n    minimum = 1\n    ans.append(a[0])\n    used[a[0]] = 1\n    if a[0] == 1:\n        minimum = 2\n    for i in range(1, len(a)):\n        if a[i] != a[i - 1]:\n            ans.append(a[i])\n            used[a[i]] = 1\n            if a[i] == minimum:\n                minimum += 1\n        else:\n            ans.append(minimum)\n            used[minimum] = 1\n            while used[minimum] == 1:\n                minimum += 1\n    maximum = 0\n    flag = True\n    for i in range(len(ans)):\n        maximum = max(maximum, ans[i])\n        if a[i] != maximum:\n            flag = False\n    if flag and a[-1] == n:\n        print(\"" \"".join(map(str, ans)))\n    else:\n        print(-1)"", ""t = int(input())\n\nfor i in range(t):\n    n = int(input())\n    q = list(map(int, input().split()))\n    used = {q[0]: True}\n    seq = [q[0]]\n\n    ks = 1\n\n    for j in range(1, n):\n        if q[j] == q[j - 1]:\n            for k in range(ks, q[j]):\n                if used.get(k) is None:\n                    seq.append(k)\n                    used[k] = True\n                    ks = k + 1\n                    break\n            else:\n                print(-1)\n                break\n        else:\n            used[q[j]] = True\n            seq.append(q[j])\n    else:\n        print(*seq)"", ""w = int(input())\nfor q in range(w):\n    fr = 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.append(a[0] - 1)\n    e = [1] * (n+1)\n    ei = 1\n    r = [0] * n\n    for i in range(n):\n        if a[i] == a[i-1]:\n            while e[ei] == 0 and ei < n:\n                ei += 1\n            if ei > a[i]:\n                print(-1)\n                fr = 0\n                break\n            r[i] = ei\n            e[ei] = 0\n        else:\n            if e[a[i]] == 1:\n                e[a[i]] = 0\n                r[i] = a[i]\n            else:\n                print(-1)\n                fr = 0\n                break\n    if fr:\n        print(*r)\n\n\n\n\n\n\n""]","{\n  ""inputs"": [\n    ""4\n5\n1 3 4 5 5\n4\n1 1 3 4\n2\n2 2\n1\n1\n""\n  ],\n  ""outputs"": [\n    ""1 3 4 5 2 \n-1\n2 1 \n1 \n""\n  ]\n}"
https://codeforces.com/problemset/problem/1221/C,"binary search,math","You may have already known that a standard ICPC team consists of exactly three members. The perfect team however has more restrictions. A student can have some specialization: coder or mathematician. She/he can have no specialization, but can't have both at the same time.\n\nSo the team is considered perfect if it includes at least one coder, at least one mathematician and it consists of exactly three members.\n\nYou are a coach at a very large university and you know that $c$ of your students are coders, $m$ are mathematicians and $x$ have no specialization.\n\nWhat is the maximum number of full perfect teams you can distribute them into? \n\nNote that some students can be left without a team and each student can be a part of no more than one team.\n\nYou are also asked to answer $q$ independent queries.\n\n\n-----Input-----\n\nThe first line contains a single integer $q$ ($1 \le q \le 10^4$) — the number of queries. \n\nEach of the next $q$ lines contains three integers $c$, $m$ and $x$ ($0 \le c, m, x \le 10^8$) — the number of coders, mathematicians and students without any specialization in the university, respectively.\n\nNote that the no student is both coder and mathematician at the same time. \n\n\n-----Output-----\n\nPrint $q$ integers — the $i$-th of them should be the answer to the $i$ query in the order they are given in the input. The answer is the maximum number of full perfect teams you can distribute your students into. \n\n\n-----Example-----\nInput\n6\n1 1 1\n3 6 0\n0 0 0\n0 1 1\n10 1 10\n4 4 1\n\nOutput\n1\n3\n0\n0\n1\n3\n\n\n\n-----Note-----\n\nIn the first example here are how teams are formed:  the only team of 1 coder, 1 mathematician and 1 without specialization;  all three teams consist of 1 coder and 2 mathematicians;  no teams can be formed;  no teams can be formed;  one team consists of 1 coder, 1 mathematician and 1 without specialization, the rest aren't able to form any team;  one team consists of 1 coder, 1 mathematician and 1 without specialization, one consists of 2 coders and 1 mathematician and one consists of 1 coder and 2 mathematicians.","[""q = int(input())\nfor _ in range(q):\n\tc, m, x = list(map(int, input().split()))\n\tprint(min([c, m, (c + m + x) // 3]))"", ""q = int(input())\nfor i in range(q):\n    c, m, x = map(int, input().split())\n    ans = min(c, m, x)\n    c -= ans\n    m -= ans\n    x -= ans\n    ans += min(c, m, (c + m) // 3)\n    print(ans)"", ""for i in range(int(input())):\n    c,m,x=map(int,input().split())\n    print(min((c+m+x)//3,c,m))"", ""t = int(input())\nfor i in range(t):\n  c,m,x = map(int,input().split())\n  ans1 = min(c,m)\n  ans2 = (c+m+x)//3\n  print(min(ans1,ans2))"", ""for _ in range(int(input())):\n\tc, m, x = map(int, input().split())\n\tprint(min((c + m + x) // 3, min(c, m)))"", ""q = int(input())\ninfo=[[int(i) for i in input().split()] for k in range(q)]\n\nfor inf in info:\n    c,m,x = inf\n    print(min([c,m,int((c+m+x)/3)]))"", ""Q = int(input())\nfor q in range(Q):\n    c, m, x = tuple(map(int, input().split()))\n    ans = min(c, m)\n    #m = ans\n    c -= ans\n    m -= ans\n\n    if c + m + x >= ans:\n        print(ans)\n        continue\n\n    delta = (ans - (c + m + x)) * 2\n    ans = c + m + x\n\n    ans += min(delta // 3, delta // 2)\n    print(ans)\n"", ""t=int(input())\nwhile t:\n    t=t-1\n    c,m,x=[int(x) for x in input().split(\"" \"")]\n    y=min(c,m)\n    c=c-y\n    m=m-y\n    #print(\""y\"",y)\n    if y<=c+m+x:\n        print(y)\n    else:\n        print((c+m+x+y*2)//3)"", ""n = int(input())\nwhile n:\n    a,b,c=map(int,input().split())\n    if a<b:\n        a,b=b,a\n    print(min(b,(a+b+c)//3))\n    n-=1"", ""n=int(input())\nwhile n:\n    n-=1\n    l=list(map(int,input().split()))\n    if sum(l)//3 < min(l[0],l[1]):\n        print(sum(l)//3)\n    else:\n        print(min(l[0],l[1]))"", ""for q in range(int(input())):\n      c,m,x=list(map(int,input().split()))\n      a=min(c,m,(c+m+x)//3)\n      print(a)\n"", ""Q = int(input())\n\ndef solve():\n    [c,m,x] = list(map(int,input().split()))\n\n    def canMakeK(k):\n        if c < k or m < k:\n            return False\n        return ((c-k) + (m-k) + x) >= k\n\n    ans = 0\n    jump = max(c,m,x)\n    while jump > 0:\n        while canMakeK(ans+jump):\n            ans += jump\n        jump //= 2\n\n    return ans\n\nfor _ in range(Q):\n    print(solve())\n"", ""from sys import stdin\nfor i in range(int(stdin.readline())):\n    c, m, x = list(map(int, stdin.readline().split()))\n    def ok(nteam):\n        return c >= nteam and m >= nteam and x + c + m >= 3 * nteam\n    l = 0\n    r = max(c, m, x) + 1\n    while r - l > 1:\n        mid = (r + l) // 2\n        if ok(mid):\n            l = mid\n        else:\n            r = mid\n    print(l)\n"", ""import sys\ninput = sys.stdin.readline\n\ndef getInt(): return int(input())\ndef getVars(): return list(map(int, input().split()))\ndef getList(): return list(map(int, input().split()))\ndef getStr(): return input().strip()\n## -------------------------------\n\ndef addDictList(d, key, val):\n    if key not in d: d[key] = []\n    d[key].append(val)\n\ndef addDictInt(d, key, val):\n    if key not in d: d[key] = 0\n    d[key] = val\n\n\ndef addDictCount(d, key):\n    if key not in d: d[key] = 0\n    d[key] += 1\n\ndef addDictSum(d, key, val):\n    if key not in d: d[key] = 0\n    d[key] += val\n\n## -------------------------------\n\nt=getInt()\nfor _ in range(t):\n    c, m, x = getVars()\n    res = min(c, m)\n    res = min(res, (c+m+x)//3)\n    print(res)\n\n"", ""q = int(input())\nfor _ in range(q):\n    c, m, x = list(map(int, input().split()))\n    s = c + m + x\n    i = min(c, m)\n    if s//3 <= i:\n        print(s//3)\n    else:\n        print(min(i, s-i*2))\n"", ""def solve():\n    c, m, x = list(map(int, input().split()))\n    u = min(c, m)\n    y = c - u + m - u + x\n    if y >= u:\n        print(u)\n        return\n    print(y + (u - y) * 2 // 3)\n\nt = int(input())\n\nfor _ in range(t):\n    solve()\n"", ""for i in range(int(input())):\n    c,m,x=map(int,input().split())\n    print(min((c+m+x)//3,min(c,m)))"", ""for _ in range(int(input())):\n    c,m,s = [int(i) for i in input().split()]\n    a,b = min(c,m),max(c,m)\n    if(s>=a):\n        print(a)\n    else:\n        a = a-s\n        b = b-s\n        temp = (a+b)//3\n        print(s + min(temp,a))"", ""n = int(input())\nfor i in range(n):\n\tc, m, x = list(map(int, input().split()))\n\twynik = 0\n\twynik += min(c, m,x)\n\thuj = min(c,m,x)\n\tc -= huj\n\tm -= huj\n\tx -= huj\n\tif x > 0:\n\t\tprint(wynik)\n\telse:\n\t\tif c > m:\n\t\t\tc, m = m, c\n\t\twynik += min(m,c,(m+c)//3)\n\t\tprint(wynik)\n"", ""for _ in range(int(input())):\n\tc, m, a = map(int, input().split())\n\tprint(min(c, m, (c + m + a) // 3))"", ""from sys import stdin\nq=int(stdin.readline().strip())\nfor i in range(q):\n    c,m,x=list(map(int,stdin.readline().strip().split()))\n    n=c+m+x\n    y=min(c,m)\n    t=n//3\n    ans=min(y,t)\n    print(ans)\n"", ""q = int(input())\nfor i in range(q):\n\tc, m, x = map(int, input().split())\n\tprint(min(min(c, m), (c + m + x) // 3))"", ""q = int(input())\nfor i in range(q):\n    c, m, x = map(int, input().split())\n    if min(c, m) <= x:\n        print(min(c, m))\n    else:\n        l = -1\n        r = min(c, m) + 1\n        while l + 1 < r:\n            mid = (l + r) // 2\n            if c - mid + m - mid + x >= mid:\n                l = mid\n            else:\n                r = mid\n        if l == -1:\n            l = 0\n        print(l)"", ""import sys\n\ndef read():\n\treturn sys.stdin.readline()\n\ndef main():\n\tq = int(read())\n\tfor i in range(q):\n\t\tc, m, x = list(map(int, read().split()))\n\t\tif c <= m and c <= x:\n\t\t\tprint(c)\n\t\telif m <= c and m <= x:\n\t\t\tprint(m)\n\t\telse:\n\t\t\tt = x\n\t\t\tc -= x\n\t\t\tm -= x\n\t\t\tq = min(m, c, (m + c) // 3)\n\t\t\tprint(t + q)\n\t\ndef __starting_point():\n\tmain()\n\n__starting_point()"", ""q=int(input())\nfor _ in range(q):\n  c,m,x=map(int,input().split())\n  if c<m:\n    c,m,x=c,c,x+m-c\n  elif c>m:\n    c,m,x=m,m,x+c-m\n  ans=min(c,m,x)\n  if c>x:\n    ans+=2*(c-x)//3\n  print(ans)""]","{\n  ""inputs"": [\n    ""6\n1 1 1\n3 6 0\n0 0 0\n0 1 1\n10 1 10\n4 4 1\n""\n  ],\n  ""outputs"": [\n    ""1\n3\n0\n0\n1\n3\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1369/B,"greedy,implementation,strings","Lee was cleaning his house for the party when he found a messy string under the carpets. Now he'd like to make it clean accurately and in a stylish way...\n\nThe string $s$ he found is a binary string of length $n$ (i. e. string consists only of 0-s and 1-s).\n\nIn one move he can choose two consecutive characters $s_i$ and $s_{i+1}$, and if $s_i$ is 1 and $s_{i + 1}$ is 0, he can erase exactly one of them (he can choose which one to erase but he can't erase both characters simultaneously). The string shrinks after erasing.\n\nLee can make an arbitrary number of moves (possibly zero) and he'd like to make the string $s$ as clean as possible. He thinks for two different strings $x$ and $y$, the shorter string is cleaner, and if they are the same length, then the lexicographically smaller string is cleaner.\n\nNow you should answer $t$ test cases: for the $i$-th test case, print the cleanest possible string that Lee can get by doing some number of moves.\n\nSmall reminder: if we have two strings $x$ and $y$ of the same length then $x$ is lexicographically smaller than $y$ if there is a position $i$ such that $x_1 = y_1$, $x_2 = y_2$,..., $x_{i - 1} = y_{i - 1}$ and $x_i < y_i$.\n\n\n-----Input-----\n\nThe first line contains the integer $t$ ($1 \le t \le 10^4$) — the number of test cases. \n\nNext $2t$ lines contain test cases — one per two lines.\n\nThe first line of each test case contains the integer $n$ ($1 \le n \le 10^5$) — the length of the string $s$.\n\nThe second line contains the binary string $s$. The string $s$ is a string of length $n$ which consists only of zeroes and ones.\n\nIt's guaranteed that sum of $n$ over test cases doesn't exceed $10^5$.\n\n\n-----Output-----\n\nPrint $t$ answers — one per test case.\n\nThe answer to the $i$-th test case is the cleanest string Lee can get after doing some number of moves (possibly zero).\n\n\n-----Example-----\nInput\n5\n10\n0001111111\n4\n0101\n8\n11001101\n10\n1110000000\n1\n1\n\nOutput\n0001111111\n001\n01\n0\n1\n\n\n\n-----Note-----\n\nIn the first test case, Lee can't perform any moves.\n\nIn the second test case, Lee should erase $s_2$.\n\nIn the third test case, Lee can make moves, for example, in the following order: 11001101 $\rightarrow$ 1100101 $\rightarrow$ 110101 $\rightarrow$ 10101 $\rightarrow$ 1101 $\rightarrow$ 101 $\rightarrow$ 01.","[""for _ in range(int(input())):\n    # a, b = map(int, input().split())\n    n = int(input())\n    # arr = list(map(int, input().split()))\n    s = input()\n    l = 0\n    r = n - 1\n    if s.count('0') == n:\n        print(s)\n        continue\n    if s.count('1') == n:\n        print(s)\n        continue\n    while s[l] == '0':\n        l += 1\n    while s[r] == '1':\n        r -= 1\n    if r <= l:\n        print(s)\n        continue\n    print(l * '0' + '0' + (n - r - 1) * '1')"", ""ans = []\nfor _ in range(int(input())):\n    n = int(input())\n    u = list(map(int, list(input())))\n    for i in range(n):\n        if u[i] == 1:\n            i1 = i\n            break\n    else:\n        ans.append(''.join(map(str, u)))\n        continue\n    for i in range(n - 1, -1, -1):\n        if u[i] == 0:\n            i2 = i\n            break\n    else:\n        ans.append(''.join(map(str, u)))\n        continue\n    if i2 < i1:\n        ans.append(''.join(map(str, u)))\n        continue\n    u1 = '0' * i1 + '0' + '1' * (n - i2 - 1)\n    ans.append(u1)\nprint('\\n'.join(ans))\n"", ""def solve():\n    n = int(input())\n    st = input()\n    pref0 = 0\n    for i in st:\n        if i == \""0\"":\n            pref0 += 1\n        else:\n            break\n    post1 = 0\n    for i in st[::-1]:\n        if i == \""1\"":\n            post1 += 1\n        else:\n            break\n    if n != post1 + pref0:\n        print(pref0 *\""0\""+\""0\""+post1*\""1\"")\n    else:\n        print(pref0 * \""0\"" + post1 * \""1\"")\nfor i in range(int(input())):\n    solve()"", ""#list(map(int,input().split()))\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    s=input()\n    co=0\n    for i in range(n):\n        if(s[i]=='1'):\n            break\n        print('0',end=\""\"")\n        co+=1\n    ind=n\n    \n    for i in range(n-1,-1,-1):\n        if(s[i]=='0'):\n            break\n        ind=i\n    if(co-1<ind-1):\n        print('0',end=\""\"")\n    for i in range(ind,n):\n        print('1',end=\""\"")\n    print()\n    \n    \n    \n"", ""for test_i in range(int(input())):\n    n = int(input())\n    s = input()\n    l1 = 0\n    while l1 < n:\n        if s[-l1 - 1] == '1':\n            l1 += 1\n        else:\n            break\n    l0 = 0\n    while l0 < n:\n        if s[l0] == '0':\n            l0 += 1\n        else:\n            break\n    if l0 + l1 < len(s):\n        print('0' * (l0 + 1) + '1' * l1)\n    else:\n        print('0' * l0 + '1' * l1)"", ""import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nQuery = []\nfor _ in range(Q):\n    N = int(input())\n    S = input().rstrip()\n    Query.append((N, S))\n\nfor N, S in Query:\n    i1 = N\n    while i1 > 0 and S[i1-1] == \""1\"":\n        i1 -= 1\n    i2 = -1\n    while i2 +1< N-1 and S[i2+1] == \""0\"":\n        i2 += 1\n    \n    if i2 + 1 == i1:\n        tmp = \""\""\n    else:\n        tmp = \""0\""\n    ans = \""0\""*(i2+1) + tmp + \""1\""*(N-i1)\n    print(ans)"", ""import sys\nfrom functools import lru_cache, cmp_to_key\nfrom heapq import merge, heapify, heappop, heappush\nfrom math import *\nfrom collections import defaultdict as dd, deque, Counter as C\nfrom itertools import combinations as comb, permutations as perm\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\nfrom time import perf_counter\nfrom fractions import Fraction\n# import numpy as np\nsys.setrecursionlimit(int(pow(10,6)))\n# sys.stdin = open(\""input.txt\"", \""r\"")\n# sys.stdout = open(\""output.txt\"", \""w\"")\nmod = int(pow(10, 9) + 7)\nmod2 = 998244353\ndef data(): return sys.stdin.readline().strip()\ndef out(*var, end=\""\\n\""): sys.stdout.write(' '.join(map(str, var))+end)\ndef l(): return list(sp())\ndef sl(): return list(ssp())\ndef sp(): return map(int, data().split())\ndef ssp(): return map(str, data().split())\ndef l1d(n, val=0): return [val for i in range(n)]\ndef l2d(n, m, val=0): return [l1d(n, val) for j in range(m)]\n\n# @lru_cache(None)\nterm=l()[0]\n# term=1\n\nfor _ in range(term):\n    n=l()[0]\n    s=list(input())\n    i=0\n    while(i<n and s[i]!=\""1\""):\n        i+=1\n    j=n-1\n    while j>=0 and s[j]!=\""0\"":\n        j-=1\n    if(i<j+1):\n        del(s[i:j])\n    print(\""\"".join(s))"", ""for nt in range(int(input())):\n\tn = int(input())\n\ts = input()\n\tif \""1\"" not in s:\n\t\tprint (s)\n\t\tcontinue\n\tans = \""\""\n\tfor i in range(n):\n\t\tif s[i]==\""0\"":\n\t\t\tans += s[i]\n\t\telse:\n\t\t\tind = i\n\t\t\tbreak\n\ttemp = \""\""\n\tfor i in range(n-1,ind-1,-1):\n\t\tif s[i]==\""0\"":\n\t\t\tans += \""0\""\n\t\t\tbreak\n\t\telse:\n\t\t\ttemp += \""1\""\n\tans += temp\n\tprint (ans)\n"", ""from sys import stdin, stdout\nimport math\n\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    st, end = float('inf'), -1\n    for i in range(n):\n        if s[i] == '1':\n            st = i\n            break\n\n    for i in range(n-1, -1, -1):\n        if s[i] == '0':\n            end = i\n            break\n\n    if st < end:\n        print(s[:st]+'0'+s[end+1:])\n    else:\n        print(s)\n\n\n"", ""from itertools import groupby as gb\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    if s.count('10') == 0:\n        print(s)\n        continue\n    res = \""\""\n    suf = \""\""\n    l = [(k, len(list(v))) for k, v in gb(s)]\n    if len(l) > 0 and l[0][0] == '0':\n        res += l[0][0] * l[0][1]\n        l = l[1:]\n    if len(l) > 0 and l[-1][0] == '1':\n        suf = l[-1][0] * l[-1][1]\n        l = l[:-1]\n    print(res + '0' + suf)\n"", ""import math\n\n\ndef main():\n    n = int(input())\n    line = input()\n    zero = 0\n    one = 0\n    i = 0\n    while i < n and line[i] == '0':\n        zero += 1\n        i += 1\n    i = n - 1\n    while i > -1 and line[i] == '1':\n        one += 1\n        i -= 1\n    zr = False\n    on = False\n    for i in range(n):\n        if line[i] == '0':\n            zr = True\n    for i in range(n - 1, -1, -1):\n        if line[i] == \""0\"":\n            on = True\n        if line[i] == \""1\"" and on:\n            zero += 1\n            break\n    if zero == 0 and one == 0:\n        if zr:\n            print(0)\n        else:\n            print(1)\n    else:\n        line = \""\""\n        for k in range(zero):\n            line += \""0\""\n        for k in range(one):\n            line += \""1\""\n        print(line)\n\ndef __starting_point():\n    t = int(input())\n    for i in range(t):\n        main()\n\n__starting_point()"", ""for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    if n == 1:\n        print(s)\n        continue\n    zero = -1\n    one = -1\n    for i in range(n):\n        if s[i] == \""0\"":\n            zero = i\n        if s[i] == \""1\"" and one < 0:\n            one = i\n    if zero < one or one == -1 or zero == -1:\n        print(s)\n    else:\n        print((one+1) * \""0\"" + (n-zero-1) * \""1\"")\n"", ""# Contest No.: 652\n# Problem No.: B\n# Solver:      JEMINI\n# Date:        20200623\n\nimport sys\nimport heapq\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(sys.stdin.readline().strip())\n        s = sys.stdin.readline().strip()\n        if (\""1\"" in s and \""0\"" not in s) or (\""1\"" not in s and \""0\"" in s):\n            print(s)\n            continue\n        lPoint = 0\n        while s[lPoint] == \""0\"":\n            lPoint += 1\n        rPoint = n - 1\n        while s[rPoint] == \""1\"":\n            rPoint -= 1\n        \n        if lPoint > rPoint:\n            print(s)\n            continue\n        \n        if lPoint != n - 1:\n            ans = s[:lPoint]\n        else:\n            ans = \""\""\n        \n        ans += \""0\""\n\n        if rPoint != n - 1:\n            ans += s[rPoint + 1:]\n        print(ans)\n        \n\n    return\n\ndef __starting_point():\n    main()\n__starting_point()"", ""import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n=int(input())\n    S=input().strip()\n\n    OPENING=-1\n    for i in range(n):\n        if S[i]==\""1\"":\n            OPENING=i\n            break\n\n    ENDING=n\n    for i in range(n-1,-1,-1):\n        if S[i]==\""0\"":\n            ENDING=i\n            break\n\n    if OPENING==-1 or ENDING==n:\n        print(S)\n    elif OPENING>ENDING:\n        print(S)\n    else:\n        print(\""\"".join(map(str,[0]*(OPENING+1)+[1]*(n-1-ENDING))))\n        \n"", ""for _ in range(int(input())):\n    #n, m = map(int, input().split())\n    #A = list(map(int, input().split()))\n    n = int(input())\n    s = input()\n    if s == '0' * n or s == '1' * n:\n        print(s)\n\n    else:\n\n        i = 0\n        while s[i] == '0':\n            i += 1\n        j = n - 1\n        while s[j] == '1':\n            j -= 1\n        if '1' in s[i:j + 1] and '0' in s[i:j + 1]:\n            print(s[:i] + '0' + s[j + 1:])\n        else:\n            print(s)\n""]","{\n  ""inputs"": [\n    ""5\n10\n0001111111\n4\n0101\n8\n11001101\n10\n1110000000\n1\n1\n""\n  ],\n  ""outputs"": [\n    ""0001111111\n001\n01\n0\n1\n""\n  ]\n}"
