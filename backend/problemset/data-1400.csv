problems,tags,problem_statement,solution,input-output
https://codeforces.com/problemset/problem/1330/B,"implementation,math","The sequence of $m$ integers is called the permutation if it contains all integers from $1$ to $m$ exactly once. The number $m$ is called the length of the permutation.\n\nDreamoon has two permutations $p_1$ and $p_2$ of non-zero lengths $l_1$ and $l_2$.\n\nNow Dreamoon concatenates these two permutations into another sequence $a$ of length $l_1 + l_2$. First $l_1$ elements of $a$ is the permutation $p_1$ and next $l_2$ elements of $a$ is the permutation $p_2$. \n\nYou are given the sequence $a$, and you need to find two permutations $p_1$ and $p_2$. If there are several possible ways to restore them, you should find all of them. (Note that it is also possible that there will be no ways.)\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \le t \le 10\,000$) denoting the number of test cases in the input.\n\nEach test case contains two lines. The first line contains one integer $n$ ($2 \leq n \leq 200\,000$): the length of $a$. The second line contains $n$ integers $a_1, a_2, \ldots, a_n$ ($1 \leq a_i \leq n-1$).\n\nThe total sum of $n$ is less than $200\,000$.\n\n\n-----Output-----\n\nFor each test case, the first line of output should contain one integer $k$: the number of ways to divide $a$ into permutations $p_1$ and $p_2$.\n\nEach of the next $k$ lines should contain two integers $l_1$ and $l_2$ ($1 \leq l_1, l_2 \leq n, l_1 + l_2 = n$), denoting, that it is possible to divide $a$ into two permutations of length $l_1$ and $l_2$ ($p_1$ is the first $l_1$ elements of $a$, and $p_2$ is the last $l_2$ elements of $a$). You can print solutions in any order.\n\n\n-----Example-----\nInput\n6\n5\n1 4 3 2 1\n6\n2 4 1 3 2 1\n4\n2 1 1 3\n4\n1 3 3 1\n12\n2 1 3 4 5 6 7 8 9 1 10 2\n3\n1 1 1\n\nOutput\n2\n1 4\n4 1\n1\n4 2\n0\n0\n1\n2 10\n0\n\n\n\n-----Note-----\n\nIn the first example, two possible ways to divide $a$ into permutations are $\{1\} + \{4, 3, 2, 1\}$ and $\{1,4,3,2\} + \{1\}$.\n\nIn the second example, the only way to divide $a$ into permutations is $\{2,4,1,3\} + \{2,1\}$.\n\nIn the third example, there are no possible ways.","[""def possible(a):\n    ans = set()\n    s = set()\n    lmax = 0\n    for i in range(len(a)):\n        lmax = max(lmax, a[i])\n        s.add(a[i])\n        if lmax == i + 1 and len(s) == i + 1:\n            ans.add(i + 1)\n    return ans\n\n\nt = int(input())\nfor case_num in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    left = possible(a)\n    a.reverse()\n    right = possible(a)\n    ans = []\n    for l in left:\n        if n - l in right:\n            ans.append(l)\n    print(len(ans))\n    for l in ans:\n        print(l, n - l)\n"", ""import sys\ninput=sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    aa=list(map(int,input().split()))\n    ss=set()\n    \n    st=0\n    ind=1\n    pre=[0 for i in range(n)]\n    for i in range(n):\n        if aa[i] in ss:\n            break\n        ss.add(aa[i])\n        while ind<=len(ss):\n            if ind in ss:\n                ind+=1\n            else:\n                break\n        if len(ss)!=ind-1:\n            pre[i]=0\n        else:\n            pre[i]=ind\n    ind=1\n   # print(pre)\n    ss=set()\n    suff=[0 for i in range(n)]\n    for i in range(n-1,-1,-1):\n        if aa[i] in ss:\n            break\n        ss.add(aa[i])\n        while ind<=len(ss):\n            if ind in ss:\n                ind+=1\n            else:\n                break\n        if len(ss)!=ind-1:\n            suff[i]=0\n        else:\n            suff[i]=ind\n    tot=0\n    ans=[]\n    for i in range(n-1):\n        if pre[i]>0 and suff[i+1]>0:\n            tot+=1\n            ans.append([i+1,n-i-1])\n    print(tot)\n    for i in ans:\n        print(i[0],i[1])\n        \n\n"", ""# @author \n\nimport sys\n\nclass BDreamoonLikesPermutations:\n    def solve(self):\n        for _ in range(int(input())):\n            \n            def is_perm(a):\n                return len(set(a)) == len(a) and min(a) == 1 and max(a) == len(a)\n            \n            n = int(input())\n            a = [int(_) for _ in input().split()]\n            done = set()\n            ans = set()\n            i = 0\n            for i in range(n):\n                if a[i] in done:\n                    break\n                done.add(a[i])\n            \n            if is_perm(a[:i]) and is_perm(a[i:]):\n                ans.add((i, n - i))\n\n            done = set()\n            for i in range(n - 1, -1, -1):\n                if a[i] in done:\n                    break\n                done.add(a[i])\n\n            if is_perm(a[:i + 1]) and is_perm(a[i + 1:]):\n                ans.add((i + 1, n - i - 1))\n\n            print(len(ans))\n            for sol in ans:\n                print(*sol)\n\nsolver = BDreamoonLikesPermutations()\ninput = sys.stdin.readline\n\nsolver.solve()\n"", ""def readIntArray():\n    return list(map(int,input().split()))\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = readIntArray()\n    mp = {}\n    for val in a:\n        if val not in mp:\n            mp[val] = 0\n        mp[val] += 1\n    l1 = max(a)\n    l2 = n - l1\n    if l2 <= 0:\n        print(0)\n        continue\n    good = True\n    for i in range(1, l2 + 1):\n        if i not in mp or mp[i] != 2:\n            good = False\n            break\n    for i in range(l2 + 1, l1 + 1):\n        if i not in mp or mp[i] != 1:\n            good = False\n            break\n    if not good:\n        print(0)\n        continue\n    mp = {}\n    ans = set()\n    cur = 0\n    st = set()\n    used = set()\n    for i in range(n):\n        if a[i] in used:\n            break\n        st.add(a[i])\n        used.add(a[i])\n        while cur + 1 in st:\n            st.remove(cur + 1)\n            cur += 1\n        if cur == l1 or cur == l2 and len(st) == 0:\n            ans.add((cur, n - cur))\n    print(len(ans))\n    for val in ans:\n        print(val[0], val[1])\n"", ""t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    mx = max(a)\n    sols = []\n    if mx < n:\n        l1 = list(sorted(a[:mx]))\n        l2 = list(sorted(a[mx:]))\n        rl1 = list(range(1, mx+1))\n        rl2 = list(range(1, n-mx+1))\n        if l1 == rl1 and l2 == rl2:\n            sols.append((mx, n - mx))\n        l1 = list(sorted(a[:n-mx]))\n        l2 = list(sorted(a[n-mx:]))\n        if mx*2 != n and l1 == rl2 and l2 == rl1:\n            sols.append((n-mx, mx))\n    print(len(sols))\n    for p in sols:\n        print(*p)\n"", ""from collections import deque\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    liste = list(map(int, input().split()))\n    vis = [0 for i in range(n)]\n    can = [0 for i in range(n)]\n    can2 = [0 for i in range(n)]\n    maxi = 0\n    for i in range(1, n):\n        if (vis[liste[i-1]]):\n            break\n        vis[liste[i-1]] = 1\n        maxi = max(maxi, liste[i-1])\n        if (maxi == i):\n            can[maxi] = 1\n    liste = liste[::-1]\n    maxi = 0\n    vis = [0 for i in range(n)]\n    for i in range(1, n):\n        if (vis[liste[i-1]]):\n            break\n        vis[liste[i-1]] = 1\n        maxi = max(maxi, liste[i-1])\n        if (maxi == i):\n            can2[maxi] = 1\n    count = 0\n    for i in range(1, n):\n        if (can[i] and can2[n-i]):\n            count += 1\n    print(count)\n    for i in range(1, n):\n        if (can[i] and can2[n-i]):\n            print(i, n-i)"", ""for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dpF = [0 for i in range(n)]\n    dpB = [0 for i in range(n)]\n    noRep = 1\n    r = {}\n    m = 0\n    for i in range(n):\n        if r.get(a[i]) == None:\n            r[a[i]] = 1\n            m = max(m, a[i])\n            if m == i + 1:\n                dpF[i] = 1\n        else:\n            break\n    r = {}\n    m = 0\n    for i in range(n - 1, -1, -1):\n        if r.get(a[i]) == None:\n            r[a[i]] = 1\n            m = max(m, a[i])\n            if m == n - i:\n                dpB[i] = 1\n        else:\n            break\n    # print(dpF)\n    # print(dpB)\n    ans = 0\n    ansList = []\n    for i in range(n - 1):\n        if dpF[i] == 1 and dpB[i + 1] == 1:\n            ans += 1\n            ansList.append([i + 1, n - i - 1])\n    print(ans)\n    for i in ansList:\n        print(i[0], i[1])"", ""from math import *\n\nmod = 1000000007\n\nfor zz in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    ans = []\n    cs = set()\n    d = {}\n    c = 0\n    for i in range(n):\n        if a[i] not in d:\n            c += 1\n            d[a[i]] = 0\n        d[a[i]] += 1\n    mv = 0\n    m = [0] * n\n    m[-1] = a[-1]\n    for i in range(n - 2, -1, -1):\n        m[i] = max(m[i + 1], a[i])\n\n    for i in range(n):\n        mv = max(a[i], mv)\n        if a[i] in cs:\n            break\n        cs.add(a[i])\n        d[a[i]] -= 1\n        if d[a[i]] <= 0:\n            c -= 1\n        if mv == i + 1 and c == n - i - 1 and m[i + 1] == n - i - 1:\n            ans.append(i)\n    print(len(ans))\n    for i in ans:\n        print(i + 1, n - i - 1)\n"", ""def per(X):\n    S=set(X)\n    if not len(X)==len(S):\n        return False\n    for i in range(1,len(X)+1):\n        if i not in S: return False\n    return True\nfor y in range(int(input())):\n    n=int(input())\n    L=list(map(int,input().split()))\n    m=max(L)\n    r=[]\n    if n!=m:\n        if per(L[:m]) and per(L[m:]):\n            r.append((m,n-m))\n        if per(L[-m:]) and per(L[:-m]):\n            r.append((n-m,m))\n    r=list(set(r))\n    print(len(r))\n    for a,b in r:\n        print(a,b)"", ""import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    seen = [False] * (n+1)\n    ans = set()\n    for i, x in enumerate(a):\n        if seen[x]:\n            if sorted(a[:i]) == list(range(1, i+1)) and sorted(a[i:]) == list(range(1, n-i+1)):\n                ans.add((i, n-i))\n            break\n        seen[x] = True\n    seen = [False] * (n+1)\n    for i, x in list(enumerate(a))[::-1]:\n        if seen[x]:\n            if sorted(a[:i+1]) == list(range(1, i+2)) and sorted(a[i+1:]) == list(range(1, n-i)):\n                ans.add((i+1, n-i-1))\n            break\n        seen[x] = True\n    print(len(ans))\n    for l1, l2 in ans:\n        print(l1, l2)\n\n"", ""import sys\ninput=sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    d=dict()\n    demand=1\n    pre=[0]*n\n    post=[0]*n\n    for i in range(n):\n        d[arr[i]]=1\n        if(demand in d):\n            while(demand in d):\n                demand+=1\n            pre[i]=demand-1\n    d2=dict()\n    #print(pre)\n    demand=1\n    for i in range(n-1,-1,-1):\n        d2[arr[i]]=1\n        if(demand in d2):\n            while(demand in d2):\n                demand+=1\n            post[i]=demand-1\n    #print(post)\n    l=[]\n    for i in range(1,n):\n        if(post[i]+pre[i-1]==n):\n            l+=[[pre[i-1],post[i]]]\n    print(len(l))\n    for i in l:\n        print(*i)\n    \n            \n"", ""import heapq, sys\n\n\ndef ps(l):\n    n = len(l)\n    nxt = 1\n    heap = []\n    ans = []\n    for i in range(n):\n        heapq.heappush(heap, l[i])\n        while heap and heap[0] == nxt:\n            nxt += 1\n            heapq.heappop(heap)\n        if not heap:\n            ans.append(i)\n    return ans\n\n\nfor q in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    d = [int(i) for i in sys.stdin.readline().split()]\n    st = set(ps(d))\n    # print(st)\n    d.reverse()\n    anss = []\n    ap = ps(d)\n    # print(ap)\n    for a in ap:\n        b = n-2-a\n        if b in st:\n            anss.append(str(b+1)+' '+ str(n - b - 1) + '\\n')\n    sys.stdout.write(str(len(anss)) + '\\n')\n    sys.stdout.write(''.join(anss))\n\n\n""]","{\n  ""inputs"": [\n    ""6\n5\n1 4 3 2 1\n6\n2 4 1 3 2 1\n4\n2 1 1 3\n4\n1 3 3 1\n12\n2 1 3 4 5 6 7 8 9 1 10 2\n3\n1 1 1\n""\n  ],\n  ""outputs"": [\n    ""2\n1 4\n4 1\n1\n4 2\n0\n0\n1\n2 10\n0\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1427/B,"greedy,implementation,sortings","You like playing chess tournaments online.\n\nIn your last tournament you played $n$ games. For the sake of this problem, each chess game is either won or lost (no draws). When you lose a game you get $0$ points. When you win you get $1$ or $2$ points: if you have won also the previous game you get $2$ points, otherwise you get $1$ point. If you win the very first game of the tournament you get $1$ point (since there is not a ""previous game"").\n\nThe outcomes of the $n$ games are represented by a string $s$ of length $n$: the $i$-th character of $s$ is W if you have won the $i$-th game, while it is L if you have lost the $i$-th game.\n\nAfter the tournament, you notice a bug on the website that allows you to change the outcome of at most $k$ of your games (meaning that at most $k$ times you can change some symbol L to W, or W to L). Since your only goal is to improve your chess rating, you decide to cheat and use the bug.\n\nCompute the maximum score you can get by cheating in the optimal way.\n\n\n-----Input-----\n\nEach test contains multiple test cases. The first line contains an integer $t$ ($1\le t \le 20,000$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each testcase contains two integers $n, k$ ($1\le n\le 100,000$, $0\le k\le n$) – the number of games played and the number of outcomes that you can change.\n\nThe second line contains a string $s$ of length $n$ containing only the characters W and L. If you have won the $i$-th game then $s_i=\,$W, if you have lost the $i$-th game then $s_i=\,$L.\n\nIt is guaranteed that the sum of $n$ over all testcases does not exceed $200,000$.\n\n\n-----Output-----\n\nFor each testcase, print a single integer – the maximum score you can get by cheating in the optimal way.\n\n\n-----Example-----\nInput\n8\n5 2\nWLWLL\n6 5\nLLLWWL\n7 1\nLWLWLWL\n15 5\nWWWLLLWWWLLLWWW\n40 7\nLLWLWLWWWLWLLWLWWWLWLLWLLWLLLLWLLWWWLWWL\n1 0\nL\n1 1\nL\n6 1\nWLLWLW\n\nOutput\n7\n11\n6\n26\n46\n0\n1\n6\n\n\n\n-----Note-----\n\nExplanation of the first testcase. Before changing any outcome, the score is $2$. Indeed, you won the first game, so you got $1$ point, and you won also the third, so you got another $1$ point (and not $2$ because you lost the second game).\n\nAn optimal way to cheat is to change the outcomes of the second and fourth game. Doing so, you end up winning the first four games (the string of the outcomes becomes WWWWL). Hence, the new score is $7=1+2+2+2$: $1$ point for the first game and $2$ points for the second, third and fourth game.\n\nExplanation of the second testcase. Before changing any outcome, the score is $3$. Indeed, you won the fourth game, so you got $1$ point, and you won also the fifth game, so you got $2$ more points (since you won also the previous game).\n\nAn optimal way to cheat is to change the outcomes of the first, second, third and sixth game. Doing so, you end up winning all games (the string of the outcomes becomes WWWWWW). Hence, the new score is $11 = 1+2+2+2+2+2$: $1$ point for the first game and $2$ points for all the other games.","[""import sys\ninput = sys.stdin.readline\n\ndef main():\n    n, k = map(int, input().split())\n    string = input().strip()\n    if \""W\"" not in string:\n        ans = min(n, k) * 2 - 1\n        print(max(ans, 0))\n        return\n        \n    L_s = []\n    cnt = 0\n    bef = string[0]\n    ans = 0\n    for s in string:\n        if s == bef:\n            cnt += 1\n        else:\n            if bef == \""L\"":\n                L_s.append(cnt)\n            else:\n                ans += cnt * 2 - 1\n            cnt = 1\n        bef = s\n    if bef == \""W\"":\n        ans += cnt * 2 - 1\n        cnt = 0\n        \n    if string[0] == \""L\"" and L_s:\n        cnt += L_s[0]\n        L_s = L_s[1:]\n    L_s.sort()\n    for l in L_s:\n        if k >= l:\n            ans += l * 2 + 1\n            k -= l\n        else:\n            ans += k * 2\n            k = 0\n            \n    ans += 2 * min(k, cnt)\n    print(ans)\n    \n    \n    \nfor _ in range(int(input())):\n    main()"", ""import sys\n\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n,k = map(int,input().split())\n    s = input()\n    s = [s[i] for i in range(n)]\n\n    base = s.count(\""W\"")\n    if base == 0:\n        if k:\n            print(2*k-1)\n        else:\n            print(0)\n    elif base+k>=n:\n        print(2*n-1)\n    else:\n        interval = []\n        while s and s[-1]==\""L\"":\n            s.pop()\n        s = s[::-1]\n        while s and s[-1]==\""L\"":\n            s.pop()\n\n        while s:\n            if s[-1]==\""W\"":\n                while s and s[-1]==\""W\"":\n                    s.pop()\n            else:\n                tmp = 0\n                while s and s[-1]==\""L\"":\n                    s.pop()\n                    tmp += 1\n                interval.append(tmp)\n        interval.sort(reverse=True)\n        K = k\n        while interval and k:\n            if k>=interval[-1]:\n                k -= interval.pop()\n            else:\n                break\n        print(2*(base+K)-1-len(interval))"", ""import sys\ninput = sys.stdin.readline\n\n\ndef compress(string):\n    string = string + \""#\""\n    n = len(string)\n    begin, end, cnt = 0, 1, 1\n    ans = []\n    while end < n:\n        if string[begin] == string[end]:\n            end, cnt = end + 1, cnt + 1\n        else:\n            ans.append((string[begin], cnt))\n            begin, end, cnt = end, end + 1, 1\n    return ans\n\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    s = input()[:-1]\n    \n    s = compress(s)\n\n    \n    w_groups = 0\n    w_cnt = 0\n    l_cnt = 0\n    li = []\n    for i, (char, cnt) in enumerate(s):\n        if char == \""W\"":\n            w_groups += 1\n            w_cnt += cnt\n        if char == \""L\"":\n            l_cnt += cnt\n            if 1 <= i < len(s) - 1:\n                li.append(cnt)\n\n    if w_cnt == 0:\n        print(max(min(k, l_cnt) * 2 - 1, 0))\n        continue\n        \n    ans = w_cnt * 2 - w_groups\n    ans += min(k, l_cnt) * 2\n\n    li.sort()\n    for val in li:\n        if k >= val:\n            ans += 1\n            k -= val\n    print(ans)"", ""for _ in range(int(input())):\n    n, k = list(map(int, input().split()))\n    s = input()\n    k = min(k, s.count(\""L\""))\n    arr = []\n    cur = 0\n    sc = 0\n    se = False\n    if s[0] == \""W\"":\n        sc += 1\n    for e in s:\n        if e == \""L\"":\n            cur += 1\n        else:\n            if cur > 0 and se:\n                arr.append(cur)\n            se = True\n            cur = 0\n    for i in range(1, n):\n        if s[i] == \""W\"":\n            if s[i-1] == \""W\"":\n                sc += 2\n            else:\n                sc += 1 \n    arr.sort() \n    arr.reverse()\n    #print(arr, sc)\n    while len(arr) > 0 and arr[-1] <= k:\n        k -= arr[-1]\n        sc += arr[-1]*2+1\n        arr.pop()\n    #print(k)\n    sc += k*2\n    if k > 0 and s.count(\""W\"") == 0:\n        sc -= 1\n    print(sc)\n"", ""from sys import stdin\n\nt = int(stdin.readline())\nfor i in range(t):\n    n, k = tuple(int(x) for x in stdin.readline().split())\n    line = 'L' * (k+1) + stdin.readline()[:-1] + 'L' * (k+1)\n    score = 0\n    flag = False\n    for char in line:\n        if char == 'W':\n            if flag:\n                score += 2\n            else:\n                score += 1\n                flag = True\n        else:\n            flag = False\n            \n    seq = sorted(len(x) for x in line.split('W'))\n\n    if len(seq) == 1:\n        if k == 0:\n            print(0)\n        else:\n            print(2*k-1)\n        continue\n    for item in seq:\n        if item == 0:\n            continue\n        if k - item >= 0:\n            k -= item\n            score += 2 * (item-1) + 3\n        elif k > 0:\n            score += 2 * k\n            break\n        else:\n            break\n    print(min(score, 2*n-1))\n    \n"", ""from sys import stdin\n\""\""\""\nn=int(stdin.readline().strip())\nn,m=map(int,stdin.readline().strip().split())\ns=list(map(int,stdin.readline().strip().split()))\ns=stdin.readline().strip()\n\""\""\""\nT=int(stdin.readline().strip())\nfor caso in range(T):\n    n,k=list(map(int,stdin.readline().strip().split()))\n    s=list(stdin.readline().strip())\n    aux=[]\n    last=-1\n    for i in range(n):\n        if i>0 and s[i]=='L' and s[i-1]=='W':\n            last=i\n        if i<n-1 and s[i]=='L' and s[i+1]=='W' and last!=-1:\n            aux.append([i-last,last,i])\n    aux.sort()\n    for i in aux:\n        for j in range(i[1],i[2]+1):\n            if k>0:\n                s[j]='W'\n                k-=1\n    ini=-1\n    fin=n\n    for i in range(n):\n        if s[i]=='W':\n            ini=i-1\n            break\n    for i in range(n-1,-1,-1):\n        if s[i]=='W':\n            fin=i+1\n            break\n    for i in range(ini,-1,-1):\n        if k>0:\n            s[i]='W'\n            k-=1\n    for i in range(fin,n):\n        if k>0:\n            s[i]='W'\n            k-=1\n    ans=0\n    if ini==-1 and fin==n:\n        for i in range(n):\n            if k>0:\n                s[i]='W'\n                k-=1\n    for i in range(n):\n        if s[i]=='W':\n            if i>0 and s[i-1]=='W':\n                ans+=2\n            else:\n                ans+=1\n    print(ans)\n            \n        \n        \n\n"", ""for _ in range(int(input())):\n    n, k = list(map(int, input().split()))\n    inp = input().lower()\n    k = min(k, inp.count('l'))\n    ans = inp.count('w') + tuple(zip(inp, 'l' + inp)).count('ww') + k * 2\n    if 'w' in inp:\n        inp2 = []\n        cur = -1\n        for c in inp:\n            if cur != -1:\n                if c == 'l':\n                    cur += 1\n                else:\n                    inp2.append(cur)\n            if c == 'w':\n                cur = 0\n        inp2.sort()\n        for inp2i in inp2:\n            if inp2i > k:\n                break\n            k -= inp2i\n            ans += 1\n    else:\n        ans = max(ans - 1, 0)\n    print(ans)\n"", ""import sys\nreadline = sys.stdin.readline\n\nT = int(readline())\nAns = [None]*T\n\nfor qu in range(T):\n    N, K = list(map(int, readline().split()))\n    S = [1 if s == 'W' else 0 for s in readline().strip()]\n    if all(s == 0 for s in S):\n        Ans[qu] = max(0, 2*K-1)\n        continue\n    \n    ans = 0\n    ctr = 0\n    st = []\n    L = []\n    res = 0\n    hh = False\n    for i in range(N):\n        s = S[i]\n        if s == 1:\n            if i == 0 or S[i-1] == 0:\n                ans += 1\n            else:\n                ans += 2\n            if ctr:\n                st.append(ctr)\n                ctr = 0\n            hh = True\n        else:\n            if hh:    \n                ctr += 1\n            else:\n                res += 1\n    res += ctr\n    st.sort()\n    J = []\n    for s in st:\n        J.extend([2]*(s-1) + [3])\n    J.extend([2]*res)\n    Ans[qu] = ans + sum(J[:min(len(J), K)])\nprint('\\n'.join(map(str, Ans)))\n"", ""def solve():\n    n, k = list(map(int, input().split()))\n    s = input()\n    ans = 0\n    prev = False\n    c = []\n    cc = 0\n    for i in range(n):\n        if s[i] == 'W':\n            if cc:\n                if cc != i:\n                    c.append(cc)\n                cc = 0\n            if prev:\n                ans += 2\n            else:\n                ans += 1\n            prev = True\n        else:\n            prev = False\n            cc += 1\n    c.sort()\n    for i in range(len(c)):\n        if c[i] <= k:\n            k -= c[i]\n            ans += c[i] * 2 + 1\n    if 'W' in s:\n        ans += k * 2\n    else:\n        ans += max(k * 2 - 1, 0)\n    ans = min(ans, n * 2 - 1)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()\n""]","{\n  ""inputs"": [\n    ""8\n5 2\nWLWLL\n6 5\nLLLWWL\n7 1\nLWLWLWL\n15 5\nWWWLLLWWWLLLWWW\n40 7\nLLWLWLWWWLWLLWLWWWLWLLWLLWLLLLWLLWWWLWWL\n1 0\nL\n1 1\nL\n6 1\nWLLWLW\n""\n  ],\n  ""outputs"": [\n    ""7\n11\n6\n26\n46\n0\n1\n6\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1303/B,math,"Your company was appointed to lay new asphalt on the highway of length $n$. You know that every day you can either repair one unit of the highway (lay new asphalt over one unit of the highway) or skip repairing.\n\nSkipping the repair is necessary because of the climate. The climate in your region is periodical: there are $g$ days when the weather is good and if you lay new asphalt these days it becomes high-quality pavement; after that, the weather during the next $b$ days is bad, and if you lay new asphalt these days it becomes low-quality pavement; again $g$ good days, $b$ bad days and so on.\n\nYou can be sure that you start repairing at the start of a good season, in other words, days $1, 2, \dots, g$ are good.\n\nYou don't really care about the quality of the highway, you just want to make sure that at least half of the highway will have high-quality pavement. For example, if the $n = 5$ then at least $3$ units of the highway should have high quality; if $n = 4$ then at least $2$ units should have high quality.\n\nWhat is the minimum number of days is needed to finish the repair of the whole highway?\n\n\n-----Input-----\n\nThe first line contains a single integer $T$ ($1 \le T \le 10^4$) — the number of test cases.\n\nNext $T$ lines contain test cases — one per line. Each line contains three integers $n$, $g$ and $b$ ($1 \le n, g, b \le 10^9$) — the length of the highway and the number of good and bad days respectively.\n\n\n-----Output-----\n\nPrint $T$ integers — one per test case. For each test case, print the minimum number of days required to repair the whole highway if at least half of it should have high quality.\n\n\n-----Example-----\nInput\n3\n5 1 1\n8 10 10\n1000000 1 1000000\n\nOutput\n5\n8\n499999500000\n\n\n\n-----Note-----\n\nIn the first test case, you can just lay new asphalt each day, since days $1, 3, 5$ are good.\n\nIn the second test case, you can also lay new asphalt each day, since days $1$-$8$ are good.","[""for i in range(int(input())):\n    n,g,b=map(int,input().split())\n    nn=(n+1)//2\n    print(max(nn+(nn-1)//g*b,n))"", ""for _ in range(int(input())):\n    n, g, b = list(map(int, input().split()))\n    half = (n - 1) // 2 + 1\n\n    ans = (g + b) * (half // g) - b  # + (half % g)\n    if half % g != 0:\n        ans += b + half % g\n    print(max(ans, n))\n"", ""# import sys\n#\n# input = lambda: sys.stdin.readline().strip()\nfor i in range(int(input())):\n    n,g, b = list(map(int, input().split()))\n    n1 = n\n    n = (n+1)//2\n    k = n//g\n    if n%g:\n        print(max(n1,k*(g+b)+n%g))\n    else:\n        print(max(n1,g*k+b*(k-1)))\n"", ""def iinput():\n    return [int(x) for x in input().split()]\n\n\ndef main():\n    n, g, b = iinput()\n    z = (n + 1) // 2\n    d = (z - 1) // g\n    return max(d * b + z, n)\n\n\nfor i in range(int(input())):\n    print(main())\n"", ""import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n,g,b=list(map(int,input().split()))\n    ALL=(n+1)//2\n\n    ANS=n\n\n    week=-(-ALL//g)-1\n    ANS=max(ANS,week*(g+b)+(ALL-week*g))\n\n    print(ANS)\n"", ""t = int(input())\nfor q in range(t):\n    n, g, b = [int(i) for i in input().split()]\n    num = n\n    n = n // 2 + n % 2\n    val = n // g\n    d = 0\n    if n % g == 0:\n        d = (val - 1) * (b + g) + g\n    else:\n        d = val * (b + g) + n % g\n    if d < num:\n        print(num)\n    else:\n        print(d)\n    \n"", ""t = int(input())\n\ndef check(n, h, g, b, m):\n    if m < n:\n        return False\n    loop, rest = divmod(m, g + b)\n    ok = min(rest, g) + loop * g\n    return ok >= h\n\nfor _ in range(t):\n    n,g,b = list(map(int,input().split()))\n    high = (n + 1) // 2\n    ok, ng = 10 ** 20, 0\n    while ok - ng > 1:\n        mid = (ok + ng) // 2\n        if check(n, high, g, b, mid):\n            ok = mid\n        else:\n            ng = mid\n    print(ok)\n"", ""def solve():\n    n, g, b = [int(x) for x in input().split()]\n    l = 0\n    r = int(1e30)\n\n    while r-l > 1:\n        m = (l+r)//2\n\n        blk = m // (g + b)\n        cnt = blk * g + min(g, m % (g + b))\n\n        if cnt >= (n+1)//2:\n            r = m\n        else:\n            l = m\n    \n    print(max(r, n))\n\nt = int(input())\nfor _ in range(t):\n    solve()"", ""import sys\nimport math\nfrom collections import defaultdict\nfrom collections import deque\nfrom itertools import combinations\nfrom itertools import permutations\ninput = lambda : sys.stdin.readline().rstrip()\nread = lambda : list(map(int, input().split()))\ngo = lambda : 1/0\ndef write(*args, sep=\""\\n\""):\n  for i in args:\n    sys.stdout.write(\""{}{}\"".format(i, sep))\nINF = float('inf')\nMOD = int(1e9 + 7)\nYES = \""YES\""\nNO = \""NO\""\n\nfor _ in range(int(input())):\n  try:\n    n, g, b = read()\n\n    total = math.ceil(n / 2)  \n\n    s = 0\n    e = 1 << 63\n    while s <= e:\n      m = (s + e) // 2\n      good = 0\n      bad = 0 \n\n      x = m // (g + b)\n      good += x * g\n      bad += x * b \n\n      y = m - (m // (g + b)) * (g + b)\n      good += min(y, g)\n      bad += max(0, y - g)\n\n      if good + bad >= n and good >= total:\n        e = m - 1\n      else:\n        s = m + 1\n    \n    print(s)\n\n\n\n    \n\n  except ZeroDivisionError:\n    continue\n\n  except Exception as e:\n    print(e)\n    continue"", ""for _ in range(int(input())):\n\tn,g,b = map(int,input().split())\n\torign = n\n\tn = (n+1)//2\n\tcom = ((n-1)//g)\n\tans = com*(g+b)\n\tn -= com*g\n\tans += n\n\tprint(max(ans,orign))""]","{\n  ""inputs"": [\n    ""3\n5 1 1\n8 10 10\n1000000 1 1000000\n""\n  ],\n  ""outputs"": [\n    ""5\n8\n499999500000\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1354/C1,"binary search,geometry,math,ternary search","The statement of this problem is the same as the statement of problem C2. The only difference is that, in problem C1, $n$ is always even, and in C2, $n$ is always odd.\n\nYou are given a regular polygon with $2 \cdot n$ vertices (it's convex and has equal sides and equal angles) and all its sides have length $1$. Let's name it as $2n$-gon.\n\nYour task is to find the square of the minimum size such that you can embed $2n$-gon in the square. Embedding $2n$-gon in the square means that you need to place $2n$-gon in the square in such way that each point which lies inside or on a border of $2n$-gon should also lie inside or on a border of the square.\n\nYou can rotate $2n$-gon and/or the square.\n\n\n-----Input-----\n\nThe first line contains a single integer $T$ ($1 \le T \le 200$) — the number of test cases.\n\nNext $T$ lines contain descriptions of test cases — one per line. Each line contains single even integer $n$ ($2 \le n \le 200$). Don't forget you need to embed $2n$-gon, not an $n$-gon.\n\n\n-----Output-----\n\nPrint $T$ real numbers — one per test case. For each test case, print the minimum length of a side of the square $2n$-gon can be embedded in. Your answer will be considered correct if its absolute or relative error doesn't exceed $10^{-6}$.\n\n\n-----Example-----\nInput\n3\n2\n4\n200\n\nOutput\n1.000000000\n2.414213562\n127.321336469","[""import math\n\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    print(1/math.tan(math.pi/2/n))\n"", ""t=int(input())\nimport math as m\nwhile t:\n    t-=1\n    a=int(input())\n    print(1/(m.tan(m.pi/(2*a))))\n"", ""import sys\nimport math\n\nreadline = sys.stdin.readline\nread = sys.stdin.read\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\ndef solve():\n    n = ni()\n    print(1 / math.tan(math.pi / (2 * n)))\n    return\n\n\n# solve()\n\nT = ni()\nfor _ in range(T):\n    solve()\n"", ""#                                               |\n#   _` |  __ \\    _` |   __|   _ \\   __ \\    _` |   _` |\n#  (   |  |   |  (   |  (     (   |  |   |  (   |  (   |\n# \\__,_| _|  _| \\__,_| \\___| \\___/  _|  _| \\__,_| \\__,_|\n\nimport sys\nimport math\nimport operator as op\nfrom functools import reduce\n\ndef read_line():\n\treturn sys.stdin.readline()[:-1]\n \ndef read_int():\n\treturn int(sys.stdin.readline())\n\t\ndef read_int_line():\n\treturn [int(v) for v in sys.stdin.readline().split()]\n\ndef read_float_line():\n\treturn [float(v) for v in sys.stdin.readline().split()]\n\ndef ncr(n, r):\n    r = min(r, n-r)\n    numer = reduce(op.mul, range(n, n-r, -1), 1)\n    denom = reduce(op.mul, range(1, r+1), 1)\n    return numer / denom\n\ndef rad(x):\n\treturn math.pi*x/180\n\nt = read_int()\nfor i in range(t):\n\tn = read_int()\n\tans = 1/(math.tan(rad(180/(2*n))))\n\tprint(ans)"", ""import math\n\ndef sqare_size(n):\n    return 1/math.tan(math.pi/(2*n))\n\nt = int(input())\nfor _ in range(t):\n    print(sqare_size(int(input())))\n"", ""from math import *\n\nt = int(input())\nfor case in range(t):\n    n = int(input())\n    print(1/(tan(pi/(2*n))))\n"", ""import sys\nimport math\n\ninput = sys.stdin.readline\nflush = sys.stdout.flush\n\nfor _ in range(int(input())):\n\tn = int(input())\n\tprint(1.0 / math.tan(math.pi / (2.0 * n)))\n"", ""\""\""\""\narr = list(map(int, input().split()))\nn,k=map(int, input().split())\n\""\""\""\nimport math\nimport sys\n# input = sys.stdin.readline\n\n############ ---- Input Functions ---- ############\ndef inp():\n    return(int(input()))\ndef inlt():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef invr():\n    return(list(map(int,input().split())))\n\ntest_cases = int(input())\nfor _ in range(test_cases):\n    sides = int(input())\n    sides *= 2\n    apothem = 1 / (2 * math.tan((180 / sides) * (math.pi/180)))   \n    print(2 * apothem)\n# for _ in range(test_cases):\n#     size = int(input())\n#     arr = inlt()\n#     maxx = -float('inf')\n#     temp = []\n#     max_diff = 0\n#     #Checks the maximum number and difference of decreasing numbers, the moment it increases again, it rechecks for a bigger difference\n#     for i in range(size):\n#         if arr[i] < maxx:\n#             max_diff = max(max_diff, maxx - arr[i])\n#         maxx = max(arr[i], maxx)\n#     i = 0\n#     index = 0\n#     while i < max_diff:\n#         i += 2 ** index\n#         index += 1\n#     print(index)\n"", ""import math\nT = int(input())\nfor i in range(T):\n    x = 2*int(input())\n    print(1/math.tan(math.pi/x))\n"", ""from math import cos, pi, sin\n\nfor _ in range(int(input())):\n    n = int(input())\n    alpha = pi / (n * 2)\n    print(cos(alpha) / sin(alpha))\n"", ""from math import tan, pi\nfor _ in range(int(input())):\n    n = int(input())\n    n *= 2\n    print(1/tan(pi/n))\n"", ""import math\nimport sys\n\n#sys.stdin = open(\""in.txt\"")\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    n *= 2\n    a = (n - 2) * math.pi / n / 2\n    r = 1/2 * math.tan(a)\n    print(2*r)\n"", ""import math\nimport sys\ninput = sys.stdin.readline\n\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    theta = 2 * n\n    print(1 / math.tan(math.radians(360 / 4 / n)))"", ""from math import sin, pi\n\nn = int(input())\n\ndef f(a, b):\n    return sin((b * pi) / a) / sin(pi / a)\n\nfor _ in range(n):\n    m = int(input())\n    if m % 2 == 0:\n        print(\""%.12f\"" % f(2 * m, m - 1))\n    else:\n        print(\""%.12f\"" % f(2 * m, m))\n"", ""from math import*\nfor _ in range(int(input())):\n  n=int(input())\n  if n%2==0:\n    print(1/tan(radians(90/n)))"", ""from math import sin, pi, sqrt, tan\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\nt = read_int()\nfor case_num in range(t):\n    n = read_int()\n    angle = pi / n / 2\n    r = 1 / tan(angle)\n    print('{:.9f}'.format(r))\n"", ""import math\n\nimport sys\ninput = sys.stdin.readline\n\nQ = int(input())\nQuery = [int(input()) for _ in range(Q)]\n\nfor N in Query:\n    if N%2 == 0:\n        print(1/math.tan(math.pi/(N*2)))"", ""import math\nt = int(input())\nfor i in range(0,t):\n    a = int(input())\n    pi = math.pi\n    print(round(1/math.tan(pi/(2*(a))),9))\n"", ""from math import cos,sin,pi\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    if n == 2:\n        print(1.)\n    else:\n        print(sin(pi/n)/(1-cos(pi/n)))"", ""import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(1/math.tan(math.pi/(2*n)))\n"", ""import random\nimport math\nLI = lambda: list(map(int,input().split()))\nMI = lambda: map(int,input().split())\nyes = lambda: print(\""Yes\"")\nno = lambda: print(\""No\"")\nI = lambda: list(input())\nJ = lambda x: \""\"".join(x)\nII = lambda: int(input())\nSI = lambda: input()\n#---khan17---template\nt = II()\nfor q in range(t):\n\tn = II()\n\tR = 1/(2*math.sin(math.pi/(2*n)))\n\tr = math.sqrt(R**2-0.25)\n\tprint(2*r)"", ""mod = 1000000007\neps = 10**-9\n\n\ndef main():\n    import sys\n    from math import sin, pi, cos\n    input = sys.stdin.readline\n\n    for _ in range(int(input())):\n        N = int(input())\n        NN = N*2\n\n        print(cos(pi / NN) / sin(pi / NN))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"", ""import math\nt = int(input())\n\n\nfor ti in range(t):\n\tn = int(input())\n\t# n is even\n\t# if n == 2:\n\t# \tprint(1)\n\ta = math.pi / (2*n)\n\tside = (1/math.tan(a))\n\tprint(side)\t\n\n\n# try:\n\n\t# raise Exception\n# except:\n\t# print(\""-1\"")\n\t\n\n\n# thenos.sort(key=lambda x: x[2], reverse=True)\n\n# int(math.log(max(numbers)+1,2))\n# 2**3 (power)\n\n\n"", ""import math as m\n\ndef fu(a):\n    return (a/180)*m.pi\n\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=n//2-1\n    b=180-360/(2*n)\n    s=0\n    for i in range(1,a+1):\n        s=s+m.cos(fu(i*b-(2*i-1)*90))\n    print(2*s+1)"", ""import sys\nfrom math import tan, pi\n\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\nfrom itertools import islice, cycle\n\n\ndef go():\n    n = int(input())\n    # a,b,c,d = map(int, input().split())\n    # a = list(map(int, input().split()))\n    # s = input()\n\n    return  1/(tan(pi/(2*n)))\n\n\n# x,s = map(int,input().split())\nt = int(input())\n# t = 1\nans = []\nfor _ in range(t):\n    # print(go())\n    ans.append(str(go()))\n#\nprint('\\n'.join(ans))\n"", ""import math\n\nt=int(input())\n\nwhile(t):\n\tt-=1\n\tn=int(input())\n\n\tang= math.pi/(2*n)\n\n\tans= 1/math.tan(ang)\n\tprint(ans)"", ""import math\n\n\ndef main():\n    n = int(input())\n    a = math.pi/(2*n)\n    x = 1 / (math.sin(a)) / 2\n    res = 2 * math.cos(a) * x\n    print(res)\n\n\nfor _ in range(int(input())):\n    main()\n"", ""import math\nfor nt in range(int(input())):\n\tn=int(input())\n\tm=2*n\n\ta=((m-2)*180)/m\n\ts=180-a\n\tt=s\n\tans=0\n\tfor i in range((n-2)//2):\n\t\t# print (t,ans)\n\t\tans+=(math.cos((t*math.pi)/180))\n\t\tt+=s\n\tprint(ans*2+1)\n"", ""import os\nimport sys\nif os.path.exists('/mnt/c/Users/Square/square/codeforces'):\n    f = iter(open('C.txt').readlines())\n    def input():\n        return next(f).strip()\n    # input = lambda: sys.stdin.readline().strip()  \nelse:\n    input = lambda: sys.stdin.readline().strip()\n\nfprint = lambda *args: print(*args, flush=True)\n\nimport math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(1.0 / math.tan(math.pi / 2 / n))"", ""from math import sin, pi\ndef solve():\n    n = int( input())\n    return(sin(((n-1)*pi/(2*n)))/sin(pi/(2*n)))\n    \ndef main():\n    t = int( input())\n    print(\""\\n\"".join( map( str, [ solve() for _ in range(t)])))\ndef __starting_point():\n    main()\n\n__starting_point()"", ""from math import *\nfor _ in range(int(input())):\n    n = 2 * int(input())\n    a = pi - (pi * (n - 2) / n)\n    ans = 0\n    for i in range(1, n // 4):\n        ans += cos(i * a)\n    print(2 * ans + 1)"", ""import math \nr=math.pi\nfor _ in range(int(input())):\n    N=int(input())\n    w=2*N\n    t=(math.cos(r/w))/(math.sin(r/w))\n    print(t)"", ""from math import tan, pi\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(1 / tan(pi / (2 * n)))\n"", ""import math\nq = int(input())\nfor _ in range(q):\n\tn = int(input())\n\tn*=2\n\tprint(math.tan(math.pi/2-math.pi/n))"", ""from math import sin,pi,radians\ndef solve():\n    n = int(input())*2\n    a = 180*(n-2)/n\n    bc = (180-a)/2\n    d = 0.5/sin(radians(bc))      \n    return round(2*(d**2-0.25)**0.5,8)                      \nfor _ in range(int(input())):\n    print(solve())"", ""import sys\nimport math\n# from collections import deque\n# import heapq\n# from math import inf\n# from math import gcd\n\n# print(help(deque))\n# 26\npprint = lambda s: print(' '.join(map(str, s)))\ninput = lambda: sys.stdin.readline().strip()\nipnut = input\n# a, b, c, d = map(int, input().split())\n# n = int(input())\n# e = list(map(int,input().split()))\nfor i in range(int(input())):\n    n = int(input())\n    print(1/math.tan(math.pi/(2*n)))\n\""\""\""\n10\n10 11 12 13 14 15 16 17 11 11\n\""\""\""\n"", ""T = int(input())\nimport math\nn = [0]*T\nm = [0]*T\na = [0]*T\np = [0]*T\n\n\nfor t in range(T):\n  n = 2*int(input())   #,m[t] = [int(i) for i in input().split(' ')]\n  #a = [int(i) for i in input().split(' ')]\n  out = 0\n  if n%4 == 0:\n    print((math.tan(math.pi/n))**-1)\n  else:\n    print((math.sin(math.pi/n))**-1)"", ""from math import pi, sin\n\nfor i in range(int(input())):\n    n = int(input())\n    a = 0\n    ans = 0\n    x = pi - pi * (n - 1) / n\n    for j in range(n - 1):\n        a += x\n        ans += sin(a)\n    print(ans)\n""]","{""inputs"": [""3\n2\n4\n200\n""], ""outputs"": [""1.000000000\n2.414213562\n127.321336469\n""]}"
https://codeforces.com/problemset/problem/1351/C,"data structures,implementation","Skier rides on a snowy field. Its movements can be described by a string of characters 'S', 'N', 'W', 'E' (which correspond to $1$ meter movement in the south, north, west or east direction respectively).\n\nIt is known that if he moves along a previously unvisited segment of a path (i.e. this segment of the path is visited the first time), then the time of such movement is $5$ seconds. If he rolls along previously visited segment of a path (i.e., this segment of the path has been covered by his path before), then it takes $1$ second.\n\nFind the skier's time to roll all the path.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \le t \le 10^4$) — the number of test cases in the input. Then $t$ test cases follow.\n\nEach set is given by one nonempty string of the characters 'S', 'N', 'W', 'E'. The length of the string does not exceed $10^5$ characters.\n\nThe sum of the lengths of $t$ given lines over all test cases in the input does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, print the desired path time in seconds.\n\n\n-----Example-----\nInput\n5\nNNN\nNS\nWWEN\nWWEE\nNWNWS\n\nOutput\n15\n6\n16\n12\n25","[""DIR = {\""N\"": (0, 1), \""S\"": (0, -1), \""W\"": (-1, 0), \""E\"": (1, 0)}\n\nfor t in range(int(input())):\n   path = input()\n   tracks = set()\n   x, y = 0, 0\n   time = 0\n   for char in path:\n      x1 = x + DIR[char][0]\n      y1 = y + DIR[char][1]\n      if (x, y, x1, y1) in tracks or (x1, y1, x, y) in tracks:\n         time += 1\n      else:\n         time += 5\n         tracks.add((x, y, x1, y1))\n      x, y = x1, y1\n   print(time)\n"", ""import sys\nINF = 10**20\nMOD = 10**9 + 7\nI = lambda:list(map(int,input().split()))\nfrom math import gcd\nfrom math import ceil\nfrom collections import defaultdict as dd, Counter\nfrom bisect import bisect_left as bl, bisect_right as br\n\nt, = I()\nwhile t:\n    t -= 1\n    s = input()\n    x, y = 0, 0\n    d = {'N': [0, 1], 'S': [0, -1], 'E': [1, 0], 'W': [-1, 0]}\n    ans = 0\n    v = dd(int)\n    for i in s:\n        a, b = x + d[i][0], y + d[i][1]\n        if (x, y, a, b) in v:\n            ans += 1\n        else:\n            ans += 5\n        v[(x, y, a, b)] = v[(a, b, x, y)] = 1\n        x, y = a, b\n    print(ans)"", ""def read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\nt = read_int()\nfor case_num in range(t):\n    path = input()\n    pos = (0, 0)\n    ans = 0\n    use = set()\n    d = {'N': (0, 1), 'S': (0, -1), 'W': (-1, 0), 'E': (1, 0)}\n    for c in path:\n        ci, cj = pos\n        di, dj = d[c]\n        ni, nj = ci + di, cj + dj\n        pos = (ni, nj)\n        if ((ci, cj), (ni, nj)) in use:\n            ans += 1\n        else:\n            ans += 5\n            use.add(((ci, cj), (ni, nj)))\n            use.add(((ni, nj), (ci, cj)))\n    print(ans)\n"", ""t=int(input())\nfor _ in range(t):\n    s=input()\n    aa={}\n    i=0\n    j=0\n    ans=0\n    for k in s:\n        if(k==\""N\""):\n            try:\n                x=aa[((i,j),(i,j-1))]\n                ans+=1\n            except:\n                ans+=5\n                aa[((i,j),(i,j-1))]=1\n            j-=1\n                \n        elif(k==\""E\""):\n            try:\n                x=aa[((i+1,j),(i,j))]\n                ans+=1\n            except:\n                ans+=5\n                aa[((i+1,j),(i,j))]=1\n            i+=1\n        elif(k==\""W\""):\n            try:\n                x=aa[((i,j),(i-1,j))]\n                ans+=1\n            except:\n                ans+=5\n                aa[((i,j),(i-1,j))]=1\n            i-=1\n        else:\n            try:\n                x=aa[((i,j+1),(i,j))]\n                ans+=1\n            except:\n                ans+=5\n                aa[((i,j+1),(i,j))]=1\n            j+=1\n    print(ans)\n    \n            \n        \n         \n    \n"", ""dir = {\n    'N': (0, 1),\n    'E': (1, 0),\n    'W': (-1, 0),\n    'S': (0, -1),\n}\n\nfor tc in range(int(input())):\n    cur, ans, vis = (0, 0), 0, set()\n    for c in input():\n        nxt = (cur[0] + dir[c][0], cur[1] + dir[c][1])\n\n        if (cur, nxt) in vis:\n            ans += 1\n        else:\n            ans += 5\n            vis.add((cur, nxt))\n            vis.add((nxt, cur))\n        cur = nxt\n\n    print(ans)\n"", ""t=int(input())\nfor tests in range(t):\n    S=input().strip()\n    ANS=0\n    Already=set()\n    X=0\n    Y=0\n    \n    for s in S:\n        if s==\""N\"":\n            if (X,Y,X,Y+1) in Already:\n                ANS+=1\n            else:\n                ANS+=5\n            Already.add((X,Y,X,Y+1))\n            Already.add((X,Y+1,X,Y))\n            Y+=1\n        elif s==\""S\"":\n            if (X,Y,X,Y-1) in Already:\n                ANS+=1\n            else:\n                ANS+=5\n            Already.add((X,Y,X,Y-1))\n            Already.add((X,Y-1,X,Y))\n            Y-=1\n        elif s==\""W\"":\n            if (X,Y,X-1,Y) in Already:\n                ANS+=1\n            else:\n                ANS+=5\n            Already.add((X,Y,X-1,Y))\n            Already.add((X-1,Y,X,Y))\n            X-=1\n        else:\n            if (X,Y,X+1,Y) in Already:\n                ANS+=1\n            else:\n                ANS+=5\n            Already.add((X,Y,X+1,Y))\n            Already.add((X+1,Y,X,Y))\n            X+=1\n\n    print(ANS)\n        \n"", ""for _ in range(int(input())):\n    s = input()\n    se = set()\n    total = 0\n    curr = [0, 0]\n    for e in s:\n        seg = ()\n        if e == \""E\"":\n            seg = (curr[0], curr[1], 0)\n            curr[0] += 1\n        elif e == \""N\"":\n            seg = (curr[0], curr[1], 1)\n            curr[1] += 1\n        elif e == \""W\"":\n            seg = (curr[0]-1, curr[1], 0)\n            curr[0] -= 1\n        elif e == \""S\"":\n            seg = (curr[0], curr[1]-1, 1)\n            curr[1] -= 1\n        \n        if seg in se:\n            total += 1\n        else:\n            total += 5\n            se.add(seg)\n    print(total)"", ""def list_int(): return list(map(int, input().split()))\ndef int_in(): return int(input())\ndef map_in(): return list(map(int, input().split()))\ndef list_in(): return input().split()\n\nt=int_in()\nfor _ in range(t):\n    v=set()\n    s=input()\n    x=0\n    y=0\n    c=0\n    for i in s:\n        #print(v, x, y, i)\n        if i=='N':\n            if (x,y,x+1,y) in v:\n                c+=1\n            elif (x+1,y, x,y) in v:\n                c+=1\n            else:\n                c+=5\n            v.add((x,y,x+1,y))\n            x+=1\n        elif i=='S':\n            if (x,y,x-1,y) in v:\n                c+=1\n            elif (x-1,y, x,y) in v:\n                c+=1\n            else:\n                c+=5\n            v.add((x,y,x-1,y))\n            x-=1\n        elif i=='W':\n            if (x,y,x,y+1) in v:\n                c+=1\n            elif (x, y+1, x,y) in v:\n                c+=1\n            else:\n                c+=5\n            v.add((x,y,x,y+1))\n            y+=1\n        else:\n            if (x,y,x,y-1) in v:\n                c+=1\n            elif (x, y-1, x,y) in v:\n                c+=1\n            else:\n                c+=5\n            v.add((x,y,x,y-1))\n            y-=1\n    print(c)\n"", ""import sys\nimport heapq as hq\n\nreadline = sys.stdin.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: list(map(int, readline().split()))\nnl = lambda: list(map(int, readline().split()))\n\n# eps = 10**-7\n\ndef solve():\n    s = ns()\n    d = dict()\n    cnt = 0\n    g = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    cur = (0, 0)\n    d[cur] = ''\n    for x in s:\n        for i in range(4):\n            if x == 'NEWS'[i]:\n                nx = (cur[0] + g[i][0], cur[1] + g[i][1])\n                if nx in d and x in d[cur]:\n                    cnt += 1\n                else:\n                    cnt += 5\n                    if nx not in d:\n                        d[nx] = ''\n                    d[nx] += 'NEWS'[3-i]\n                    d[cur] += x\n                cur = nx\n                break\n    print(cnt)\n\n\n# solve()\n\nT = ni()\nfor _ in range(T):\n    solve()\n"", ""for __ in range(int(input())):\n\ts=input()\n\tx=0\n\ty=0\n\tans=0\n\td={}\n\tfor i in range(len(s)):\n\t\tif(s[i]=='N'):\n\t\t\tif(d.get((x,y,x,y+1))==None):\n\t\t\t\tans+=5\n\t\t\t\td[(x,y,x,y+1)]=1\n\t\t\t\td[(x,y+1,x,y)]=1\n\t\t\telse:\n\t\t\t\tans+=1\n\t\t\ty=y+1\n\t\telif(s[i]=='S'):\n\t\t\tif(d.get((x,y,x,y-1))==None):\n\t\t\t\tans+=5\n\t\t\t\td[(x,y,x,y-1)]=1\n\t\t\t\td[(x,y-1,x,y)]=1\n\t\t\telse:\n\t\t\t\tans+=1\n\t\t\ty=y-1\n\t\telif(s[i]=='W'):\n\t\t\tif(d.get((x,y,x-1,y))==None):\n\t\t\t\tans+=5\n\t\t\t\td[(x,y,x-1,y)]=1\n\t\t\t\td[(x-1,y,x,y)]=1\n\t\t\telse:\n\t\t\t\tans+=1\n\t\t\tx=x-1\n\t\telse:\n\t\t\tif(d.get((x,y,x+1,y))==None):\n\t\t\t\tans+=5\n\t\t\t\td[(x,y,x+1,y)]=1\n\t\t\t\td[(x+1,y,x,y)]=1\n\t\t\telse:\n\t\t\t\tans+=1\n\t\t\tx=x+1\n\tprint(ans)"", ""# alpha = \""abcdefghijklmnopqrstuvwxyz\""\n# prime = 1000000007#998244353 \n# INF = 10000\n\n# from sys import stdout\n# from heapq import heappush, heappop\n# from collections import defaultdict\n# from collections import deque \n# import bisect \n\n# from math import sqrt    \n# from math import gcd\n# from math import log2\n\n# with open('input.in','r') as Reader:\n#     with open('output.out','w') as out:\n        # n = int(Reader.readline())\n\n    \n# print(len(arr))\n# print(arr[:10])\n\n\nt = int(input())\nfor test in range(t):\n    # n = int(input())\n    # n, m = list(map(int, input().split()))\n    # n2, m2 = list(map(int, input().split()))\n    s = input()\n    v = set()\n    start = 0\n    ans = 0\n    cur = [0, 0, 0, 0]\n    for i in s:\n        if i==\""N\"":\n            cur[2] += 1\n        elif i==\""S\"":\n            cur[2] -= 1\n        elif i == \""E\"":\n            cur[3] += 1\n        else:\n            cur[3] -= 1\n\n        key1 = str(cur)\n        key2 = str([cur[2],cur[3], cur[0], cur[1]])\n        if key1 in v:\n            ans += 1\n        else:\n            ans += 5\n        \n        v.add(key1)\n        v.add(key2)\n\n        cur[0] = cur[2]\n        cur[1] = cur[3]\n    print(ans)"", ""def new_pos(pos, step):\n\tif step == \""N\"":\n\t\tpos = pos[0], pos[1] + 1\n\telif step == \""S\"":\n\t\tpos = pos[0], pos[1] -1\n\telif step == \""W\"":\n\t\tpos = pos[0] + 1, pos[1]\n\telse:\n\t\tpos = pos[0] -1, pos[1]\n\treturn pos\n\n\nt = int(input())\nfor _ in range(t):\n\tans = 0\n\ts = input()\n\tused_hor = set()\n\tused_ver = set()\n\n\tpos = (0, 0)\n\tn = len(s)\n\tfor i in range(n):\n\t\tnext_st = new_pos(pos, s[i])\n\t\tway = (min(pos[0], next_st[0]), min(pos[1], next_st[1]))\n\n\t\tif s[i] == \""N\"" or s[i] == \""S\"":\n\t\t\tif way in used_ver:\n\t\t\t\tans += 1\n\t\t\telse:\n\t\t\t\tans += 5\n\t\t\tused_ver.add(way)\n\t\telse:\n\t\t\tif way in used_hor:\n\t\t\t\tans += 1\n\t\t\telse:\n\t\t\t\tans += 5\n\t\t\tused_hor.add(way)\n\t\tpos = next_st\n\t\t# print(\""used_hor\"", used_hor)\n\t\t# print(\""used_ver\"", used_ver)\n\tprint(ans)\n"", ""import sys\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\nfor _ in range(INT()):\n    S = input()\n\n    se = set()\n    h = w = 0\n    ans = 0\n    for s in S:\n        prev = (h, w)\n        if s == 'S':\n            h += 1\n        elif s == 'N':\n            h -= 1\n        elif s == 'W':\n            w -= 1\n        else:\n            w += 1\n        cur = (h, w)\n        key = (min(prev, cur), max(prev, cur))\n        if key in se:\n            ans += 1\n        else:\n            ans += 5\n            se.add(key)\n    print(ans)\n"", ""t = int(input())\nd = {'E': (1, 0), 'W':(-1, 0), 'N':(0, 1), 'S':(0, -1)}\nfor _ in range(t):\n    s = input()\n    time = 0\n    met = set()\n    x = y = 0\n    for c in s:\n        dx, dy = d[c]\n        xx = x + dx\n        yy = y + dy\n        if (x, y, xx, yy) in met or (xx, yy, x, y) in met:\n            time += 1\n        else:\n            time += 5\n            met.add((x, y, xx, yy))\n        x = xx\n        y = yy\n    print(time)"", ""import sys,bisect,string,math,time,functools,random\nfrom heapq import heappush,heappop,heapify\nfrom collections import deque,defaultdict,Counter\nfrom itertools import permutations,combinations,groupby\ndef Golf():*a,=map(int,open(0))\ndef I():return int(input())\ndef S_():return input()\ndef IS():return input().split()\ndef LS():return [i for i in input().split()]\ndef LI():return [int(i) for i in input().split()]\ndef LI_():return [int(i)-1 for i in input().split()]\ndef NI(n):return [int(input()) for i in range(n)]\ndef NI_(n):return [int(input())-1 for i in range(n)]\ndef StoLI():return [ord(i)-97 for i in input()]\ndef ItoS(n):return chr(n+97)\ndef LtoS(ls):return ''.join([chr(i+97) for i in ls])\ndef GI(V,E,ls=None,Directed=False,index=1):\n    org_inp=[];g=[[] for i in range(V)]\n    FromStdin=True if ls==None else False\n    for i in range(E):\n        if FromStdin:\n            inp=LI()\n            org_inp.append(inp)\n        else:\n            inp=ls[i]\n        if len(inp)==2:\n            a,b=inp;c=1\n        else:\n            a,b,c=inp\n        if index==1:a-=1;b-=1\n        aa=(a,c);bb=(b,c);g[a].append(bb)\n        if not Directed:g[b].append(aa)\n    return g,org_inp\ndef GGI(h,w,search=None,replacement_of_found='.',mp_def={'#':1,'.':0},boundary=1):\n#h,w,g,sg=GGI(h,w,search=['S','G'],replacement_of_found='.',mp_def={'#':1,'.':0}) # sample usage\n    mp=[boundary]*(w+2);found={}\n    for i in range(h):\n        s=input()\n        for char in search:\n            if char in s:\n                found[char]=((i+1)*(w+2)+s.index(char)+1)\n                mp_def[char]=mp_def[replacement_of_found]\n        mp+=[boundary]+[mp_def[j] for j in s]+[boundary]\n    mp+=[boundary]*(w+2)\n    return h+2,w+2,mp,found\ndef TI(n):return GI(n,n-1)\ndef bit_combination(k,n=2):\n    rt=[]\n    for tb in range(n**k):\n        s=[tb//(n**bt)%n for bt in range(k)];rt+=[s]\n    return rt\ndef show(*inp,end='\\n'):\n    if show_flg:print(*inp,end=end)\n\nYN=['YES','NO'];Yn=['Yes','No']\nmo=10**9+7\ninf=float('inf')\nl_alp=string.ascii_lowercase\n#sys.setrecursionlimit(10**7)\ninput=lambda: sys.stdin.readline().rstrip()\n\nclass Tree:\n    def __init__(self,inp_size=None,init=True):\n        self.LCA_init_stat=False\n        self.ETtable=[]\n        if init:\n            self.stdin(inp_size)\n        return\n\n    def stdin(self,inp_size=None,index=1):\n        if inp_size==None:\n            self.size=int(input())\n        else:\n            self.size=inp_size\n        self.edges,_=GI(self.size,self.size-1,index=index)\n        return\n    \n    def listin(self,ls,index=0):\n        self.size=len(ls)+1\n        self.edges,_=GI(self.size,self.size-1,ls,index=index)\n        return\n\n    def __str__(self):\n        return  str(self.edges)\n\n    def dfs(self,x,func=lambda prv,nx,dist:prv+dist,root_v=0):\n        q=deque()\n        q.append(x)\n        v=[-1]*self.size\n        v[x]=root_v\n        while q:\n            c=q.pop()\n            for nb,d in self.edges[c]:\n                if v[nb]==-1:\n                    q.append(nb)\n                    v[nb]=func(v[c],nb,d)\n        return v\n\n    def EulerTour(self,x):\n        q=deque()\n        q.append(x)\n        self.depth=[None]*self.size\n        self.depth[x]=0\n        self.ETtable=[]\n        self.ETdepth=[]\n        self.ETin=[-1]*self.size\n        self.ETout=[-1]*self.size\n        cnt=0\n        while q:\n            c=q.pop()\n            if c<0:\n                ce=~c\n            else:\n                ce=c\n                for nb,d in self.edges[ce]:\n                    if self.depth[nb]==None:\n                        q.append(~ce)\n                        q.append(nb)\n                        self.depth[nb]=self.depth[ce]+1\n            self.ETtable.append(ce)\n            self.ETdepth.append(self.depth[ce])\n            if self.ETin[ce]==-1:\n                self.ETin[ce]=cnt\n            else:\n                self.ETout[ce]=cnt\n            cnt+=1\n        return\n    \n    def LCA_init(self,root):\n        self.EulerTour(root)\n        self.st=SparseTable(self.ETdepth,init_func=min,init_idl=inf)\n        self.LCA_init_stat=True\n        return\n    \n    def LCA(self,root,x,y):\n        if self.LCA_init_stat==False:\n            self.LCA_init(root)\n        xin,xout=self.ETin[x],self.ETout[x]\n        yin,yout=self.ETin[y],self.ETout[y]\n        a=min(xin,yin)\n        b=max(xout,yout,xin,yin)\n        id_of_min_dep_in_et=self.st.query_id(a,b+1)\n        return self.ETtable[id_of_min_dep_in_et]\n\nclass SparseTable: # O(N log N) for init, O(1) for query(l,r)\n    def __init__(self,ls,init_func=min,init_idl=float('inf')):\n        self.func=init_func\n        self.idl=init_idl\n        self.size=len(ls)\n        self.N0=self.size.bit_length()\n        self.table=[ls[:]]\n        self.index=[list(range(self.size))]\n        self.lg=[0]*(self.size+1)\n        \n        for i in range(2,self.size+1):\n            self.lg[i]=self.lg[i>>1]+1\n\n        for i in range(self.N0):\n            tmp=[self.func(self.table[i][j],self.table[i][min(j+(1<<i),self.size-1)]) for j in range(self.size)]\n            tmp_id=[self.index[i][j] if self.table[i][j]==self.func(self.table[i][j],self.table[i][min(j+(1<<i),self.size-1)]) else self.index[i][min(j+(1<<i),self.size-1)] for j in range(self.size)]\n            self.table+=[tmp]\n            self.index+=[tmp_id]\n    \n    # return func of [l,r)\n    def query(self,l,r):\n        #N=(r-l).bit_length()-1\n        N=self.lg[r-l]\n        return self.func(self.table[N][l],self.table[N][r-(1<<N)])\n    \n    # return index of which val[i] = func of v among [l,r)\n    def query_id(self,l,r):\n        #N=(r-l).bit_length()-1\n        N=self.lg[r-l]\n        a,b=self.index[N][l],self.index[N][r-(1<<N)]\n        if self.table[0][a]==self.func(self.table[N][l],self.table[N][r-(1<<N)]):\n            b=a\n        return b\n    \n    def __str__(self):\n        return str(self.table[0])\n        \n    def print(self):\n        for i in self.table:\n            print(*i)\n\nshow_flg=False\nshow_flg=True\nans=0\nD='EWNS'\nm=[(1,0),(-1,0),(0,1),(0,-1)]\ndc=dict(zip(D,m))\n\nT=I()\nfor _ in range(T):\n    ans=0\n    s=input()\n    N=len(s)*2+5\n    x,y=(N,N)\n    p=x*N+y\n    f=dict()\n    for i in s:\n        dx,dy=dc[i]\n        nx=x+dx\n        ny=y+dy\n        X=min(x,nx)\n        Y=min(y,ny)\n        p=X*N+Y\n        p*=1 if dx==0 else -1\n        if p in f:\n            ans+=1\n        else:\n            ans+=5\n        \n        f[p]=1\n        x,y=nx,ny\n        #show(x-N,y-N,p,ans,f,N)\n    \n    \n    print(ans)\n\n"", ""t=int(input())\ndef an(x):\n    if x=='S':\n        return 'N'\n    if x=='N':\n        return 'S'\n    if x=='W':\n        return 'E'\n    if x=='E':\n        return 'W'\ndef mov(x,y):\n    if y=='S':\n        return (x[0]+1,x[1])\n    if y=='N':\n        return (x[0]-1,x[1])\n    if y=='W':\n        return (x[0],x[1]+1)\n    if y=='E':\n        return (x[0],x[1]-1)\nwhile t>0:\n    t-=1\n    li={}\n    s=input()\n    at=(0,0)\n    ans=0\n    for i in s:\n        nx=mov(at,i)\n        if li.get((at,i),False):\n            ans+=1\n        else:\n            ans+=5\n            li[(at,i)]=True\n            li[(nx,an(i))]=True\n        at=nx\n    print(ans)\n"", ""rilist = lambda :[int(i) for  i  in  input().split()]\nrlist = lambda :[i for  i  in  input().split()]\nrint = lambda: int(input())\nrfloat = lambda: float(input())\ndef pmat(mat):\n    for i in range(len(mat)):\n        a = ' '.join(map(str, mat[i]))\n        print(a)\n    print()\n\nd = {'N':(1,0),'S':(-1,0),'E':(0,1),'W':(0,-1)}\ndef solve(t):\n    path = input()\n    curr = (0, 0)\n    tmp = {}\n    res = 0\n    for p in path:\n        a,b = d[p]\n        next = (curr[0]+a,curr[1]+b)\n        key = sorted((curr, next), key=lambda x:x[0])\n        key = sorted(key, key=lambda x:x[1])\n        key = tuple(key)\n        curr = next\n        res += tmp.get( key ,5)\n        tmp[key]=1\n    print(res)\ntest = int(input())\nfor tc in range(test):\n    solve(tc+1)"", ""t = int(input())\nfor _ in range(t):\n    crd = set()\n    path = input()\n    x,y = 0,0\n    sum = 0\n    for c in path:\n        if c=='N':\n            if (x,y-1,x,y) in crd:\n                sum += 1\n            elif (x,y,x,y-1) in crd:\n                sum += 1\n            else:\n                crd.add((x,y-1, x, y))\n                sum += 5\n            x,y=x,y-1\n        elif c == 'S':\n            if (x,y+1,x,y) in crd:\n                sum += 1\n            elif (x,y,x,y+1) in crd:\n                sum += 1\n            else:\n                crd.add((x,y+1, x, y))\n                sum += 5\n            x,y=x,y+1\n        elif c=='W':\n            if (x+1,y,x,y) in crd:\n                sum += 1\n            elif (x,y,x+1,y) in crd:\n                sum += 1\n            else:\n                crd.add((x+1,y, x, y))\n                sum += 5\n            x,y=x+1,y\n        elif c=='E':\n            if (x-1,y,x,y) in crd:\n                sum += 1\n            elif (x,y,x-1,y) in crd:\n                sum += 1\n            else:\n                crd.add((x-1,y, x, y))\n                sum += 5\n            x,y = x-1,y\n    print(sum)"", ""from sys import stdin, exit\ninput = stdin.readline\n\ndef i(): return input()\ndef ii(): return int(input())\ndef iis(): return list(map(int, input().split()))\ndef liis():\treturn list(map(int, input().split()))\ndef print_array(a): print(\"" \"".join(map(str, a)))\n\nt = ii()\nfor _ in range(t):\n\ttime = 0\t\n\tx, y = 0, 0\n\tvisited = set()\n\ts = input()\n\tfor i in s:\n\t\told_x = x\n\t\told_y = y\n\t\tif i == 'N': y += 1\n\t\telif i == 'S': y -= 1\n\t\telif i == 'E': x += 1\n\t\telif i == 'W': x -= 1\n\t\telse: continue\t\n\t\tif (old_x, old_y, x, y) in visited:\n\t\t\ttime += 1\n\t\telse:\n\t\t\ttime += 5\n\t\n\t\tvisited.add((x, y, old_x, old_y))\n\t\tvisited.add((old_x, old_y, x, y))\n\t\n\tprint(time)\n"", ""t = int(input())\nfor _ in range(t):\n    s = input()\n    st = set()\n    x, y = 0, 0\n    ans = 0\n    for c in s:\n        if c == 'S':\n            if (x, y + 1) in st:\n                ans += 1\n            else:\n                ans += 5\n                st.add((x, y + 1))\n            y += 2\n        elif c == 'N':\n            if (x, y - 1) in st:\n                ans += 1\n            else:\n                ans += 5\n                st.add((x, y - 1))\n            y -= 2\n        elif c == 'W':\n            if (x + 1, y) in st:\n                ans += 1\n            else:\n                ans += 5\n                st.add((x + 1, y))\n            x += 2\n        else:\n            if (x - 1, y) in st:\n                ans += 1\n            else:\n                ans += 5\n                st.add((x - 1, y))\n            x -= 2\n    print(ans)\n"", ""from math import *\n\nfor zz in range(int(input())):\n    used = set()\n    ans = 0\n    pos = [0, 0]\n    a = 0\n    for i in range(35000):\n        a += 1\n    a = ans - 1\n    for x in input():\n        ppos = pos[:]\n        ppos = tuple(ppos)\n        if x == 'N':\n            pos[0] += 1\n        elif x == 'S':\n            pos[0] -= 1\n        elif x == 'W':\n            pos[1] -= 1\n        else:\n            pos[1] += 1\n        if ((ppos, tuple(pos)) in used) or ((tuple(pos), ppos) in used):\n            ans += 1\n        else:\n            used.add((ppos, tuple(pos)))\n            ans += 5\n    print(ans)\n\n#aaa\n"", ""import time\nimport sys\nreadline = sys.stdin.readline\n\nt = time.time()\nd = {'N': -10**9, 'S': 10**9, 'E': 1, 'W': -1}\nfor _ in range(int(input())):\n    s = readline().rstrip()\n    pos = 0\n    visited = set()\n    dist = 0\n    for c in s:\n        dest = pos + d[c]\n        dist += 1 if (pos, dest) in visited or (dest, pos) in visited else 5\n        visited.update(((pos, dest), (dest, pos)))\n        pos = dest\n\n    print(dist)\n\nwhile time.time() - t < 0.9:\n    pass\n""]","{\n  ""inputs"": [\n    ""5\nNNN\nNS\nWWEN\nWWEE\nNWNWS\n""\n  ],\n  ""outputs"": [\n    ""15\n6\n16\n12\n25\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1425/A,"games,greedy","Lately, Mr. Chanek frequently plays the game Arena of Greed. As the name implies, the game's goal is to find the greediest of them all, who will then be crowned king of Compfestnesia.\n\nThe game is played by two people taking turns, where Mr. Chanek takes the first turn. Initially, there is a treasure chest containing $N$ gold coins. The game ends if there are no more gold coins in the chest. In each turn, the players can make one of the following moves:  Take one gold coin from the chest.  Take half of the gold coins on the chest. This move is only available if the number of coins in the chest is even. \n\nBoth players will try to maximize the number of coins they have. Mr. Chanek asks your help to find the maximum number of coins he can get at the end of the game if both he and the opponent plays optimally.\n\n\n-----Input-----\n\nThe first line contains a single integer $T$ $(1 \le T \le 10^5)$ denotes the number of test cases.\n\nThe next $T$ lines each contain a single integer $N$ $(1 \le N \le 10^{18})$.\n\n\n-----Output-----\n\n$T$ lines, each line is the answer requested by Mr. Chanek.\n\n\n-----Example-----\nInput\n2\n5\n6\n\nOutput\n2\n4\n\n\n\n-----Note-----\n\nFor the first case, the game is as follows:   Mr. Chanek takes one coin.  The opponent takes two coins.  Mr. Chanek takes one coin.  The opponent takes one coin. \n\nFor the second case, the game is as follows:   Mr. Chanek takes three coins.  The opponent takes one coin.  Mr. Chanek takes one coin.  The opponent takes one coin.","[""from sys import stdin, stdout\nfrom collections import defaultdict\ninput = stdin.readline\nfor _ in range(int(input())):\n\tn = int(input())\n\tchanek = 0\n\tflag = 1\n\twhile n>0:\n\t\tif n%4==0 and n!=4:\n\t\t\tif flag:\n\t\t\t\tchanek += 1\n\t\t\t\tn-=1\n\t\t\t\tflag = 0\n\t\t\telse:\n\t\t\t\tn-=1\n\t\t\t\tflag = 1\n\t\telif n%2:\n\t\t\tif flag:\n\t\t\t\tchanek += 1\n\t\t\t\tn-=1\n\t\t\t\tflag = 0\n\t\t\telse:\n\t\t\t\tn-=1\n\t\t\t\tflag = 1\n\t\telse:\n\t\t\tif flag:\n\t\t\t\tchanek += n//2\n\t\t\t\tn//=2\n\t\t\t\tflag = 0\n\t\t\telse:\n\t\t\t\tn//=2\n\t\t\t\tflag = 1\n\tprint(chanek)"", ""from sys import stdin\ninput = stdin.readline\n\ndef max_pos_coins(n):\n\ta = 0\n\twhile n != 0:\n\t\tif n == 4:\n\t\t\ta += 3\n\t\t\tn = 0\n\t\t\tcontinue\n\t\tif n % 4 == 0:\n\t\t\tn -= 2\n\t\t\ta += 1\n\t\telse:\n\t\t\ta += n // 2\n\t\t\tn = n // 2 - 1\n\treturn a\n\nfor _ in range(int(input())):\n\tn = int(input())\n\tprint(max_pos_coins(n) if n % 2 == 0 else n - max_pos_coins(n - 1))\n"", ""import itertools\n\ndef f(x):\n    scores = [0, 0]\n    for i in itertools.cycle([0, 1]):\n\n        if x & 1:\n            scores[i] += 1\n            x -= 1\n\n        elif x == 0:\n            return scores[0]\n\n        elif x == 4 or x & 0b10:\n            x >>= 1\n            scores[i] += x\n        else:\n            x -= 1\n            scores[i] += 1\n\n\nN = int(input())\nresults = []\n\nimport sys\nfor n in map(f, map(int, sys.stdin.read().split())):\n    results.append(n)\n\nprint('\\n'.join(map(str, results)))""]","{\n  ""inputs"": [\n    ""2\n5\n6\n""\n  ],\n  ""outputs"": [\n    ""2\n4\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1443/C,"binary search,greedy,sortings","Petya is preparing for his birthday. He decided that there would be $n$ different dishes on the dinner table, numbered from $1$ to $n$. Since Petya doesn't like to cook, he wants to order these dishes in restaurants.\n\nUnfortunately, all dishes are prepared in different restaurants and therefore Petya needs to pick up his orders from $n$ different places. To speed up this process, he wants to order courier delivery at some restaurants. Thus, for each dish, there are two options for Petya how he can get it:  the dish will be delivered by a courier from the restaurant $i$, in this case the courier will arrive in $a_i$ minutes,  Petya goes to the restaurant $i$ on his own and picks up the dish, he will spend $b_i$ minutes on this. \n\nEach restaurant has its own couriers and they start delivering the order at the moment Petya leaves the house. In other words, all couriers work in parallel. Petya must visit all restaurants in which he has not chosen delivery, he does this consistently.\n\nFor example, if Petya wants to order $n = 4$ dishes and $a = [3, 7, 4, 5]$, and $b = [2, 1, 2, 4]$, then he can order delivery from the first and the fourth restaurant, and go to the second and third on your own. Then the courier of the first restaurant will bring the order in $3$ minutes, the courier of the fourth restaurant will bring the order in $5$ minutes, and Petya will pick up the remaining dishes in $1 + 2 = 3$ minutes. Thus, in $5$ minutes all the dishes will be at Petya's house.\n\nFind the minimum time after which all the dishes can be at Petya's home.\n\n\n-----Input-----\n\nThe first line contains one positive integer $t$ ($1 \le t \le 2 \cdot 10^5$) — the number of test cases. Then $t$ test cases follow.\n\nEach test case begins with a line containing one integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the number of dishes that Petya wants to order.\n\nThe second line of each test case contains $n$ integers $a_1 \ldots a_n$ ($1 \le a_i \le 10^9$) — the time of courier delivery of the dish with the number $i$.\n\nThe third line of each test case contains $n$ integers $b_1 \ldots b_n$ ($1 \le b_i \le 10^9$) — the time during which Petya will pick up the dish with the number $i$.\n\nThe sum of $n$ over all test cases does not exceed $2 \cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case output one integer — the minimum time after which all dishes can be at Petya's home.\n\n\n-----Example-----\nInput\n4\n4\n3 7 4 5\n2 1 2 4\n4\n1 2 3 4\n3 3 3 3\n2\n1 2\n10 10\n2\n10 10\n1 2\n\nOutput\n5\n3\n2\n3","[""def check(M):\n    sm = 0\n    for i in range(n):\n        if a[i] > M:\n            sm += b[i]\n    return sm <= M\n\n\ngans = []\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    L = 0\n    R = max(a)\n    while R - L > 1:\n        M = (L + R) // 2\n        if check(M):\n            R = M\n        else:\n            L = M\n    gans.append(R)\nprint(*gans, sep='\\n')\n"", ""def helper(m):\n\ts = 0\n\tfor i in range(len(a)):\n\t\tif a[i] > m:\n\t\t\ts += b[i]\n\treturn s <= m\n\nfor _ in range(int(input())):\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tb = list(map(int, input().split()))\n\tl, r = 1, 10**9\n\n\twhile l < r:\n\t\tmid = l + (r-l)//2\n\t\ttemp = helper(mid)\n\n\t\tif temp:\n\t\t\tr = mid\n\t\telse:\n\t\t\tl = mid+1\n\tprint(l)\n\n\n"", ""import sys\ninput=sys.stdin.readline\ndef f(x):\n    ans=0\n    for i in range(n):\n        if(a[i]<=x):\n            continue\n        ans+=b[i]\n    if(ans<=x):\n        return 1\n    return 0\ndef bsearch(l,r):\n    m=(l+r)//2\n    if(f(m)):\n        if(f(m-1)==0):\n            return m\n        return bsearch(l,m-1)\n    return bsearch(m+1,r)\nt=int(input())\nfor you in range(t):\n    n=int(input())\n    l=input().split()\n    a=[int(i) for i in l]\n    l=input().split()\n    b=[int(i) for i in l]\n    print(bsearch(0,10**9+5))\n"", ""for _ in range(int(input())):\n\t n = int(input())\n\t a = [*list(map(int, input().split()))]\n\t b = [*list(map(int, input().split()))]\n\t lo = 0\n\t hi = sum(a)\n\t while lo < hi:\n\t \tmid = (lo + hi) // 2\n\t \tif sum(y if x > mid else 0 for x,y in zip(a,b)) <= mid:\n\t \t\thi = mid\n\t \telse:\n\t \t\tlo = mid + 1\n\t print(lo)\n"", ""def f(aa, bb, target):\n    total = 0\n    for i in range(len(aa)):\n        if aa[i] > target:\n            total += bb[i]\n\n    return total <= target\n\n\nt = int(input())\n\nfor case in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    low = 1\n    high = 1000000000\n\n    while low < high:\n        mid = (low + high) // 2\n        res = f(a, b, mid)\n        if res:\n            # mid is possible\n            high = mid\n        else:\n            low = mid + 1\n\n    print(low)\n"", ""\""\""\""T=int(input())\nfor _ in range(0,T):\n    n=int(input())\n    a,b=map(int,input().split())\n    s=input()\n    s=[int(x) for x in input().split()]\n    for i in range(0,len(s)):\n        a,b=map(int,input().split())\""\""\""\n\n\n\nT=int(input())\nfor _ in range(0,T):\n    n=int(input())\n    a=[int(x) for x in input().split()]\n    b=[int(x) for x in input().split()]\n    low=0\n    high=max(a)\n    ans=max(a)\n    while(low<=high):\n        mid=(low+high)>>1\n        tot=0\n        for i in range(0,len(a)):\n            if(a[i]>mid):\n                tot+=b[i]\n\n        if(tot<=mid):\n            ans=min(ans, mid)\n            high=mid-1\n        else:\n            low=mid+1\n    print(ans)\n            \n"", ""\nimport sys\n\ndef input():\n    \n    return sys.stdin.readline()\n    \n    \nfor _ in range(int(input())):\n    \n    n = int(input())\n    \n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    \n    x = 10 ** 9\n    y = 0\n    while x > y + 1:\n        \n        z = (x + y) // 2\n        \n        t = 0\n        \n        for i in range(n):\n            if A[i] > z:\n                t += B[i]\n        \n        if t > z:\n            y = z\n        \n        else:\n            x = z\n            \n    print(x)\n    \n        \n"", ""import sys\nimport math\ndef II():\n\treturn int(sys.stdin.readline())\n \ndef LI():\n\treturn list(map(int, sys.stdin.readline().split()))\n \ndef MI():\n\treturn list(map(int, sys.stdin.readline().split()))\n \ndef SI():\n\treturn sys.stdin.readline().strip()\nt = II()\nfor q in range(t):\n\tn = II()\n\ta = LI()\n\tb = LI()\n\tb = sorted(enumerate(b), key=lambda x: a[x[0]])\n\tb = [i[1] for i in b]\n\ta.sort()\n\tx = []\n\ts = 0\n\tfor i in range(n-1,-1,-1):\n\t\ts+=b[i]\n\t\tx.append(s)\n\tx = x[:][::-1]\n\tans = s\n\tfor i in range(n):\n\t\tif i == n-1:\n\t\t\tans = min(ans,a[i])\n\t\telse:\n\t\t\tans = min(ans,max(a[i],x[i+1]))\n\tprint(ans)\n"", ""def read_generator():\n    while True:\n        tokens = input().split(' ')\n        for t in tokens:\n            yield t\n\nreader = read_generator()\n\ndef readword():\n    return next(reader)\n\ndef readint():\n    return int(next(reader))\n\ndef readfloat():\n    return float(next(reader))\n\ndef readline():\n    return input()\n\ndef solve(a, b, n):\n    l = 1\n    r = 10 ** 9\n\n    while r - l > 1:\n        t = (l + r) // 2\n        if possible(a, b, n, t):\n            r = t\n        else:\n            l = t\n\n    if possible(a, b, n, l):\n        return l\n    return r\n\n\ndef possible(a, b, n, t):\n    s = 0\n    for i in range(n):\n        if a[i] > t:\n            s += b[i]\n    return s <= t\n\ntests = readint()\n\nfor t in range(tests):\n    n = readint()\n    a = [readint() for _ in range(n)]\n    b = [readint() for _ in range(n)]\n    print(solve(a, b, n))"", ""import sys\ninput = iter(sys.stdin.read().splitlines()).__next__\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    times = list(zip(a, b))\n    times.sort()\n    # print(times)\n    pickup_time = sum(b)\n    best_time = pickup_time\n    for num_deliveries in range(1, n+1):\n        pickup_time -= times[num_deliveries-1][1]\n        delivery_time = times[num_deliveries-1][0]\n        best_time = min(best_time, max(pickup_time, delivery_time))\n        if pickup_time < delivery_time:\n            break\n    print(best_time)"", ""def xxx(x):\n    nonlocal a,b\n    res=0\n    for i in range(len(a)):\n        if a[i]>x:\n            res+=b[i]\n    if res<=x:\n        return True\n    else:\n        return False\n\nfor i in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    i1=0\n    i2=sum(b)\n    while i2-i1>1:\n        m=(i1+i2)//2\n        if xxx(m):\n            i2=m\n        else:\n            i1=m\n    print(i2)\n    \n        \n            \n        \n""]","{\n  ""inputs"": [\n    ""4\n4\n3 7 4 5\n2 1 2 4\n4\n1 2 3 4\n3 3 3 3\n2\n1 2\n10 10\n2\n10 10\n1 2\n""\n  ],\n  ""outputs"": [\n    ""5\n3\n2\n3\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1380/B,greedy,"Recently, you found a bot to play ""Rock paper scissors"" with. Unfortunately, the bot uses quite a simple algorithm to play: he has a string $s = s_1 s_2 \dots s_{n}$ of length $n$ where each letter is either R, S or P.\n\nWhile initializing, the bot is choosing a starting index $pos$ ($1 \le pos \le n$), and then it can play any number of rounds. In the first round, he chooses ""Rock"", ""Scissors"" or ""Paper"" based on the value of $s_{pos}$:   if $s_{pos}$ is equal to R the bot chooses ""Rock"";  if $s_{pos}$ is equal to S the bot chooses ""Scissors"";  if $s_{pos}$ is equal to P the bot chooses ""Paper""; \n\nIn the second round, the bot's choice is based on the value of $s_{pos + 1}$. In the third round — on $s_{pos + 2}$ and so on. After $s_n$ the bot returns to $s_1$ and continues his game.\n\nYou plan to play $n$ rounds and you've already figured out the string $s$ but still don't know what is the starting index $pos$. But since the bot's tactic is so boring, you've decided to find $n$ choices to each round to maximize the average number of wins.\n\nIn other words, let's suggest your choices are $c_1 c_2 \dots c_n$ and if the bot starts from index $pos$ then you'll win in $win(pos)$ rounds. Find $c_1 c_2 \dots c_n$ such that $\frac{win(1) + win(2) + \dots + win(n)}{n}$ is maximum possible.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \le t \le 1000$) — the number of test cases.\n\nNext $t$ lines contain test cases — one per line. The first and only line of each test case contains string $s = s_1 s_2 \dots s_{n}$ ($1 \le n \le 2 \cdot 10^5$; $s_i \in \{\text{R}, \text{S}, \text{P}\}$) — the string of the bot.\n\nIt's guaranteed that the total length of all strings in one test doesn't exceed $2 \cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, print $n$ choices $c_1 c_2 \dots c_n$ to maximize the average number of wins. Print them in the same manner as the string $s$.\n\nIf there are multiple optimal answers, print any of them.\n\n\n-----Example-----\nInput\n3\nRRRR\nRSP\nS\n\nOutput\nPPPP\nRSP\nR\n\n\n-----Note-----\n\nIn the first test case, the bot (wherever it starts) will always choose ""Rock"", so we can always choose ""Paper"". So, in any case, we will win all $n = 4$ rounds, so the average is also equal to $4$.\n\nIn the second test case:   if bot will start from $pos = 1$, then $(s_1, c_1)$ is draw, $(s_2, c_2)$ is draw and $(s_3, c_3)$ is draw, so $win(1) = 0$;  if bot will start from $pos = 2$, then $(s_2, c_1)$ is win, $(s_3, c_2)$ is win and $(s_1, c_3)$ is win, so $win(2) = 3$;  if bot will start from $pos = 3$, then $(s_3, c_1)$ is lose, $(s_1, c_2)$ is lose and $(s_2, c_3)$ is lose, so $win(3) = 0$;  The average is equal to $\frac{0 + 3 + 0}{3} = 1$ and it can be proven that it's the maximum possible average.\n\nA picture from Wikipedia explaining ""Rock paper scissors"" game:  $\beta$","[""#\n#    ------------------------------------------------\n#           ____          _     Generatered using\n#          / ___|        | |\n#         | |    __ _  __| | ___ _ __  ______ _\n#         | |   / _` |/ _` |/ _ \\ '_ \\|_  / _` |\n#         | |__| (_| | (_| |  __/ | | |/ / (_| |\n#          \\____\\____|\\____|\\___|_| |_/___\\____|\n#\n#      GNU Affero General Public License v3.0\n#    ------------------------------------------------\n#    Author   : prophet\n#    Created  : 2020-07-12 11:19:01.523119\n#    UUID     : aXsU7xuXyjk3Ky2f\n#    ------------------------------------------------\n#\nproduction = True\n\nimport sys, math, collections\n\ndef input(input_format = 0, multi = 0):\n\n    if multi > 0: return [input(input_format) for i in range(multi)]\n    else:\n        next_line = sys.stdin.readline()[:-1]\n\n        if input_format >= 10:\n            use_list = False\n            input_format = int(str(input_format)[-1])\n        else: use_list = True\n\n        if input_format == 0: formatted_input = [next_line]\n        elif input_format == 1: formatted_input = list(map(int, next_line.split()))\n        elif input_format == 2: formatted_input = list(map(float, next_line.split()))\n        elif input_format == 3: formatted_input = list(next_line)\n        elif input_format == 4: formatted_input = list(map(int, list(next_line)))\n        elif input_format == 5: formatted_input = next_line.split()\n        else: formatted_input = [next_line]\n\n        return formatted_input if use_list else formatted_input[0]\n\ndef out(output_line, output_format = 0, newline = True):\n\n    formatted_output = \""\""\n\n    if output_format == 0: formatted_output = str(output_line)\n    elif output_format == 1: formatted_output = \"" \"".join(map(str, output_line))\n    elif output_format == 2: formatted_output = \""\\n\"".join(map(str, output_line))\n\n    print(formatted_output, end = \""\\n\"" if newline else \""\"")\n\ndef log(*args):\n    if not production:\n        print(\""$$$\"", end = \""\"")\n        print(*args)\n\nenu = enumerate\n\nter = lambda a, b, c: b if a else c\n\nceil = lambda a, b: -(-a // b)\n\ndef mapl(iterable, format = 0):\n    \n    if format == 0: return list(map(int, iterable))\n    elif format == 1: return list(map(str, iterable))\n    elif format == 2: return list(map(list, iterable))\n#\n#   >>>>>>>>>>>>>>> START OF SOLUTION <<<<<<<<<<<<<<\n#\n\n\ndef solve():\n\n    s = input(3)\n\n    u = [0] * 3\n\n    for i in s:\n        if i == \""R\"":\n            u[0] += 1\n        elif i == \""P\"":\n            u[1] += 1\n        elif i == \""S\"":\n            u[2] += 1\n\n    log(u)\n    y = 0\n    p = 0\n\n    for i, j in enu(u):\n        if j > y:\n            y = j\n            p = i\n\n    if p == 0:\n        a = \""P\""\n    elif p == 1:\n        a = \""S\""\n    elif p == 2:\n        a = \""R\""\n\n    out(a * len(s))\n\n    return\n\n\nfor i in range(input(11)): solve()\n# solve()\n\n#\n#   >>>>>>>>>>>>>>>> END OF SOLUTION <<<<<<<<<<<<<<<\n#\n"", ""# import sys\nfrom collections import Counter\n# input = sys.stdin.readline\n\n# T = int(input())\n\n# for t in range(T):\n#     s = input()\n#     pos = set(range(len(s)))\n\n#     answer = ['']\n\n#     for i in range(len(s)):\n#         lets = [s[k] for k in pos]\n#         if not pos:\n#             break\n#         cc = Counter(lets)\n#         fl = cc.most_common()[0][0]\n#         choice = ''\n#         if fl == 'R':\n#             choice = 'P'\n#         elif fl == 'S':\n#             choice = 'R'\n#         else:\n#             choice = 'S'\n#         answer.append(choice)\n#         next_pos = set()\n#         for p in pos:\n#             if s[p] == choice:\n#                 np = p+1\n#                 if np >= len(s):\n#                     np = 0\n#                 next_pos.add(np)\n#         pos = next_pos\n\n#     while len(answer) < len(s):\n#         answer.append('R')\n\n#     print(''.join(answer))\n\nT = int(input())\n\nfor t in range(T):\n    s = input()\n    cc = Counter(s)\n    fl = cc.most_common()[0][0]\n    if fl == 'R':\n        choice = 'P'\n    elif fl == 'S':\n        choice = 'R'\n    else:\n        choice = 'S'\n    print(choice*len(s))\n"", ""T = int(input())\nfor _ in range(T):\n    s = input().strip()\n    rc = 0\n    sc = 0\n    pc = 0\n    for c in s:\n        if c == 'R':\n            rc += 1\n        elif c == 'S':\n            sc += 1\n        else:\n            pc += 1\n    if rc == max(rc,sc,pc):\n        print('P'*len(s))\n    elif sc == max(rc,sc,pc):\n        print('R'*len(s))\n    else:\n        print('S'*len(s))\n"", ""\nt=int(input())\nfor you in range(t):\n    s=input()\n    n=len(s)\n    numofr=0\n    numofs=0\n    numofp=0\n    for i in s:\n        if(i=='R'):\n            numofr+=1\n        elif(i=='S'):\n            numofs+=1\n        else:\n            numofp+=1\n    z=max(numofr,numofp,numofs)\n    if(z==numofr):\n        print('P'*n)\n    elif(z==numofs):\n        print('R'*n)\n    else:\n        print('S'*n)"", ""import sys\nimport math\nimport collections\nimport heapq\n\ndef set_debug(debug_mode=False):\n    if debug_mode:\n        fin = open('input.txt', 'r')\n        sys.stdin = fin\n\n\ndef int_input():\n    return list(map(int, input().split()))\n\n\ndef __starting_point():\n    # set_debug(True)\n\n    t = int(input())\n    # t = 1\n\n    for ti in range(1, t + 1):\n        # n = int(input())\n        s = input()\n\n        c = collections.Counter(s)\n        m = max(c['R'], c['S'], c['P'])\n\n        if m == c['R']:\n            print('P' * len(s))\n        elif m == c['S']:\n            print('R' * len(s))\n        else:\n            print('S' * len(s))\n\n__starting_point()"", ""t = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    cnt_r = s.count(\""R\"")\n    cnt_s = s.count(\""S\"")\n    cnt_p = s.count(\""P\"")\n    max_cnt = max(cnt_r, cnt_s, cnt_p)\n\n    if max_cnt == cnt_r:\n        print(\""P\"" * n)\n    elif max_cnt == cnt_s:\n        print(\""R\"" * n)\n    else:\n        print(\""S\"" * n)"", ""for _ in range(int(input())):\n\ts = input()\n\td = dict()\n\td['R'] = 0\n\td['S'] = 0\n\td['P'] = 0\n\td1 = dict()\n\td1['R'] = 'P'\n\td1['S'] = 'R'\n\td1['P'] = 'S'\n\tfor i in s:\n\t\td[i] += 1\n\tans = ''\n\tc = ''\n\tmx = -1\n\tfor i in list(d.items()):\n\t\tif mx < i[1]:\n\t\t\tc = d1[i[0]]\n\t\t\tmx = i[1]\n\tprint(c * len(s))\n"", ""import sys\n\nt = int(sys.stdin.readline().strip())\nfor _ in range(t):\n\ts = sys.stdin.readline().strip()\n\tx, y, z = s.count('R'), s.count('S'), s.count('P')\n\tif max(x, y, z) == x:\n\t\tprint('P'*len(s))\n\telif max(x, y, z) == y:\n\t\tprint('R'*len(s))\n\telse:\n\t\tprint('S'*len(s))"", ""#!/usr/bin/env python3\n\nfrom collections import Counter\n\ndef ans(S):\n\tfreqs = Counter(S)\n\targ_max = max(freqs, key=freqs.get)\n\td = {\n\t\t'R': 'P',\n\t\t'P': 'S',\n\t\t'S': 'R'\n\t}\n\treturn d[arg_max]*len(S)\n\nT = int(input())\nfor t in range(T):\n\tS = input()\n\tprint(ans(S))\n"", ""t=int(input())\nfor _ in range(t):\n  s=input()\n  rcount=0\n  pcount=0\n  scount=0\n  for i in range(len(s)):\n    if s[i]=='R':\n      rcount+=1\n    if s[i]=='S':\n      scount+=1\n    if s[i]=='P':\n      pcount+=1\n  ans=[]\n  if rcount>=pcount and rcount>=scount:\n    for i in range(len(s)):\n      ans.append('P')\n  elif scount>=pcount and scount>=rcount:\n    for i in range(len(s)):\n      ans.append('R')\n  else:\n    for i in range(len(s)):\n      ans.append('S')\n  print(''.join(ans))"", ""import sys\nimport math\ndef II():\n\treturn int(sys.stdin.readline())\n\ndef LI():\n\treturn list(map(int, sys.stdin.readline().split()))\n\ndef MI():\n\treturn map(int, sys.stdin.readline().split())\n\ndef SI():\n\treturn sys.stdin.readline().strip()\nt = II()\nfor q in range(t):\n\ts = SI()\n\tans = \""\""\n\td = {\""R\"":\""P\"",\""S\"":\""R\"",\""P\"":\""S\""}\n\tm = 0\n\tif s.count(\""R\"")>m:\n\t\tm = s.count(\""R\"")\n\t\tans = \""R\""\n\tif s.count(\""S\"")>m:\n\t\tm = s.count(\""S\"")\n\t\tans = \""S\""\n\tif s.count(\""P\"")>m:\n\t\tans = \""P\""\n\tans = d[ans]\n\tprint(ans*len(s))""]","{\n  ""inputs"": [\n    ""3\nRRRR\nRSP\nS\n""\n  ],\n  ""outputs"": [\n    ""PPPP\nPPP\nR\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1375/C,"constructive algorithms,data structures,greedy","You are given an array $a$ of length $n$, which initially is a permutation of numbers from $1$ to $n$. In one operation, you can choose an index $i$ ($1 \leq i < n$) such that $a_i < a_{i + 1}$, and remove either $a_i$ or $a_{i + 1}$ from the array (after the removal, the remaining parts are concatenated). \n\nFor example, if you have the array $[1, 3, 2]$, you can choose $i = 1$ (since $a_1 = 1 < a_2 = 3$), then either remove $a_1$ which gives the new array $[3, 2]$, or remove $a_2$ which gives the new array $[1, 2]$.\n\nIs it possible to make the length of this array equal to $1$ with these operations?\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \leq t \leq 2 \cdot 10^4$)  — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \leq n \leq 3 \cdot 10^5$)  — the length of the array.\n\nThe second line of each test case contains $n$ integers $a_1$, $a_2$, ..., $a_n$ ($1 \leq a_i \leq n$, $a_i$ are pairwise distinct) — elements of the array.\n\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed $3 \cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, output on a single line the word ""YES"" if it is possible to reduce the array to a single element using the aforementioned operation, or ""NO"" if it is impossible to do so.\n\n\n-----Example-----\nInput\n4\n3\n1 2 3\n4\n3 1 2 4\n3\n2 3 1\n6\n2 4 6 1 3 5\n\nOutput\nYES\nYES\nNO\nYES\n\n\n\n-----Note-----\n\nFor the first two test cases and the fourth test case, we can operate as follow (the bolded elements are the pair chosen for that operation):\n\n$[\text{1}, \textbf{2}, \textbf{3}] \rightarrow [\textbf{1}, \textbf{2}] \rightarrow [\text{1}]$\n\n$[\text{3}, \textbf{1}, \textbf{2}, \text{4}] \rightarrow [\text{3}, \textbf{1}, \textbf{4}] \rightarrow [\textbf{3}, \textbf{4}] \rightarrow [\text{4}]$\n\n$[\textbf{2}, \textbf{4}, \text{6}, \text{1}, \text{3}, \text{5}] \rightarrow [\textbf{4}, \textbf{6}, \text{1}, \text{3}, \text{5}] \rightarrow [\text{4}, \text{1}, \textbf{3}, \textbf{5}] \rightarrow [\text{4}, \textbf{1}, \textbf{5}] \rightarrow [\textbf{4}, \textbf{5}] \rightarrow [\text{4}]$","[""t = int(input())\nfor case in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if arr[-1] > arr[0]:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")"", ""for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n    if a[-1]>a[0]:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")"", ""for _ in range(int(input())):\n    #n, m = map(int, input().split())\n    n = int(input())\n    A = list(map(int, input().split()))\n    if A[0] <= A[-1]:\n        print('YES')\n    else:\n        print('NO')"", ""def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = []\n    for i in a:\n        while len(q) >= 2 and ((q[-2] < q[-1] and q[-1] > i) or (q[-2] > q[-1] and q[-1] < i)):\n            q.pop(-1)\n        q.append(i)\n    for i in range(len(q) - 1):\n        if q[i] > q[i + 1]:\n            print('NO')\n            return\n    print('YES')\n\nt = int(input())\nfor _ in range(t):\n    solve()"", ""import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n=int(input())\n    A=list(map(int,input().split()))\n\n    if A[0]<A[-1]:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n\n    \n"", ""''' author: Priyank Koul, PES University, Bengaluru'''\nfor _ in range(int(input())):\n\tx= int(input())\n\tli= list(map(int, input().strip().split()))\n\tfli=[]\n\tfor i in range(1,x):\n\t\tfli.append(li[i]-li[i-1])\n\tif(sum(fli)<0):\n\t\tprint(\""NO\"")\n\telse:\n\t\tprint(\""YES\"")\n\t\t\n\t\t\n\t\t\n\t\t\n"", ""def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a[0] < a[-1]:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n\n\ndef __starting_point():\n    t = int(input())\n    for i in range(t):\n        main()\n\n__starting_point()"", ""import sys\ninput = sys.stdin.readline\nfor f in range(int(input())):\n    n=int(input())\n    p=list(map(int,input().split()))\n    if p[0]>p[-1]:\n        print(\""NO\"")\n    else:\n        print(\""YES\"")"", ""def solve():\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    if arr[0] < arr[-1]:\n        print('YES')\n    else:\n        print('NO')\n\ndef __starting_point():\n    for _ in range(int(input())):\n        solve()\n__starting_point()"", ""\nT = int(input())\n\nfor i in range(T):\n  n = int(input())\n  #n,m = map(int, input().split())\n  #a,b = map(int, input().split())\n  a = [int(i) for i in input().split()]\n  #a = list(input())\n  \n  if a[-1]>a[0]:\n    print('YES')\n  else:\n    print('NO')\n\n\n""]","{\n  ""inputs"": [\n    ""4\n3\n1 2 3\n4\n3 1 2 4\n3\n2 3 1\n6\n2 4 6 1 3 5\n""\n  ],\n  ""outputs"": [\n    ""YES\nYES\nNO\nYES\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1369/C,"greedy,math,sortings,two pointers","Lee just became Master in Codeforces, and so, he went out to buy some gifts for his friends. He bought $n$ integers, now it's time to distribute them between his friends rationally...\n\nLee has $n$ integers $a_1, a_2, \ldots, a_n$ in his backpack and he has $k$ friends. Lee would like to distribute all integers in his backpack between his friends, such that the $i$-th friend will get exactly $w_i$ integers and each integer will be handed over to exactly one friend.\n\nLet's define the happiness of a friend as the sum of the maximum and the minimum integer he'll get.\n\nLee would like to make his friends as happy as possible, in other words, he'd like to maximize the sum of friends' happiness. Now he asks you to calculate the maximum sum of friends' happiness.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \le t \le 10^4$) — the number of test cases.\n\nNext $3t$ lines contain test cases — one per three lines.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \le n \le 2 \cdot 10^5$; $1 \le k \le n$) — the number of integers Lee has and the number of Lee's friends.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \ldots, a_n$ ($-10^9 \le a_i \le 10^9$) — the integers Lee has.\n\nThe third line contains $k$ integers $w_1, w_2, \ldots, w_k$ ($1 \le w_i \le n$; $w_1 + w_2 + \ldots + w_k = n$) — the number of integers Lee wants to give to each friend. \n\nIt's guaranteed that the sum of $n$ over test cases is less than or equal to $2 \cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, print a single integer — the maximum sum of happiness Lee can achieve.\n\n\n-----Example-----\nInput\n3\n4 2\n1 13 7 17\n1 3\n6 2\n10 10 10 10 11 11\n3 3\n4 4\n1000000000 1000000000 1000000000 1000000000\n1 1 1 1\n\nOutput\n48\n42\n8000000000\n\n\n\n-----Note-----\n\nIn the first test case, Lee should give the greatest integer to the first friend (his happiness will be $17 + 17$) and remaining integers to the second friend (his happiness will be $13 + 1$).\n\nIn the second test case, Lee should give $\{10, 10, 11\}$ to the first friend and to the second friend, so the total happiness will be equal to $(11 + 10) + (11 + 10)$\n\nIn the third test case, Lee has four friends and four integers, it doesn't matter how he distributes the integers between his friends.","[""def solve():\n    n, k = map(int,input().split())\n    lst1 = list(map(int,input().split()))\n    lst1.sort(reverse=True)\n    ind = 0\n    ans = 0\n    lst2 = list(map(int,input().split()))\n    lst2.sort()\n    for i in range(k):\n        lst2[i] -= 1\n        if lst2[i] == 0: ans += lst1[ind]\n        ans += lst1[ind]\n        ind += 1\n    lst2.sort()\n    for i in lst2:\n        if i != 0:\n            ind += i - 1\n            ans += lst1[ind]\n            ind += 1\n    print(ans)\nfor i in range(int(input())):\n    solve()"", ""for _ in range(int(input())):\n    n, k = list(map(int, input().split()))\n    # n = int(input())\n    arr = list(map(int, input().split()))\n    wrr = list(map(int, input().split()))\n    wrr.sort()\n    arr.sort()\n    ans = 0\n    for i in range(k):\n        ans += arr[-1]\n        wrr[i] -= 1\n        if wrr[i] == 0:\n            ans += arr[-1]\n        arr.pop()\n    i = 0\n    j = 0\n    wrr.sort(reverse=True)\n    while i < len(arr) and j < len(wrr):\n        if wrr[j] == 0:\n            j += 1\n        else:\n            ans += arr[i]\n            i += wrr[j]\n            wrr[j] = 0\n    print(ans)\n"", ""import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n,k=list(map(int,input().split()))\n    A=list(map(int,input().split()))\n    W=list(map(int,input().split()))\n\n    W.sort()\n    A.sort(reverse=True)\n\n    ANS=[[] for i in range(k)]\n\n    ind=0\n    for i in range(k):\n        ANS[i].append(A[ind])\n        ind+=1\n        W[i]-=1\n\n    for i in range(k):\n        while W[i]:\n            ANS[i].append(A[ind])\n            ind+=1\n            W[i]-=1\n\n    L=0\n    for ans in ANS:\n        L+=max(ans)+min(ans)\n    print(L)\n\n    \n"", ""from sys import stdin, stdout\nimport math\n\nt = int(stdin.readline())\nfor _ in range(t):\n    n, k = list(map(int, stdin.readline().split()))\n    a = list(map(int, stdin.readline().split()))\n    w = list(map(int, stdin.readline().split()))\n\n    a = sorted(a)\n    w = sorted(w)\n    st, end = 0, n-1\n    ans = 0\n    idx = 0\n    while idx < k and w[idx] == 1:\n        ans += a[end]*2\n        end -= 1\n        idx += 1\n    for i in range(k-1, idx-1, -1):\n        wi = w[i]\n        ans += a[st] + a[end]\n        end -= 1\n        st += wi-1\n    print(ans)\n"", ""ans = []\nfor _ in range(int(input())):\n    n, k = list(map(int, input().split()))\n    u = list(map(int, input().split()))\n    w = list(map(int, input().split()))\n    u.sort()\n    w.sort(reverse=1)\n    ansi = 0\n    ind = 0\n    for i in range(k):\n        if w[i] == 1:\n            ansi += u[n - k + i] * 2\n        else:\n            ansi += u[ind] + u[n - k + i]\n        ind += w[i] - 1\n    ans.append(ansi)\nprint('\\n'.join(map(str, ans)))\n    \n"", ""from collections import defaultdict as dd\nfrom collections import deque\nimport bisect\nimport heapq\n\ndef ri():\n    return int(input())\n\ndef rl():\n    return list(map(int, input().split()))\n\n\ndef solve():\n    n, k = rl()\n    A = rl()\n    W = rl()\n    A.sort()\n    W.sort(reverse=True)\n\n    lo, hi = 0, len(A) - 1\n    answer = 0\n    for w in W[::-1]:\n        if w != 1:\n            break\n        answer += 2 * A[hi]\n        hi -= 1\n\n    for w in W:\n        if w == 1:\n            break\n        else:\n            answer += A[hi] + A[lo]\n            lo += w - 1\n            hi -= 1\n    print (answer)\n\n\n\n\n\n\nmode = 'T'\n\nif mode == 'T':\n    t = ri()\n    for i in range(t):\n        solve()\nelse:\n    solve()\n"", ""import sys\nimport math\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    a,b = list(map(int, input().split()))\n    n = list(map(int, input().split()))\n    w = list(map(int, input().split()))\n    \n    n.sort(reverse=True)\n    w.sort()\n    \n    ans = 0\n    for j in range(b):\n        ans += n[j]\n        if w[j] == 1:\n            ans += n[j]\n        \n    ind = b - 1\n        \n    for j in range(b):\n        if w[j]>1:\n            ind += w[j] - 1\n            ans += n[ind]\n        \n    print(ans)"", ""import math\n\n\ndef main():\n    n, k = list(map(int, input().split()))\n    a = sorted(list(map(int, input().split())))\n    w = sorted(list(map(int, input().split())))\n    sm = 0\n    w = list(reversed(w))\n    for i in range(k):\n        r = a.pop()\n        w[k - 1 - i] -= 1\n        if w[k - 1 - i] == 0:\n            sm += 2*r\n        else:\n            sm += r\n    o = 0\n    for i in range(k):\n        if w[i] != 0:\n            sm += a[o]\n            o += w[i]\n    print(sm)\n\n\n\ndef __starting_point():\n    t = int(input())\n    for i in range(t):\n        main()\n\n__starting_point()"", ""t=int(input())\nfor i in range(t):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split()))\n    w=list(map(int,input().split()))\n    a.sort()\n    a.reverse()\n    w.sort()\n    ans=0\n    for i in range(k):\n        ans+=a[i]\n    pointer=k-1\n    for i in range(k):\n        if w[i]==1:\n            ans+=a[i]\n            continue\n        pointer+=w[i]-1\n        ans+=a[pointer]\n    print(ans)""]","{\n  ""inputs"": [\n    ""3\n4 2\n1 13 7 17\n1 3\n6 2\n10 10 10 10 11 11\n3 3\n4 4\n1000000000 1000000000 1000000000 1000000000\n1 1 1 1\n""\n  ],\n  ""outputs"": [\n    ""48\n42\n8000000000\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1348/B,"constructive algorithms,data structures,greedy,sortings","Phoenix loves beautiful arrays. An array is beautiful if all its subarrays of length $k$ have the same sum. A subarray of an array is any sequence of consecutive elements.\n\nPhoenix currently has an array $a$ of length $n$. He wants to insert some number of integers, possibly zero, into his array such that it becomes beautiful. The inserted integers must be between $1$ and $n$ inclusive. Integers may be inserted anywhere (even before the first or after the last element), and he is not trying to minimize the number of inserted integers.\n\n\n-----Input-----\n\nThe input consists of multiple test cases. The first line contains an integer $t$ ($1 \le t \le 50$) — the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \le k \le n \le 100$).\n\nThe second line of each test case contains $n$ space-separated integers ($1 \le a_i \le n$) — the array that Phoenix currently has. This array may or may not be already beautiful.\n\n\n-----Output-----\n\nFor each test case, if it is impossible to create a beautiful array, print -1. Otherwise, print two lines.\n\nThe first line should contain the length of the beautiful array $m$ ($n \le m \le 10^4$). You don't need to minimize $m$.\n\nThe second line should contain $m$ space-separated integers ($1 \le b_i \le n$) — a beautiful array that Phoenix can obtain after inserting some, possibly zero, integers into his array $a$. You may print integers that weren't originally in array $a$.\n\nIf there are multiple solutions, print any. It's guaranteed that if we can make array $a$ beautiful, we can always make it with resulting length no more than $10^4$.\n\n\n-----Example-----\nInput\n4\n4 2\n1 2 2 1\n4 3\n1 2 2 1\n3 2\n1 2 3\n4 4\n4 3 4 2\n\nOutput\n5\n1 2 1 2 1\n4\n1 2 2 1\n-1\n7\n4 3 2 1 4 3 2\n\n\n-----Note-----\n\nIn the first test case, we can make array $a$ beautiful by inserting the integer $1$ at index $3$ (in between the two existing $2$s). Now, all subarrays of length $k=2$ have the same sum $3$. There exists many other possible solutions, for example:   $2, 1, 2, 1, 2, 1$  $1, 2, 1, 2, 1, 2$ \n\nIn the second test case, the array is already beautiful: all subarrays of length $k=3$ have the same sum $5$.\n\nIn the third test case, it can be shown that we cannot insert numbers to make array $a$ beautiful.\n\nIn the fourth test case, the array $b$ shown is beautiful and all subarrays of length $k=4$ have the same sum $10$. There exist other solutions also.","[""t = int(input())\n\nfor _ in range(t):\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    if len(set(a)) > k:\n        print(-1)\n        continue\n    l = list(set(a))\n    l.extend([1]*(k - len(l)))\n\n    print(n*k)\n    for _ in range(n):\n        print(*l, end=\"" \"")\n    print()\n"", ""for i in range(int(input())):\n\tn, k=(int(j) for j in input().split())\n\ta=[int(j) for j in input().split()]\n\tmm=set(a)\n\tif(len(mm)>k):\n\t\tprint(\""-1\"", end=\"" \"")\n\telse:\n\t\tif(len(mm)<k):\n\t\t\tfor j in range(1, 101):\n\t\t\t\tif(j not in mm):\n\t\t\t\t\tmm.add(j)\n\t\t\t\tif(len(mm)==k):\n\t\t\t\t\tbreak\n\t\tprint(n*len(mm))\n\t\tfor j in range(n):\n\t\t\tprint(\"" \"".join(str(x) for x in mm), end=\"" \"")\n\tprint()"", ""import sys\n\nstdin = sys.stdin\n\nns = lambda: stdin.readline().rstrip()\nni = lambda: int(stdin.readline().rstrip())\nnm = lambda: list(map(int, stdin.readline().split()))\nnl = lambda: list(map(int, stdin.readline().split()))\n\ndef solve():\n    n, k = nm()\n    a = nl()\n    if k < len(set(a)):\n        print(-1)\n        return\n    f = list(set(a))\n    f += [1]*(k-len(f))\n    f *= n\n    print(len(f))\n    print(*f)\n    return\n\n\nt = ni()\nfor _ in range(t):\n    solve()\n"", ""for _ in range(int(input())):\n    n, k = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    if len(set(arr)) > k:\n        print(-1)\n    else:\n        result = []\n        temp = list(set(arr))\n        for i in range(1, n + 1):\n            if len(temp) == k:\n                break\n            if i not in temp:\n                temp.append(i)\n                \n        for i in range(len(arr)):\n            result.extend(temp)\n        print(len(result))\n        print(*result)\n        \n"", ""import collections\n\nt=int(input())\nfor _ in range(t):\n    n,k=map(int,input().split())\n    arr=list(map(int,input().split()))\n    if len(collections.Counter(arr))>k:\n        print(-1)\n    else:\n        cand=list(collections.Counter(arr).keys())\n        cnt=len(cand)\n        for i in range(1,n+1):\n            if cnt>=k:\n                break\n            else:\n                if i not in cand:\n                    cand.append(i)\n                    cnt+=1\n        print(cnt*n)\n        print(*(cand*n))"", ""from collections import Counter\n\ndef read_int():\n    return int(input())\n\n\ndef read_ints():\n    return map(int, input().split(' '))\n\n\nt = read_int()\nfor case_num in range(t):\n    n, k = read_ints()\n    a = list(read_ints())\n    cnt = Counter(a)\n    distinct = len(cnt)\n    if distinct > k:\n        print(-1)\n    else:\n        print(n * k)\n        s = set(cnt)\n        for i in range(1, n + 1):\n            if len(s) < k and not i in s:\n                s.add(i)\n        ans = list(s) * n\n        print(' '.join(map(str, ans)))"", ""import sys\nreadline = sys.stdin.readline\n\nT = int(readline())\nAns = []\nfor qu in range(T):\n    N, K = map(int, readline().split())\n    A = list(map(int, readline().split()))\n    SA = set(A)\n    if len(SA) <= K:\n        res = list(SA)\n        for i in range(1, N+1):\n            if len(res) == K:\n                break\n            if i not in SA:\n                res.append(i)\n        Ans.append(str(N*K))\n        Ans.append(' '.join(map(str, res*N)))\n    else:\n        Ans.append('-1')\nprint('\\n'.join(map(str, Ans)))"", ""import sys\n\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    if len(set(a)) > k:\n        print(-1)\n        continue\n    a = list(set(a))\n    a += [1] * (k - len(a))\n    print(k * n)\n    print(*(a * n))\n"", ""def Solve(nCase):\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    l = list(set(a))\n    p = len(l)\n    if p > k:\n        print(-1)\n        return\n    for i in range(k - p):\n        l.append(a[0])\n    ans = n * l\n    print(len(ans))\n    print(' '.join(str(x) for x in ans)) \n\n\nT = int(input())\nfor i in range(1, T + 1):\n    Solve(i)\n"", ""def beauty(n, k, array):\n    s = set(array)\n    \n    if len(s) > k:\n        print(-1)\n        return\n    \n    L = list(s)\n    L.extend([array[0]] * (k - len(s)))\n    L *= n\n    \n    print(len(L))\n    print(*L)\n    \nt = int(input())\nfor i in range(t):\n    n, k = list(map(int, input().split()))\n    array = list(map(int, input().split()))\n    beauty(n, k, array)\n"", ""q = int(input())\nfor _ in range(q):\n\tn,k = map(int,input().split())\n\tl = list(map(int,input().split()))\n\t#szukamy tak zeby okres byl k-1\n\tif k==1:\n\t\tif max(l) == min(l):\n\t\t\tprint(len(l))\n\t\t\tprint(*l)\n\t\telse:\n\t\t\tprint(-1)\n\telse:\n\t\tcyk = set()\n\t\tfor i in l:\n\t\t\tcyk.add(i)\n\t\tif len(cyk) > k:\n\t\t\tdasie = 0\n\t\telse:\n\t\t\tdasie = 1\n\t\tif dasie == 0:\n\t\t\tprint(-1)\n\t\telse:\n\t\t\ta = list(cyk)\n\t\t\twhile len(a) != k:\n\t\t\t\ta.append(l[0])\n\t\t\todp = n*a\n\t\t\tprint(len(odp))\n\t\t\tprint(*odp)""]","{\n  ""inputs"": [\n    ""4\n4 2\n1 2 2 1\n4 3\n1 2 2 1\n3 2\n1 2 3\n4 4\n4 3 4 2\n""\n  ],\n  ""outputs"": [\n    ""8\n1 2 1 2 1 2 1 2 \n12\n1 2 1 1 2 1 1 2 1 1 2 1 \n-1\n16\n2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 \n""\n  ]\n}"
https://codeforces.com/problemset/problem/1279/C,"data structures,implementation","Santa has to send presents to the kids. He has a large stack of $n$ presents, numbered from $1$ to $n$; the topmost present has number $a_1$, the next present is $a_2$, and so on; the bottom present has number $a_n$. All numbers are distinct.\n\nSanta has a list of $m$ distinct presents he has to send: $b_1$, $b_2$, ..., $b_m$. He will send them in the order they appear in the list.\n\nTo send a present, Santa has to find it in the stack by removing all presents above it, taking this present and returning all removed presents on top of the stack. So, if there are $k$ presents above the present Santa wants to send, it takes him $2k + 1$ seconds to do it. Fortunately, Santa can speed the whole process up — when he returns the presents to the stack, he may reorder them as he wishes (only those which were above the present he wanted to take; the presents below cannot be affected in any way).\n\nWhat is the minimum time required to send all of the presents, provided that Santa knows the whole list of presents he has to send and reorders the presents optimally? Santa cannot change the order of presents or interact with the stack of presents in any other way.\n\nYour program has to answer $t$ different test cases.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \le t \le 100$) — the number of test cases.\n\nThen the test cases follow, each represented by three lines.\n\nThe first line contains two integers $n$ and $m$ ($1 \le m \le n \le 10^5$) — the number of presents in the stack and the number of presents Santa wants to send, respectively.\n\nThe second line contains $n$ integers $a_1$, $a_2$, ..., $a_n$ ($1 \le a_i \le n$, all $a_i$ are unique) — the order of presents in the stack.\n\nThe third line contains $m$ integers $b_1$, $b_2$, ..., $b_m$ ($1 \le b_i \le n$, all $b_i$ are unique) — the ordered list of presents Santa has to send.\n\nThe sum of $n$ over all test cases does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case print one integer — the minimum number of seconds which Santa has to spend sending presents, if he reorders the presents optimally each time he returns them into the stack.\n\n\n-----Example-----\nInput\n2\n3 3\n3 1 2\n3 2 1\n7 2\n2 1 7 3 4 5 6\n3 1\n\nOutput\n5\n8","[""for tc in range(int(input())):\n    n,m = list(map(int, input().split()))\n    al = list(map(int, input().split()))\n    bl = list(map(int, input().split()))\n    aidx = {}\n    for i,e in enumerate(al):\n        aidx[e]=i\n    midx = -1\n    res = 0\n    for i,e in enumerate(bl):\n        idx = aidx[e]\n        if idx <= midx:\n            res += 1\n        else:\n            res += 2*(idx-i)+1\n        midx = max(midx, idx)\n    print(res)\n"", ""for q11 in range(int(input())):\n    n, m = list(map(int, input().split()))\n    a = [int(q)-1 for q in input().split()]\n    s = [int(q)-1 for q in input().split()]\n    d = [0]*n\n    for q in range(n):\n        d[a[q]] = q\n    max1, ans = -1, 0\n    for q in range(m):\n        if d[s[q]] > max1:\n            ans += 2*(d[s[q]]-q)+1\n            max1 = d[s[q]]\n        else:\n            ans += 1\n    print(ans)\n"", ""t = int(input())\n\nfor _ in range(t):\n    n, m = list(map(int, input().split(' ')))\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n\n    order = [0] * (n + 1)\n    for i in range(n):\n        order[a[i]] = i\n\n    pref_max = 0\n    ans = 0\n    for i in range(m):\n        if order[b[i]] < pref_max:\n            ans += 1\n        else:\n            pref_max = order[b[i]]\n            ans += 2 * (order[b[i]] - i) + 1\n\n    print(ans)"", ""T = int(input())\nfor t in range(T):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    for i in range(n):\n        a[i] -= 1\n    for j in range(m):\n        b[j] -= 1\n    \n    nummap = [0 for i in range(n)]\n    for i in range(n):\n        nummap[a[i]] = i\n    b = [nummap[b[i]] for i in range(m)]\n    \n    largest = -1\n    res = 0\n    for i in range(m):\n        if b[i] >= largest:\n            res += 2*(b[i]-i) + 1\n            largest = b[i]\n        else:\n            res += 1\n    print(res)"", ""from math import *\nimport os, sys\nfrom bisect import *\nfrom io import BytesIO\n\n#input = BytesIO(os.read(0, os.fstat(0).st_size)).readline\nsys.setrecursionlimit(10 ** 9)\n#sys.stdin = open(\""moobuzz.in\"", 'r')\n#sys.stdout = open(\""moobuzz.out\"", 'w')\n\nfor i in range(int(input())):\n\tn, m = list(map(int, input().split()))\n\ta = list(map(int, input().split()))\n\tb = list(map(int, input().split()))\n\td = {}\n\tfor i in range(n):\n\t\td[a[i]] = i\n\t\n\tans = 0\n\tmx = 0\n\tfor i in range(m):\n\t\tif mx < d[b[i]]:\n\t\t\tans += 2 * (d[b[i]] - i) + 1\n\t\t\tmx = d[b[i]]\n\t\telse:\n\t\t\tans += 1\n\tprint(ans)\n"", ""T = int(input())\nfor _ in range(T):\n    N, M = map(int, input().split())\n    A = [int(a)-1 for a in input().split()]\n    B = [int(a)-1 for a in input().split()]\n    \n    X = [0] * N\n    for i, a in enumerate(A):\n        X[a] = i\n    ans = 0\n    ma = -1\n    for i, b in enumerate(B):\n        ans += (X[b] - i) * 2 + 1 if X[b] > ma else 1\n        ma = max(ma, X[b])\n    print(ans)"", ""import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    memo = {}\n    for i in range(n):\n        memo[a[i]] = i\n    \n    max_num = -1\n    cnt = 0\n    ans = 0\n    for i in range(m):\n        if max_num < memo[b[i]]:\n            ans += 2 * (memo[b[i]] - cnt) + 1\n            max_num = memo[b[i]]\n            cnt += 1\n        else:\n            ans += 1\n            cnt += 1\n    print(ans)"", ""import sys\ninput=sys.stdin.readline\nt=int(input())\nfor _ in range(t):\n    n,m=list(map(int,input().split()))\n    aa=list(map(int,input().split()))\n    bb=list(map(int,input().split()))\n    ans=0\n    ind=0\n    vis=[0 for i in range(n)]\n    co=0\n    for i in range(m):\n        if vis[bb[i]-1]==1:\n            ans+=1\n            co-=1\n            continue\n        while ind<n:\n            co+=1\n            if aa[ind]==bb[i]:\n                vis[aa[ind]-1]=1\n                ind+=1\n                break\n            else:\n                \n                vis[aa[ind]-1]=1\n                ind+=1\n        co-=1\n        ans+=co*2+1\n       # print(ans,ind)\n        \n    print(ans)\n   # print()\n"", ""q = int(input())\nt = 1\nvis = [0] * 300000\nfor i in range(q):\n    n, m = [int(x) for x in input().split()]\n    a = [ int(x) for x in input().split()]\n    b =  [int(x) for x in input().split()]\n    arr = 0\n    i = 0\n    k = 0\n    for item in b:\n        if vis[item] == t:\n            arr += 1\n            k -= 1\n            continue\n        while i < n:\n            vis[a[i]] = t\n            if a[i] == item:\n                arr += (2 * k) + 1\n                i += 1\n                break\n            i += 1\n            k += 1\n    print(arr)\n    t += 1\n        \n"", ""for _ in range(int(input())):\n    n, m = list(map(int, input().split()))\n    topmost = set()\n    a = iter(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = 0\n    for bi in b:\n        if bi in topmost:\n            k = 0\n            topmost.remove(bi)\n        else:\n            k = len(topmost)\n            for ai in a:\n                if ai == bi:\n                    break\n                topmost.add(ai)\n                k += 1\n            else:\n                raise ValueError(f'No {bi} in a')\n        ans += 2 * k + 1\n    print(ans)\n"", ""import sys\nreadline = sys.stdin.readline\n\nT = int(readline())\n\nAns = [None]*T\n\nfor qu in range(T):\n    N, M = map(int, readline().split())\n    A = list(map(int, readline().split()))\n    B = list(map(int, readline().split()))\n    A.reverse()\n    \n    res = 0\n    seen = set()\n    for b in B:\n        res += 1\n        if b in seen: \n            seen.remove(b)\n            continue\n        res += 2*len(seen)\n        while A[-1] != b:\n            seen.add(A.pop())\n            res += 2\n        A.pop()\n    Ans[qu] = res\nprint('\\n'.join(map(str, Ans)))"", ""import sys\n\n# inf = open('input.txt', 'r')\n# reader = (map(int, line.split()) for line in inf)\nreader = (list(map(int, line.split())) for line in sys.stdin)\ninput = reader.__next__\n\nt, = input()\nfor _ in range(t):\n    n, m = input()\n    a = list(input())\n    b = list(input())\n    d = {el:i for i, el in enumerate(a)}\n    maxPos = d[b[0]]\n    ans = 2 * maxPos + 1\n    Nremoved = 1\n    for el in b[1:]:\n        pos = d[el]\n        if pos < maxPos:\n            ans += 1\n        else:\n            ans += 2 * (pos - Nremoved) + 1\n            maxPos = pos\n        Nremoved += 1\n    print(ans)\n        \n    \n    \n# inf.close()\n""]","{\n  ""inputs"": [\n    ""2\n3 3\n3 1 2\n3 2 1\n7 2\n2 1 7 3 4 5 6\n3 1\n""\n  ],\n  ""outputs"": [\n    ""5\n8\n""\n  ]\n}"
