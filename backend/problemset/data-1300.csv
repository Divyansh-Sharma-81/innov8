problems,tags,problem_statement,solution,input-output
https://codeforces.com/problemset/problem/1265/B,"data structures,implementation,math,two pointers","You are given a permutation $p=[p_1, p_2, \ldots, p_n]$ of integers from $1$ to $n$. Let's call the number $m$ ($1 \le m \le n$) beautiful, if there exists two indices $l, r$ ($1 \le l \le r \le n$), such that the numbers $[p_l, p_{l+1}, \ldots, p_r]$ is a permutation of numbers $1, 2, \ldots, m$.\n\nFor example, let $p = [4, 5, 1, 3, 2, 6]$. In this case, the numbers $1, 3, 5, 6$ are beautiful and $2, 4$ are not. It is because:  if $l = 3$ and $r = 3$ we will have a permutation $[1]$ for $m = 1$;  if $l = 3$ and $r = 5$ we will have a permutation $[1, 3, 2]$ for $m = 3$;  if $l = 1$ and $r = 5$ we will have a permutation $[4, 5, 1, 3, 2]$ for $m = 5$;  if $l = 1$ and $r = 6$ we will have a permutation $[4, 5, 1, 3, 2, 6]$ for $m = 6$;  it is impossible to take some $l$ and $r$, such that $[p_l, p_{l+1}, \ldots, p_r]$ is a permutation of numbers $1, 2, \ldots, m$ for $m = 2$ and for $m = 4$. \n\nYou are given a permutation $p=[p_1, p_2, \ldots, p_n]$. For all $m$ ($1 \le m \le n$) determine if it is a beautiful number or not.\n\n\n-----Input-----\n\nThe first line contains the only integer $t$ ($1 \le t \le 1000$)  — the number of test cases in the input. The next lines contain the description of test cases.\n\nThe first line of a test case contains a number $n$ ($1 \le n \le 2 \cdot 10^5$) — the length of the given permutation $p$. The next line contains $n$ integers $p_1, p_2, \ldots, p_n$ ($1 \le p_i \le n$, all $p_i$ are different) — the given permutation $p$.\n\nIt is guaranteed, that the sum of $n$ from all test cases in the input doesn't exceed $2 \cdot 10^5$.\n\n\n-----Output-----\n\nPrint $t$ lines — the answers to test cases in the order they are given in the input. \n\nThe answer to a test case is the string of length $n$, there the $i$-th character is equal to $1$ if $i$ is a beautiful number and is equal to $0$ if $i$ is not a beautiful number.\n\n\n-----Example-----\nInput\n3\n6\n4 5 1 3 2 6\n5\n5 3 1 2 4\n4\n1 4 3 2\n\nOutput\n101011\n11111\n1001\n\n\n\n-----Note-----\n\nThe first test case is described in the problem statement.\n\nIn the second test case all numbers from $1$ to $5$ are beautiful:  if $l = 3$ and $r = 3$ we will have a permutation $[1]$ for $m = 1$;  if $l = 3$ and $r = 4$ we will have a permutation $[1, 2]$ for $m = 2$;  if $l = 2$ and $r = 4$ we will have a permutation $[3, 1, 2]$ for $m = 3$;  if $l = 2$ and $r = 5$ we will have a permutation $[3, 1, 2, 4]$ for $m = 4$;  if $l = 1$ and $r = 5$ we will have a permutation $[5, 3, 1, 2, 4]$ for $m = 5$.","[""for _ in range(int(input())):\n    input()\n    nums = [int(x) for x in input().split()]\n    new_ar = list(zip(nums,[i for i in range(len(nums))]))\n    new_ar.sort()\n    \n    maxx = new_ar[0][1]\n    minn = new_ar[0][1]\n    s=\""1\""\n    for j in range(1,len(new_ar)):\n        if(new_ar[j][1]>maxx):\n            maxx = new_ar[j][1]\n        if(new_ar[j][1]<minn):\n            minn = new_ar[j][1]\n        if(maxx-minn<j+1):\n            s+=\""1\""\n        else:\n            s+=\""0\""\n        \n    print(s)"", ""import sys\ndef I():\n        return sys.stdin.readline().rstrip()\n\nfor _ in range(int(I())):\n    n = int(I())\n    l = list(map(int,I().split()))\n    r = list(range(n))\n    r.sort(key=lambda x: l[x])\n    mn, mx = None, None\n    for i in range(n):\n        if mn is None:\n            mn = mx = r[ i ]\n        else:\n            mn = min( mn, r[ i ] )\n            mx = max( mx, r[ i ] )\n        l[ i ] = '1' if mx - mn == i else '0'\n    print(\""\"".join(l))\n"", ""from sys import stdin\ndef rl():\n    return [int(w) for w in stdin.readline().split()]\n\nk, = rl()\nfor _ in range(k):\n    n, = rl()\n    p = rl()\n\n    q = [0] * n\n    for i, x in enumerate(p):\n        q[x-1] = i\n\n    l = r = q[0]\n    m = []\n    for k, i in enumerate(q):\n        if i < l:\n            l = i\n        elif i > r:\n            r = i\n        m.append('1' if r - l == k else '0')\n    print(''.join(m))\n"", ""# @author \n\nimport sys\n\nclass BBeautifulNumbers:\n    def solve(self):\n        for _ in range(int(input())):\n            n = int(input())\n            p = [int(_) - 1 for _ in input().split()]\n\n            mn_index = [float('inf')] * n\n            mx_index = [-float('inf')] * n\n            prev = [0] * n\n            for i in range(n):\n                prev[p[i]] = i\n            # print(prev)\n            for i in range(n):\n                mn_index[i] = min(mn_index[i - 1], prev[i])\n                mx_index[i] = max(mx_index[i - 1], prev[i])\n\n            ans = ['0'] * n\n            # print(mn_index, mx_index)\n            for i in range(n):\n                l, r = mn_index[i], mx_index[i]\n                ans[i] = '1' if r - l + 1 == i + 1 else '0'\n\n            print(''.join(ans))\n\nsolver = BBeautifulNumbers()\ninput = sys.stdin.readline\n\nsolver.solve()\n"", ""def f(L):\n    n=len(L)\n    M=[0]*(len(L)+1)\n    for i in range(len(L)):\n        M[L[i]]=i\n    s=[0]*len(L)\n    s[0]=1\n    sumof=M[1]\n    mx=M[1]\n    mi=M[1]\n    for i in range(2,n):\n        k=M[i]\n        if k>mx:mx=k\n        if k<mi:mi=k\n        sumof+=k\n        if sumof==(mx*(mx+1))//2-((mi-1)*mi)//2:\n            s[i-1]=1\n    s[n-1]=1\n    return s\nfor i in ' '*int(input()):\n    n=int(input())\n    s=f(list(map(int,input().split())))\n    for i in s:print(i,end='')\n    print()"", ""t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    pos=[0 for i in range(n+1)]\n    for i in range(n):\n        pos[a[i]]=i\n    ans=[-1 for i in range(n)]\n    ans[0]=1\n    l,r=pos[1],pos[1]\n    for i in range(2,n+1):\n        l=min(l,pos[i])\n        r=max(r,pos[i])\n        if r-l==i-1:\n            ans[i-1]=1\n        else:\n            ans[i-1]=0\n    print(\""\"".join(map(str,ans)))"", ""t = int(input())\n\nfor t_i in range(t):\n    n = int(input())\n    P = input().split()\n    l, r = -1, -1\n    for i in range(n):\n        P[i] = int(P[i])\n        if P[i] == 1:\n            l = i\n            r = i\n    max_seen = 1\n    beaut = ['1']\n    for _ in range(n - 1):\n        if l == 0:\n            l_cand = 10**8\n        else:\n            l_cand = P[l - 1]\n        if r == n - 1:\n            r_cand = 10**8\n        else:\n            r_cand = P[r + 1]\n        if r_cand > l_cand:\n            l -= 1\n            max_seen = max(l_cand, max_seen)\n        else:\n            r += 1\n            max_seen = max(r_cand, max_seen)\n        beaut.append('1' if max_seen == r - l + 1 else '0')\n    print(''.join(beaut))\n            \n"", ""for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n    d = {}\n    for i in range(n):\n        d[a[i]] = i\n\n    ans = ''\n    mn = 200001\n    mx = -1\n    for i in range(1,n+1):\n        if(mn > d[i]):\n            mn = d[i]\n        if(mx < d[i]):\n            mx = d[i]\n\n        \n        if(mx - mn + 1 > i):\n            ans += '0'\n\n        else:\n            ans += '1'\n\n\n    print(ans)\n"", ""from math import *\nfrom collections import *\nimport sys\nsys.setrecursionlimit(10**9)\n\nt = int(input())\nfor y in range(t):\n\tn = int(input())\n\ta = list(map(int,input().split()))\n\tans = ['1']\n\tle = 1\n\tl = a.index(1)\n\tl -= 1\n\tr = l + 2\n\tm = 1\n\twhile(le < n):\n\t\tif(l != -1 and r != n):\n\t\t\tif(a[l] > a[r]):\n\t\t\t\tm = max(m,a[r])\n\t\t\t\tr += 1\n\t\t\t\tif(m == le+1):\n\t\t\t\t\tans.append('1')\n\t\t\t\telse:\n\t\t\t\t\tans.append('0')\n\t\t\telse:\n\t\t\t\tm = max(m,a[l])\n\t\t\t\tl -= 1\n\t\t\t\tif(m == le+1):\n\t\t\t\t\tans.append('1')\n\t\t\t\telse:\n\t\t\t\t\tans.append('0')\n\t\telif(l != -1):\n\t\t\tm = max(m,a[l])\n\t\t\tl -= 1\n\t\t\tif(m == le+1):\n\t\t\t\tans.append('1')\n\t\t\telse:\n\t\t\t\tans.append('0')\n\t\telse:\n\t\t\tm = max(m,a[r])\n\t\t\tr += 1\n\t\t\tif(m == le+1):\n\t\t\t\tans.append('1')\n\t\t\telse:\n\t\t\t\tans.append('0')\n\t\tle += 1\n\tprint(\""\"".join(ans))\n\n\n\n"", ""t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pos = [0]*(n+1)\n    for i, x in enumerate(a):\n        pos[x] = i\n\n    used = [0, 1] + [0]*n\n    ans = [0]*n\n    l, r = pos[1], pos[1]\n    count = 1\n\n    for x in range(1, n+1):\n        if not used[x]:\n            if pos[x] < l:\n                while not used[x]:\n                    l -= 1\n                    used[a[l]] = 1\n                    count += 1\n            else:\n                while not used[x]:\n                    r += 1\n                    used[a[r]] = 1\n                    count += 1\n\n        if count == x:\n            ans[x-1] = 1\n\n    print(*ans, sep='')"", ""def mi():\n    return map(int, input().split())\n\n'''\n3\n6\n4 5 1 3 2 6\n5\n5 3 1 2 4\n4\n1 4 3 2\n3\n6\n4 5 1 3 2 6\n5\n5 3 1 2 4\n4\n1 4 3 2\n'''\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(mi())\n    t = a.index(1)\n    dist = [0]*(n+1)\n    dic = [0]*n\n    for i in range(n):\n        dist[a[i]] = abs(t-i)\n        dic[i] = [a[i], i]\n    dic.sort()\n    lm = dic[0][1]\n    rm = dic[0][1]\n    print (1, end = '')\n    for i in range(1, n):\n        if (dic[i][1]<lm):\n            lm = dic[i][1]\n        if (dic[i][1]>rm):\n            rm = dic[i][1]\n        if rm-lm<i+1:\n            print (1, end = '')\n        else:\n            print (0, end = '')\n    print()"", ""from sys import stdin\ninput = stdin.readline\n\n\nt = int(input())\n\nfor _ in range(t):\n\n    n = int(input())\n    a = list(map(int,input().split()))\n\n    start = 0\n    for i,v in enumerate(a):\n        if v == 1:\n            start = i\n            break\n    ans = [0]*-~n\n    ans[n-1] = 1\n    mx = 1\n    l = start\n    r = start\n\n    def move(x):\n        nonlocal l,r,mx\n        if x:\n            mx = max(a[r+1],mx)\n            r += 1\n        else:\n            mx = max(a[l-1],mx)\n            l -= 1\n\n\n    while mx < n:\n        if mx == r-l+1:\n            ans[mx-1] = 1\n        if l == 0:\n            move(1)\n        elif r == n-1:\n            move(0)\n        else:\n            if a[l-1] > a[r+1]:\n                move(1)\n            else:\n                move(0)\n\n    print(\""\"".join(map(str,ans[:n])))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"", ""#!/usr/bin/env python3\nfrom itertools import combinations\nimport sys\ninput = sys.stdin.readline\nINF = 10**9\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [INF] + [int(item) for item in input().split()] + [INF]\n    ans = [1]\n    l = r = a.index(1)\n    max_val = 1\n    for i in range(2, n+1):\n        if i == max(max_val, a[l-1]):\n            ans.append(1)\n            l -= 1\n            max_val = i\n        elif i == max(max_val, a[r+1]):\n            ans.append(1)\n            r += 1\n            max_val = i\n        elif a[l-1] < a[r+1]:\n            ans.append(0)\n            max_val = max(max_val, a[l-1])\n            l -= 1\n        else:\n            ans.append(0)\n            max_val = max(max_val, a[r+1])\n            r += 1\n    print(\""\"".join([str(item) for item in ans]))"", ""for j in range(int(input())):\n    n = int(input())\n    c = list(map(int,input().split()))\n    index = [0]*n\n    for i in range(n):\n        index[c[i]-1]=i\n    ma = 0\n    mi = n\n    ans = ['0']*n\n    # print(index)\n    for k in range(n):\n        ma = max(index[k],ma)\n        mi = min(index[k],mi)\n        #print(k,mr,index[k]-index[0])\n        if ma-mi<=k:\n            ans[k]='1'\n    print(''.join(ans))"", ""q=int(input())\nfor t in range(q):\n    n=int(input())\n    a=list(map(int,input().split()))\n    ma=1\n    ans='1'\n    uk1=a.index(1)\n    uk2=uk1\n    while uk2-uk1+1!=n:\n        if uk2==n-1:\n            uk1-=1\n            ma=max(ma,a[uk1])\n            if ma==uk2-uk1+1:\n                ans=ans+'1'\n            else:\n                ans=ans+'0'\n        else:\n            if uk1==0:\n                uk2+=1\n                ma=max(ma,a[uk2])\n                if ma == uk2 - uk1 + 1:\n                    ans = ans + '1'\n                else:\n                    ans=ans+'0'\n            else:\n                if a[uk1-1]<a[uk2+1]:\n                    uk1 -= 1\n                    ma = max(ma, a[uk1])\n                    if ma == uk2 - uk1 + 1:\n                        ans = ans + '1'\n                    else:\n                        ans = ans + '0'\n                else:\n                    uk2 += 1\n                    ma = max(ma, a[uk2])\n                    if ma == uk2 - uk1 + 1:\n                        ans = ans + '1'\n                    else:\n                        ans = ans + '0'\n    print(ans)"", ""\nlpn = int(input())\n\nfor loop in range(lpn):\n\n    n = int(input())\n    p = list(map(int,input().split()))\n\n    for i in range(n):\n\n        if p[i] == 1:\n            oneind = i\n            break\n\n    l = oneind\n    r = oneind\n    nmax = 1\n    ans = [0] * n\n    ans[0] = 1\n\n    for i in range(n-1):\n\n        if l == 0 or( r != n-1 and p[l-1] > p[r+1]):\n            r += 1\n            nmax = max(nmax,p[r])\n            if i+2 == nmax:\n                ans[i+1] = 1 \n        else:\n            l -= 1\n            nmax = max(nmax,p[l])\n\n            if i+2 == nmax:\n                ans[i+1] = 1 \n            \n    print(\""\"".join(map(str,ans)))\n"", ""t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    ans = ['0'] * n\n    ans[0] = '1'\n    ans[-1] = '1'\n    l = 0\n    r = n - 1\n    now = n\n    while (r - l) > 1:\n        if a[r] > now:\n            r -= 1\n            continue\n        if a[l] > now:\n            l += 1\n            continue\n        if (r - l + 1) == now:\n            ans[r - l] = '1'\n        now -= 1\n    if (r - l  + 1) == now:\n        ans[r - l] = '1'\n    print(''.join(ans))\n\n\n"", ""# https://codeforces.com/contest/1265/problem/B\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    idx = [0] * n\n    for i in range(n):\n        idx[p[i]-1] = i\n    ans = ''\n    left = n\n    right = 0\n    for i in range(n):\n        left = min(left, idx[i])\n        right = max(right, idx[i])\n        if right - left == i:\n            ans += '1'\n        else:\n            ans += '0'\n    return ans\n\nt = int(input())\nfor i in range(t):\n    print(main())\n"", ""def f():\n    n = int(input())\n    A = [int(s) for s in input().split()]\n    ans = [0]*n\n    ans[0] = 1\n    ans[n-1] = 1\n    i = 0\n    j = n-1\n    outMin = n+1\n    while j>i:\n        if A[i] > A[j]:\n            if A[i] < outMin:\n                outMin = A[i]\n            i += 1\n        else:\n            if A[j] < outMin:\n                outMin = A[j]\n            j -= 1\n        if j-i == outMin-2:\n            ans[j-i] = 1\n    print(''.join(str(i) for i in ans))\n\n\nt = int(input())\nfor i in range(t):\n    f()"", ""n = int(input())\nfor _ in range(n):\n    k = int(input())\n    pos = [0] * k\n    arr = list(map(int, input().split(' ')))\n    for i in range(k):\n        pos[arr[i] - 1] = i\n\n    #print(pos)\n\n    left, right = [0] * k, [0] * k\n    left[0], right[0] = pos[0], pos[0]\n    for i in range(1, k):\n        left[i] = min(left[i - 1], pos[i])\n        right[i] = max(right[i - 1], pos[i])\n\n    #print(left)\n    #print(right)\n    for i in range(k):\n        if right[i] - left[i] == i:\n            print(1, end=\""\"")\n        else:\n            print(0, end=\""\"")\n    print()"", ""for kkk in range(int(input())):\n\tn = int(input())\n\tl = list(map(int, input().split()))\n\td = {}\n\tfor i in range(n):\n\t\td[l[i]] = i\n\tans = [\""0\"" for i in range(n+1)]\n\tans[1] = \""1\""\n\tposleft = d[1]\n\tposright = d[1]\n\tfor j in range(2, n+1):\n\t\tif(d[j]==posleft-1 or d[j]==posright+1):\n\t\t\tif(ans[j-1]==\""1\""):\n\t\t\t\tans[j] = \""1\""\n\t\telif(d[j]<posright and d[j]>posleft):\n\t\t\tif(posright - posleft + 1 == j):\n\t\t\t\tans[j] = \""1\""\n\t\tif(d[j]<posleft):\n\t\t\tposleft = d[j]\n\t\tif(d[j]>posright):\n\t\t\tposright = d[j]\n\tprint(''.join(ans[1:]))"", ""import sys\nimport math\nimport bisect\n \n \nsys.setrecursionlimit(1000000000)\ndef input():\n    return sys.stdin.readline().strip()\n \ndef iinput():\n    return int(input())\n \ndef finput():\n    return float(input())\n \ndef tinput():\n    return input().split()\n \ndef rinput():\n    return map(int, tinput())\n \ndef rlinput():\n    return list(rinput())\n\ndef main():\n    n = iinput()\n    c = rlinput()\n    q, res, w, e = [0] * n, ['0'] * n, 0, n\n    for i in range(n):\n        q[c[i] - 1] = i\n    for i in range(n):\n        w = max(q[i], w)\n        e = min(q[i], e)\n        if w <= i + e:\n            res[i] = '1'\n    print(''.join(res))\n        \nfor j in range(int(input())):\n    main()"", ""from math import floor, ceil\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pos = dict()\n    for p, i in enumerate(a):\n        pos[i] = p\n    minpos = [None] + [pos[1]] + [None]*(n-1)\n    maxpos = [None] + [pos[1]] + [None]*(n-1)\n\n    for i in range(2, n+1):\n        minpos[i] = min(minpos[i-1], pos[i])\n        maxpos[i] = max(maxpos[i-1], pos[i])\n\n\n    good = ['0']*n \n    for i in range(1, n+1):\n        if maxpos[i] - minpos[i] + 1 == i:\n            good[i-1] = '1'\n\n    print(''.join(good))\n\n     \n""]","{\n  ""inputs"": [\n    ""3\n6\n4 5 1 3 2 6\n5\n5 3 1 2 4\n4\n1 4 3 2\n""\n  ],\n  ""outputs"": [\n    ""101011\n11111\n1001\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1364/B,"greedy,two pointers","Given a permutation $p$ of length $n$, find its subsequence $s_1$, $s_2$, $\ldots$, $s_k$ of length at least $2$ such that:  $|s_1-s_2|+|s_2-s_3|+\ldots+|s_{k-1}-s_k|$ is as big as possible over all subsequences of $p$ with length at least $2$.  Among all such subsequences, choose the one whose length, $k$, is as small as possible. \n\nIf multiple subsequences satisfy these conditions, you are allowed to find any of them.\n\nA sequence $a$ is a subsequence of an array $b$ if $a$ can be obtained from $b$ by deleting some (possibly, zero or all) elements.\n\nA permutation of length $n$ is an array of length $n$ in which every element from $1$ to $n$ occurs exactly once.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \le t \le 2 \cdot 10^4$) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($2 \le n \le 10^5$) — the length of the permutation $p$.\n\nThe second line of each test case contains $n$ integers $p_1$, $p_2$, $\ldots$, $p_{n}$ ($1 \le p_i \le n$, $p_i$ are distinct) — the elements of the permutation $p$.\n\nThe sum of $n$ across the test cases doesn't exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, the first line should contain the length of the found subsequence, $k$. The second line should contain $s_1$, $s_2$, $\ldots$, $s_k$ — its elements.\n\nIf multiple subsequences satisfy these conditions, you are allowed to find any of them.\n\n\n-----Example-----\nInput\n2\n3\n3 2 1\n4\n1 3 4 2\n\nOutput\n2\n3 1 \n3\n1 4 2 \n\n\n\n-----Note-----\n\nIn the first test case, there are $4$ subsequences of length at least $2$:  $[3,2]$ which gives us $|3-2|=1$.  $[3,1]$ which gives us $|3-1|=2$.  $[2,1]$ which gives us $|2-1|=1$.  $[3,2,1]$ which gives us $|3-2|+|2-1|=2$. \n\nSo the answer is either $[3,1]$ or $[3,2,1]$. Since we want the subsequence to be as short as possible, the answer is $[3,1]$.","[""for _ in range(int(input())):\n    # n, x = map(int, input().split())\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = [arr[0]]\n    for i in range(1, n - 1):\n        if arr[i - 1] < arr[i] and arr[i] > arr[i + 1]:\n            ans.append(arr[i])\n        elif arr[i - 1] > arr[i] and arr[i] < arr[i + 1]:\n            ans.append(arr[i])\n    ans.append(arr[-1])\n    print(len(ans))\n    print(*ans)"", ""\nt = int(input())\n\nfor loop in range(t):\n\n    n = int(input())\n    p = list(map(int,input().split()))\n    a = p\n\n    ans = []\n    \n\n    for i in range(n):\n\n        if i == 0 or i == n-1:\n            ans.append(p[i])\n\n        elif a[i-1] <= a[i] <= a[i+1]:\n            continue\n        elif a[i-1] >= a[i] >= a[i+1]:\n            continue\n        else:\n            ans.append(p[i])\n\n    print(len(ans))\n    print(*ans)\n"", ""for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [a[0]] + [a[i] for i in range(1, n - 1) if not(a[i - 1] < a[i] < a[i + 1] or \n                                                   a[i - 1] > a[i] > a[i + 1])] + [a[-1]]\n    print(len(b))\n    print(*b)"", ""for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    ans = [str(p[0])]\n    for i in range(1,n-1):\n        if p[i-1] < p[i] < p[i+1]:\n            continue\n        if p[i-1] > p[i] > p[i+1]:\n            continue\n        ans.append(str(p[i]))\n    ans.append(str(p[-1]))\n    print(len(ans))\n    print(\"" \"".join(ans))\n"", ""for _ in range(int(input())):\n    n = int(input())\n    p = tuple(map(int, input().split()))\n    ans = [p[i] for i in range(n) if i in (0, n - 1) or p[i] != sorted(p[i - 1:i + 2])[1]]\n    print(len(ans))\n    print(*ans)\n"", ""t = int(input())\nfor test in range(t):\n    n = int(input())\n    l = list(map(int, input().rstrip().split()))\n    i = 0\n    arr = list()\n    arr.append(str(l[0]))\n    while i+1 < n:\n        if i+1 == n-1 or (l[i] < l[i+1] and l[i+1] > l[i+2]) or (l[i] > l[i+1] and l[i+1] < l[i+2]):\n            arr.append(str(l[i+1]))\n        i += 1\n    print(len(arr))\n    print(\"" \"".join(arr))"", ""from collections import *\nfrom sys import stdin,stderr\ndef rl():\n    return [int(w) for w in stdin.readline().split()]\n\nt, = rl()\nfor _ in range(t):\n    n, = rl()\n    p = rl()\n    s = [p[0]]\n    for i in range(1, n-1):\n        if p[i-1] < p[i] > p[i+1] or p[i-1] > p[i] < p[i+1]:\n            s.append(p[i])\n    s.append(p[-1])\n    print(len(s))\n    print(*s)\n"", ""import sys\ninput = sys.stdin.readline\n\nfor nt in range(int(input())):\n\tn = int(input())\n\ta = list(map(int,input().split()))\n\tif n==2:\n\t\tprint (2)\n\t\tprint (*a)\n\t\tcontinue\n\tans = [a[0]]\n\tif a[1]>a[0]:\n\t\tturn = 1\n\telse:\n\t\tturn = 0\n\ts = abs(a[1]-a[0])\n\tfor i in range(2,n):\n\t\tif turn:\n\t\t\tif a[i]>a[i-1]:\n\t\t\t\tcontinue\n\t\t\tans.append(a[i-1])\n\t\t\tturn = 0\n\t\telse:\n\t\t\tif a[i]<a[i-1]:\n\t\t\t\tcontinue\n\t\t\tans.append(a[i-1])\n\t\t\tturn = 1\n\tans.append(a[-1])\n\tprint (len(ans))\n\tprint (*ans)"", ""from collections import defaultdict as dd\nimport math\nimport sys\ninput=sys.stdin.readline\ndef nn():\n\treturn int(input())\n\ndef li():\n\treturn list(input())\n\ndef mi():\n\treturn list(map(int, input().split()))\n\ndef lm():\n\treturn list(map(int, input().split()))\n\n\n\nq=nn()\n\nfor _ in range(q):\n\tn = nn()\n\n\tper = lm()\n\n\tbest =[per[0]]\n\n\tfor i in range(len(per)-2):\n\t\tminper = min(per[i], per[i+1], per[i+2])\n\t\tmaxper = max(per[i], per[i+1], per[i+2])\n\t\tif minper==per[i+1] or maxper==per[i+1]:\n\t\t\tbest.append(per[i+1])\n\tbest.append(per[-1])\n\tprint(len(best))\n\tprint(*best)\n"", ""import sys\n\ndef ii():\n    return sys.stdin.readline().strip()\n\ndef idata():\n    return [int(x) for x in ii().split()]\n\ndef solve_of_problem():\n    n = int(ii())\n    data = idata()\n    ans = [data[0]]\n    for i in range(1, n - 1):\n        if data[i - 1] < data[i] > data[i + 1] or data[i - 1] > data[i] < data[i + 1]:\n            ans += [data[i]]\n    print(len(ans) + 1)\n    print(*ans, data[-1])\n    return\n\nfor ______ in range(int(ii())):\n    solve_of_problem()"", ""def main():\n    n = int(input())\n    lst = list(map(int, input().split()))\n    take = [lst[0]]\n    sign = 0\n    for i in range(1, n):\n        if i == n - 1:\n            take.append(lst[i])\n        else:\n            if lst[i] > take[-1]:\n                if lst[i + 1] < lst[i]:\n                    take.append(lst[i])\n            elif lst[i] < take[-1]:\n                if lst[i + 1] > lst[i]:\n                    take.append(lst[i])\n    line = str(len(take)) + '\\n'\n    for i in take:\n        line += str(i) + ' '\n    print(line)\n\ndef __starting_point():\n    t = int(input())\n    for i in range(t):\n        main()\n\n__starting_point()"", ""import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    ans = [p[0]]\n    for i in range(n-2):\n        if (p[i]-p[i+1])*(p[i+1]-p[i+2])<0:\n            ans.append(p[i+1])\n    ans.append(p[-1])\n    print(len(ans))\n    print(*ans)"", ""T = int(input())\n\nfor t in range(T):\n    N = int(input())\n\n    P = [int(_) for _ in input().split()]\n    up = P[1] > P[0]\n    res = [P[0]]\n\n    for i in range(1, N-1):\n        if up and P[i+1] < P[i]:\n            res.append(P[i])\n            up = False\n        elif not up and P[i+1] > P[i]:\n            res.append(P[i])\n            up = True\n\n    if P[N-1] != P[N-2]:\n        res.append(P[N-1])\n\n    print(len(res))\n    print(' '.join(map(str, res)))\n"", ""def f(n,l):\n    output = [l[0]]\n    for i in range(1,n-1):\n        if (l[i]-l[i-1])*(l[i+1]-l[i]) < 0:\n            output.append(l[i])\n    output.append(l[-1])\n    return str(len(output))+'\\n'+' '.join([str(x) for x in output])\n\nnumberofcases = int(input())\nfor _ in range(numberofcases):\n    n = int(input())\n    l = [int(t) for t in input().split()]\n    print(f(n,l))"", ""def help():\n\tn = int(input())\n\tarr = list(map(int,input().split(\"" \"")))\n\n\tpeak = [False]*n\n\tdown = [False]*n\n\tfor i in range(n):\n\t\tif(i==0):\n\t\t\tif(arr[0]<arr[1]):\n\t\t\t\tdown[0]=True\n\t\t\tif(arr[0]>arr[1]):\n\t\t\t\tpeak[i]=True\n\t\telif(i==n-1):\n\t\t\tif(arr[n-1]<arr[n-2]):\n\t\t\t\tdown[i]=True\n\t\t\tif(arr[n-1]>arr[n-2]):\n\t\t\t\tpeak[i]=True\n\t\telse:\n\t\t\tif(arr[i-1]<arr[i] and arr[i]>arr[i+1]):\n\t\t\t\tpeak[i]=True\n\t\t\telif(arr[i-1]>arr[i] and arr[i]<arr[i+1]):\n\t\t\t\tdown[i]=True\n\tseries = []\n\tfor i in range(n):\n\t\tif(peak[i]==True or down[i]==True):\n\t\t\tseries.append(i)\n\tans = 0\n\tfor i in range(len(series)-1):\n\t\tans += abs(series[i]-series[i+1])\n\tprint(len(series))\n\tfor i in range(len(series)):\n\t\tprint(arr[series[i]],end=\"" \"")\n\tprint()\n\nfor _ in range(int(input())):\n\thelp()\n"", ""import sys\n\nT = int(sys.stdin.readline().strip())\nfor t in range (0, T):\n    n = int(sys.stdin.readline().strip())\n    p = list(map(int, sys.stdin.readline().strip().split()))\n    ans = [p[0]]\n    for i in range(1, n):\n        if p[i] != ans[-1]:\n            if len(ans) == 1:\n                ans.append(p[i])\n            else:\n                if (ans[-2] - ans[-1]) * (ans[-1] - p[i]) > 0:\n                    ans.pop()\n                ans.append(p[i])\n    print(len(ans))\n    print(\"" \"".join(list(map(str, ans))))\n\n    \n    \n""]","{\n  ""inputs"": [\n    ""2\n3\n3 2 1\n4\n1 3 4 2\n""\n  ],\n  ""outputs"": [\n    ""2\n3 1 \n3\n1 4 2 \n""\n  ]\n}"
https://codeforces.com/problemset/problem/1225/B2,"implementation,two pointers","The only difference between easy and hard versions is constraints.\n\nThe BerTV channel every day broadcasts one episode of one of the $k$ TV shows. You know the schedule for the next $n$ days: a sequence of integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le k$), where $a_i$ is the show, the episode of which will be shown in $i$-th day.\n\nThe subscription to the show is bought for the entire show (i.e. for all its episodes), for each show the subscription is bought separately.\n\nHow many minimum subscriptions do you need to buy in order to have the opportunity to watch episodes of purchased shows $d$ ($1 \le d \le n$) days in a row? In other words, you want to buy the minimum number of TV shows so that there is some segment of $d$ consecutive days in which all episodes belong to the purchased shows.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \le t \le 10000$) — the number of test cases in the input. Then $t$ test case descriptions follow.\n\nThe first line of each test case contains three integers $n, k$ and $d$ ($1 \le n \le 2\cdot10^5$, $1 \le k \le 10^6$, $1 \le d \le n$). The second line contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le k$), where $a_i$ is the show that is broadcasted on the $i$-th day.\n\nIt is guaranteed that the sum of the values ​​of $n$ for all test cases in the input does not exceed $2\cdot10^5$.\n\n\n-----Output-----\n\nPrint $t$ integers — the answers to the test cases in the input in the order they follow. The answer to a test case is the minimum number of TV shows for which you need to purchase a subscription so that you can watch episodes of the purchased TV shows on BerTV for $d$ consecutive days. Please note that it is permissible that you will be able to watch more than $d$ days in a row.\n\n\n-----Example-----\nInput\n4\n5 2 2\n1 2 1 2 1\n9 3 3\n3 3 3 2 2 2 1 1 1\n4 10 4\n10 8 6 4\n16 9 8\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\n\nOutput\n2\n1\n4\n5\n\n\n\n-----Note-----\n\nIn the first test case to have an opportunity to watch shows for two consecutive days, you need to buy a subscription on show $1$ and on show $2$. So the answer is two.\n\nIn the second test case, you can buy a subscription to any show because for each show you can find a segment of three consecutive days, consisting only of episodes of this show.\n\nIn the third test case in the unique segment of four days, you have four different shows, so you need to buy a subscription to all these four shows.\n\nIn the fourth test case, you can buy subscriptions to shows $3,5,7,8,9$, and you will be able to watch shows for the last eight days.","[""for _ in range(int(input())):\n    n, k, d = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    s = {}\n    for q in range(d):\n        s[a[q]] = s.get(a[q], 0)+1\n    ans = len(s)\n    for q in range(d, n):\n        if s[a[q-d]] == 1:\n            del s[a[q-d]]\n        else:\n            s[a[q-d]] -= 1\n        s[a[q]] = s.get(a[q], 0)+1\n        ans = min(ans, len(s))\n    print(ans)\n"", ""Q = int(input())\nfor q in range(Q):\n    n, k, d = tuple(map(int, input().split()))\n    arr = list(map(int, input().split()))\n\n    nums = {}\n    for i in range(d):\n        if arr[i] in nums:\n            nums[arr[i]] += 1\n        else:\n            nums[arr[i]] = 1\n\n    ans = len(nums)\n    for i in range(d, n):\n        if nums[arr[i - d]] == 1:\n            nums.pop(arr[i - d])\n        else:\n            nums[arr[i - d]] -= 1\n\n        if arr[i] in nums:\n            nums[arr[i]] += 1\n        else:\n            nums[arr[i]] = 1\n        ans = min(ans, len(nums))\n\n    print(ans)\n"", ""for __ in range(int(input())):\n    n, k, d = list(map(int, input().split()))\n    ar = list(map(int, input().split()))\n    A = dict()\n    num = 0\n    for i in range(d):\n        if ar[i] in A:\n            A[ar[i]] += 1\n        else:\n            A[ar[i]] = 1\n            num += 1\n    ans = num\n    for j in range(d, n):\n        A[ar[j - d]] -= 1\n        if A[ar[j - d]] == 0:\n            num -= 1\n        if ar[j] in A:\n            if A[ar[j]] == 0:\n                num += 1\n            A[ar[j]] += 1\n        else:\n            A[ar[j]] = 1\n            num += 1\n        ans = min(num, ans)\n    print(ans)"", ""t = int(input())\nfor i in range(t):\n    n, k, d = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = dict()\n    for i in range(n):\n        b[a[i]] = 0\n    count = 0\n    for i in range(d):\n        if b[a[i]] == 0:\n            count += 1\n        b[a[i]] += 1\n    \n    ans = count\n    for i in range(n - d):\n        if b[a[i]] == 1:\n            count -=1\n        b[a[i]] -= 1\n        if b[a[i + d]] == 0:\n            count += 1\n        b[a[i + d]] += 1\n        ans = min(ans, count)\n    print(ans)\n"", ""n=int(input())\nfor i in range(n):\n    n,k,d=list(map(int,input().split()))\n    a=[int(j) for j in input().split()]\n    dv=dict()\n    s=set()\n    mn=n\n    for j in range(n):\n        if j>=d:\n            mn=min(mn,len(s))\n            t=a[j-d]\n            dv[t]-=1\n            if dv[t]==0:\n                s.discard(t)\n        t=a[j]\n        if t in dv:\n            dv[t]+=1\n        else:\n            dv[t]=1\n        s.add(t)\n    mn=min(mn,len(s))\n    print(mn)\n"", ""t = int(input())\nfor u in range(t):\n    n, d, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = set()\n    b = {}\n    ans = 10 ** 9\n    for i in range(min(n, k)):\n        c.add(a[i])\n        if a[i] in b:\n            b[a[i]] += 1\n        else:\n            b[a[i]] = 1\n    i = k\n    ans = min(ans, len(c))\n    while i < n:\n        b[a[i - k]] -= 1\n        if b[a[i - k]] == 0:\n            c.discard(a[i - k])\n        if a[i] in b:\n            b[a[i]] += 1\n        else:\n            b[a[i]] = 1     \n        c.add(a[i])\n        ans = min(ans, len(c))\n        i += 1\n    print(ans)"", ""import sys\ninput = sys.stdin.readline\n\ndef getInt(): return int(input())\ndef getVars(): return list(map(int, input().split()))\ndef getList(): return list(map(int, input().split()))\ndef getStr(): return input().strip()\n\n## -------------------------------\n\nt = getInt()\nfor _ in range(t):\n    n, k, d = getVars()\n    a = getList()\n    b = {}\n    for i in range(d):\n        if a[i] not in b:\n            b[a[i]] = 0\n        b[a[i]] += 1\n    res = len(list(b.keys()))\n    res1 = res\n    for i in range(d, n):\n        b[a[i-d]] -= 1\n        if b[a[i-d]] == 0:\n            del b[a[i-d]]\n            res1 -= 1\n        if a[i] not in b:\n            b[a[i]] = 0\n            res1 += 1\n        b[a[i]] += 1     \n        res = min(res, res1)\n    print(res)\n"", ""from collections import deque\n\nt=int(input())\nfor i in range(t):\n    n,k,dp=[int(x) for x in input().split()]\n    d={}\n    i=0\n    p=deque()\n    cur=0\n    min=k\n    for el in input().split():\n        i+=1\n        if i<=dp:\n            p.append(el)\n            if el in list(d.keys()):\n                d[el]+=1\n            else:\n                d[el]=1\n                cur+=1\n        else:\n            if cur<min:\n                min=cur\n            ##deleting\n            exc=p.popleft()\n            if d[exc]==1:\n                d.pop(exc)\n                cur-=1\n            else:\n                d[exc]-=1\n            ##adding\n            p.append(el)\n            if el in list(d.keys()):\n                d[el]+=1\n            else:\n                d[el]=1\n                cur+=1\n        ##print(d,p)\n    if min>cur:\n        min=cur\n    print(min)\n"", ""import math\nimport collections\narrK = [0] * 1000050\n\ndef cleanK(q):\n    while len(q):\n        arrK[q.pop()] = 0\n\n\ndef test():\n    n, k, d = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    ans = math.inf\n    q = collections.deque()\n    sumK = 0\n    for i in range(len(a)):\n        q.append(a[i])\n        if arrK[a[i]] == 0:\n            sumK += 1\n        arrK[a[i]] += 1\n\n        if len(q) > d:\n            var = q.popleft()\n            arrK[var] -= 1\n            if arrK[var] == 0:\n                sumK -= 1\n        if len(q) == d and sumK < ans:\n            ans = sumK\n    cleanK(q)\n    print(ans)\n#\n# def print2d(a):\n#     for i in a:\n#       print(' '.join(list(map(str, i))))\n\nt = int(input())\n\nfor i in range(t):\n    test()"", ""def main():\n    n, k, d = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    rez = 0\n    rezline = {}\n    for i in range(d):\n        if rezline.get(l[i]) is None:\n            rezline[l[i]] = 0\n            rez += 1\n        rezline[l[i]] += 1\n    rez_p = rez\n    for i in range(d, n):\n        if rezline[l[i-d]] == 1:\n            rez_p -= 1\n        rezline[l[i-d]] -= 1\n        if rezline.get(l[i]) in [0, None]:\n            rez_p += 1\n            rezline[l[i]] = 1\n        else:\n            rezline[l[i]] += 1\n        rez = min(rez, rez_p)\n    print(rez)\n\n\nt = int(input())\nfor i in range(t):\n    main()\n"", ""t = int(input())\nfor _ in range(t):\n    n, k, d = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    m = dict()\n    for i in range(d):\n        if a[i] not in m:\n            m[a[i]] = 0\n        m[a[i]] += 1\n    ans = len(m)\n    for i in range(n - d):\n        m[a[i]] -= 1\n        if m[a[i]] == 0:\n            m.pop(a[i])\n        if a[i + d] not in m:\n            m[a[i + d]] = 0\n        m[a[i + d]] += 1\n        ans = min(ans, len(m))\n    print(ans)\n"", ""def check(m):\n    dictsums = dict()\n    i, j = 0, 0\n    dictsums[series[0]] = 1\n    while i < len(series) - 1 and i - j + 1 < d:\n        if series[i + 1] not in dictsums and len(dictsums) == m:\n            while dictsums[series[j]] > 1:\n                dictsums[series[j]] -= 1\n                j += 1\n            dictsums.pop(series[j])\n            dictsums[series[i + 1]] = 1\n            j += 1\n        elif series[i + 1] not in dictsums and len(dictsums) < m:\n            dictsums[series[i + 1]] = 1\n        else:\n            dictsums[series[i + 1]] += 1\n        i += 1\n    if i - j + 1 >= d:\n        return 1\n    else:\n        return 0\n\n\n\n\n\nq = int(input())\nfor i in range(q):\n    n, k, d = map(int, input().split())\n    series = list(map(int, input().split()))\n    L = 0\n    R = k\n    while R - L > 1:\n        m = (R + L) // 2\n        if check(m):\n            R = m\n        else:\n            L = m\n    print(R)"", ""for i in range(int(input())):\n    a = list(map(int, input().split()))\n    n, k, d = a[0], a[1], a[2]\n    a = list(map(int, input().split()))\n    di = dict()\n    m = 0\n    m2 = 1000000\n    n2 = 0\n    for j in range(len(a)):\n        if n2 < d:\n            if a[j] not in di:\n                di[a[j]] = 1\n                m += 1\n            else:\n                if di[a[j]] == 0:\n                    m += 1\n                di[a[j]] += 1\n            n2 += 1\n        else:           \n            if di[a[j - d]] == 1:\n                di[a[j - d]] = 0\n                m -= 1\n            else:\n                di[a[j - d]] -= 1\n            if a[j] not in di:\n                di[a[j]] = 1\n                m += 1\n            else:\n                if di[a[j]] == 0:\n                    m += 1\n                di[a[j]] += 1\n        if n2 == d and m < m2:\n            m2 = m\n    print(m2)\n"", ""c = [[0, 0] for i in range(round(1e6+1))]\n\ndef ans(t) :\n    a, k, s = [int(x) for x in input().split()]\n    v = list([int(x) for x in input().split()])\n    y, x, a, m = 0, 0, 0, 1e12\n    for i in range(len(v)) :\n        if c[v[i]][0] != t : c[v[i]] = [t, 0]\n        c[v[i]][1] += 1\n        if c[v[i]][1] == 1 : a += 1\n        if i-y+1 > s :\n            c[v[y]][1] -= 1\n            if c[v[y]][1] == 0 : a -= 1\n            y += 1\n        if a < m and i-y+1 == s : m = a\n    return m\n\nt = int(input())\nfor i in range(t) : print(ans(i))\n"", ""from collections import deque\nt = int(input())\nfor jfrhg in range(t):\n    n, k, d = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    l = deque(a[:d])\n    s = dict()\n    for i in l:\n        if i in s:\n            s[i]+=1\n        else:\n            s[i] = 1\n    minimum = len(list(s.keys()))\n    for i in range(d, n):\n        ref = l.popleft()\n        l.append(a[i])\n        s[ref] -=1\n        if s[ref]<1:\n            del s[ref]\n        if a[i] in s:\n            s[a[i]]+=1\n        else:\n            s[a[i]] = 1\n        if len(list(s.keys()))< minimum:\n            minimum = len(list(s.keys()))\n    print(minimum)\n"", ""from collections import deque\n\nfor _ in range(int(input())):\n    n, k, d = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    ans = len(set(a[:d]))\n    now = dict()\n    for i in range(d):\n        if a[i] in now:\n            now[a[i]] += 1\n        else:\n            now[a[i]] = 1\n    for i in range(d, n):\n        ans = min(ans, len(now))\n        now[a[i - d]] -= 1\n        if now[a[i - d]] == 0:\n            now.pop(a[i - d])\n        if a[i] in now:\n            now[a[i]] += 1\n        else:\n            now[a[i]] = 1\n    ans = min(ans, len(now))\n    print(ans)\n"", ""for _ in range(int(input())):\n    _, _, n = list(map(int, input().split()))\n    a = [int(x) for x in input().split()]\n    cnt = dict()\n    for i in a[:n]:\n        cnt[i] = cnt.get(i, 0) + 1\n    mlen = len(cnt)\n    for i in range(n, len(a)):\n        if a[i - n] != a[i]:\n            if cnt[a[i - n]] == 1:\n                del cnt[a[i - n]]\n            else:\n                cnt[a[i - n]] -= 1\n            cnt[a[i]] = cnt.get(a[i], 0) + 1\n            mlen = min(mlen, len(cnt))\n    print(mlen)\n"", ""t = int(input())\nfor _ in range(t):\n    n, k, d = list(map(int, input().split()))\n    timetable = list(map(int, input().split()))\n    i = 0\n    j = d\n    used = {}\n    for x in range(d):\n        if timetable[x] in list(used.keys()):\n            used[timetable[x]] += 1\n        else:\n            used[timetable[x]] = 1\n    ans = len(used)\n    while j < n:\n        if timetable[i] in list(used.keys()):\n            used[timetable[i]] -= 1\n            if used[timetable[i]] == 0:\n                used.pop(timetable[i])\n        i += 1\n        if timetable[j] in list(used.keys()):\n            used[timetable[j]] += 1\n        else:\n            used[timetable[j]] = 1\n        j += 1\n        ans = min(ans, len(used))\n    print(ans)\n"", ""for i in range(int(input())):\n    n,k,d = map(int,input().split())\n    a = [int(s) for s in input().split()]\n    s = dict()\n    for j in range(d):\n        if s.get(a[j],0) == 0:\n            s[a[j]] = 1\n        else:\n            s[a[j]] += 1\n    m = len(s)   \n    for j in range(1,n-d+1):\n        if s[a[j-1]] == 1:\n            s.pop(a[j-1])\n        else:\n            s[a[j-1]] -= 1\n        if s.get(a[j+d-1],0) == 0:\n            s[a[j+d-1]] = 1\n        else:\n            s[a[j+d-1]] += 1\n        if len(s) < m:\n            m = len(s)\n    print(m)"", ""t = int(input())\nfor i in range(t):\n    n, k, d = map(int, input().split())\n    data = list(map(int, input().split()))\n    \n    dd = {}\n    for j in range(d):\n        elem = data[j]\n        if elem in dd:\n            dd[elem] += 1\n        else:\n            dd[elem] = 1\n    m = len(dd)\n    for j in range(d, n):\n        elem = data[j]\n        if elem in dd:\n            dd[elem] += 1\n        else:\n            dd[elem] = 1\n        dd[data[j - d]] -= 1\n        if dd[data[j - d]] == 0:\n            dd.pop(data[j - d])\n        m = min(m, len(dd))\n    print(m)"", ""t = int(input())\nfor i in range(t):\n    n, k, d = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    m = k\n    s = dict()\n    c = 0\n    for j in range(d):\n        if a[j] in s:\n            s[a[j]] += 1\n        else:\n            c += 1\n            s[a[j]] = 1\n    mm = m = len(s)\n    for j in range(d, n):\n        if a[j-d] in s:\n            s[a[j-d]] -= 1\n            if s[a[j-d]] == 0:\n                del s[a[j-d]]\n                m -= 1\n        else:\n            s[a[j]] = 1\n            m += 1\n        if a[j] in s:\n            s[a[j]] += 1\n        else:\n            s[a[j]] = 1\n            m += 1\n        if m < mm:\n            mm = m\n    print(mm)\n\n\n\n"", ""def solve(n,k,d,a):\n    #if n == d:\n      #  return len(set(a))\n    m = {}\n    s = list(set(a))\n    ans = float(\""inf\"")\n    for i in s:\n        m[i] = 0\n    sm = 0\n    for i in range(d):\n        m[a[i]] += 1\n        if m[a[i]] == 1:\n          sm += 1\n    ans = sm\n    #print(m)\n    for i in range(d,n):\n     #   print(m)\n        x = a[i-d]\n        y = a[i]\n      #  print(x,y, i, d)\n        m[x] -= 1\n        if m[x] == 0:\n            sm -= 1\n        if m[y] == 0:\n            sm += 1\n        m[y] += 1\n        ans = min(ans,sm)\n    return ans\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n,k,d = list(map(int,input().split()))\n        a = list(map(int,input().split()))\n        print(solve(n,k,d,a))\n\nmain()\n"", ""3\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n1, k, d = [int(e) for e in input().split()]\n        a = [int(e) for e in input().split()]\n        s = dict()\n        for e in a[:d]:\n            s[e] = s.get(e, 0) + 1\n        b = len(s)\n        n = b\n        for i in range(d, n1):\n            ai = a[i]\n            aid = a[i-d]\n            s[ai] = s.get(ai,0)+1\n            if s[ai] == 1:\n                n += 1\n            s[aid] -= 1\n            if s[aid] == 0:\n                n -= 1\n            b = min(n, b)\n        print(b)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"", ""t=int(input())\nfor q in range(t):\n    n, k, d = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    g = {}\n    m=k\n    j=0\n    s=0\n    for i in range(0, n):\n        f=a[i]\n        l=g.get(f, 0)\n        g[f]=l+1\n        j+=1\n        if l==0:\n            s+=1\n        if j>d:\n            vr=g[a[i-d]]\n            g[a[i-d]]-=1\n            j-=1\n            if vr==1:\n                s-=1\n        if j==d:       \n            m=min(m, s)\n    print(m)\n\n"", ""t=int(input())\nfor i1 in range(t):\n      n,k,d=list(map(int,input().split()))\n      a=list(map(int,input().split()))\n      dic={}\n      r=0\n      for i in range(d):\n            e=a[i]\n            if e in dic:\n                  dic[e]+=1\n            else:\n                  dic[e]=1\n                  r+=1\n      m=r\n      for i in range(1,n-d+1):\n            e=a[i+d-1]\n            if e in dic:\n                  dic[e]+=1\n            else:\n                  dic[e]=1\n                  r+=1\n            e=a[i-1]\n            if dic.get(e)>1:\n                  dic[e]-=1\n            else:\n                  dic.pop(e)\n                  r-=1\n            m=min(m,r)\n      print(m)\n""]","{\n  ""inputs"": [\n    ""4\n5 2 2\n1 2 1 2 1\n9 3 3\n3 3 3 2 2 2 1 1 1\n4 10 4\n10 8 6 4\n16 9 8\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\n""\n  ],\n  ""outputs"": [\n    ""2\n1\n4\n5\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1076/C,"binary search,math","Try guessing the statement from this picture:  $3$ \n\nYou are given a non-negative integer $d$. You have to find two non-negative real numbers $a$ and $b$ such that $a + b = d$ and $a \cdot b = d$.\n\n\n-----Input-----\n\nThe first line contains $t$ ($1 \le t \le 10^3$) — the number of test cases.\n\nEach test case contains one integer $d$ $(0 \le d \le 10^3)$.\n\n\n-----Output-----\n\nFor each test print one line.\n\nIf there is an answer for the $i$-th test, print ""Y"", and then the numbers $a$ and $b$.\n\nIf there is no answer for the $i$-th test, print ""N"".\n\nYour answer will be considered correct if $|(a + b) - a \cdot b| \le 10^{-6}$ and $|(a + b) - d| \le 10^{-6}$.\n\n\n-----Example-----\nInput\n7\n69\n0\n1\n4\n5\n999\n1000\n\nOutput\nY 67.985071301 1.014928699\nY 0.000000000 0.000000000\nN\nY 2.000000000 2.000000000\nY 3.618033989 1.381966011\nY 997.998996990 1.001003010\nY 998.998997995 1.001002005","[""for _ in range(int(input())):\n    d=int(input())\n    anws=False\n    if d**2>=4*d:\n        root=(d**2-4*d)**0.5\n        a=(d+root)/2\n        b=(d-root)/2\n        anws=True\n    if anws:\n        print(\""Y {:.9f} {:.9f}\"".format(a,b))\n    else:\n        print(\""N\"")"", ""n=int(input())\n\nfor i in range(n):\n    d=int(input())\n    #b**2-bd+d=0\n    D=d**2-4*d\n    if D>=0:\n        b1=(d+D**0.5)/2\n        b2=(d-D**0.5)/2\n    if D<0 or (b1<0 and b2<0):\n        print(\""N\"")\n    else:\n        a1=d-b1\n        a2=d-b2\n        if a1>=0 and b1>=0:\n            print(\""Y\"", \""%.9f\""%a1, \""%.9f\""%b1)\n        elif a2>=0 and b2>=0:\n            print(\""Y\"", \""%.9f\""%a2, \""%.9f\""%b2)\n        else:\n            print(\""N\"")\n""]","{\n  ""inputs"": [\n    ""7\n69\n0\n1\n4\n5\n999\n1000\n""\n  ],\n  ""outputs"": [\n    ""Y 67.985071301 1.014928699\nY 0.000000000 0.000000000\nN\nY 2.000000000 2.000000000\nY 3.618033989 1.381966011\nY 997.998996990 1.001003010\nY 998.998997995 1.001002005\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1315/B,"binary search,dp,greedy,strings","After a long party Petya decided to return home, but he turned out to be at the opposite end of the town from his home. There are $n$ crossroads in the line in the town, and there is either the bus or the tram station at each crossroad.\n\nThe crossroads are represented as a string $s$ of length $n$, where $s_i = \texttt{A}$, if there is a bus station at $i$-th crossroad, and $s_i = \texttt{B}$, if there is a tram station at $i$-th crossroad. Currently Petya is at the first crossroad (which corresponds to $s_1$) and his goal is to get to the last crossroad (which corresponds to $s_n$).\n\nIf for two crossroads $i$ and $j$ for all crossroads $i, i+1, \ldots, j-1$ there is a bus station, one can pay $a$ roubles for the bus ticket, and go from $i$-th crossroad to the $j$-th crossroad by the bus (it is not necessary to have a bus station at the $j$-th crossroad). Formally, paying $a$ roubles Petya can go from $i$ to $j$ if $s_t = \texttt{A}$ for all $i \le t < j$. \n\nIf for two crossroads $i$ and $j$ for all crossroads $i, i+1, \ldots, j-1$ there is a tram station, one can pay $b$ roubles for the tram ticket, and go from $i$-th crossroad to the $j$-th crossroad by the tram (it is not necessary to have a tram station at the $j$-th crossroad). Formally, paying $b$ roubles Petya can go from $i$ to $j$ if $s_t = \texttt{B}$ for all $i \le t < j$.\n\nFor example, if $s$=""AABBBAB"", $a=4$ and $b=3$ then Petya needs:[Image]  buy one bus ticket to get from $1$ to $3$,  buy one tram ticket to get from $3$ to $6$,  buy one bus ticket to get from $6$ to $7$. \n\nThus, in total he needs to spend $4+3+4=11$ roubles. Please note that the type of the stop at the last crossroad (i.e. the character $s_n$) does not affect the final expense.\n\nNow Petya is at the first crossroad, and he wants to get to the $n$-th crossroad. After the party he has left with $p$ roubles. He's decided to go to some station on foot, and then go to home using only public transport.\n\nHelp him to choose the closest crossroad $i$ to go on foot the first, so he has enough money to get from the $i$-th crossroad to the $n$-th, using only tram and bus tickets.\n\n\n-----Input-----\n\nEach test contains one or more test cases. The first line contains the number of test cases $t$ ($1 \le t \le 10^4$).\n\nThe first line of each test case consists of three integers $a, b, p$ ($1 \le a, b, p \le 10^5$) — the cost of bus ticket, the cost of tram ticket and the amount of money Petya has.\n\nThe second line of each test case consists of one string $s$, where $s_i = \texttt{A}$, if there is a bus station at $i$-th crossroad, and $s_i = \texttt{B}$, if there is a tram station at $i$-th crossroad ($2 \le |s| \le 10^5$).\n\nIt is guaranteed, that the sum of the length of strings $s$ by all test cases in one test doesn't exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case print one number — the minimal index $i$ of a crossroad Petya should go on foot. The rest of the path (i.e. from $i$ to $n$ he should use public transport).\n\n\n-----Example-----\nInput\n5\n2 2 1\nBB\n1 1 1\nAB\n3 2 8\nAABBBBAABB\n5 3 4\nBBBBB\n2 1 1\nABABAB\n\nOutput\n2\n1\n3\n1\n6","[""t=int(input())\n\nfor tt in range(t):\n    a,b,p=map(int,input().split())\n    s=input()\n    n=len(s)\n    cost = [0]*n\n    cost[-1] = 0\n    typ = ''\n    i=n-2\n    while i>=0:\n        if s[i]==typ:\n            cost[i] = cost[i+1]\n        else:\n            typ = s[i]\n            cost[i] = cost[i+1] + (a if typ=='A' else b)\n        i-=1\n    i=0\n    while cost[i] > p:\n        i+=1\n    print(i+1)"", ""from sys import stdin,stderr\ndef rl():\n    return [int(w) for w in stdin.readline().split()]\n\nt, = rl()\nfor _ in range(t):\n    a,b,p = rl()\n    s = stdin.readline().rstrip()\n    r = 1\n    t = ''\n    for i in range(len(s)-1,0,-1):\n        if s[i-1] != t:\n            t = s[i-1]\n            p -= a if t == 'A' else b\n            if p < 0:\n                r = i+1\n                break\n    print(r)\n"", ""# from collections import defaultdict\n\nfor _ in range(int(input())):\n\t# n = int(input())\n\ta, b, p = map(int, input().split())\n\ts = input()\n\tn = len(s)\n\tmoney = [0] * n\n\tlast = 'C'\n\tfor i in range(n-2, -1, -1):\n\t\tif s[i] == last:\n\t\t\tmoney[i] = money[i+1]\n\t\telif s[i] == 'A':\n\t\t\tmoney[i] = money[i+1] + a\n\t\telse:\n\t\t\tmoney[i] = money[i+1] + b\n\t\tlast = s[i]\n\n\tfor i in range(1, n+1):\n\t\tif money[i-1] <= p:\n\t\t\tprint(i)\n\t\t\tbreak"", ""from math import *\nfrom collections import *\nt = int(input())\nfor y in range(t):\n\ta,b,p = map(int,input().split())\n\ts = input()\n\tn = len(s)\n\ti = n-2\n\tans = n\n\tct = 0\n\twhile(i >= 0):\n\t\tst = s[i]\n\t\twhile(i >= 0 and s[i] == st):\n\t\t\ti -= 1\n\t\tif(st == 'A'):\n\t\t\tct += a\n\t\telse:\n\t\t\tct += b\n\t\tif(ct <= p):\n\t\t\tans = i+2\n\tprint(ans)"", ""for _ in range(int(input())):\n    a, b, p = list(map(int, input().split()))\n    ar = list(input())\n    i = len(ar) - 2\n    now = ar[i]\n    flag = 0\n    if now == 'A':\n        if p >= a:\n            flag = 1\n    else:\n        if p >= b:\n            flag = 1\n    while i >= 0 and p > 0 and flag == 1:\n        if ar[i] == now:\n            i -= 1\n        else:\n            if ar[i + 1] == 'A':\n                p -= a\n            else:\n                p -= b\n            if ar[i] == 'A':\n                if p < a:\n                    break\n                now = 'A'\n            else:\n                if p < b:\n                    break\n                now = 'B'\n    print(i + 2)"", ""t = int(input())\nfor i in range(t):\n    a, b, p = list(map(int, input().split()))\n    s = input()\n    n = len(s)\n    ind = n\n    sum = 0\n    while sum <= p and ind > 0:\n        ind -= 1\n        if ind == n - 1 or s[ind - 1] != s[ind]:\n            if s[ind - 1] == \""A\"":\n                sum += a\n            else:\n                sum += b\n    print(ind + 1)\n"", ""t = int(input())\nfor tt in range(t):\n\ta, b, p = map(int, input().split())\n\ts = input()\n\tcs = {'A':a, 'B':b}\n\tc = 0\n\ti = len(s)-1\n\twhile i > 0 and c+cs[s[i-1]] <= p:\n\t\t# print(tt, i)\n\t\tc += cs[s[i-1]]\n\t\ti -= 1\n\t\twhile i > 0 and s[i-1] == s[i]:\n\t\t\ti -= 1\n\tprint(i+1)"", ""\n\n\""\""\""\nNTC here\n\""\""\"" \nimport sys\ninp= sys.stdin.readline\ninput = lambda : inp().strip()\n# flush= sys.stdout.flush\n# import threading\n# sys.setrecursionlimit(10**6)\n# threading.stack_size(2**26)\n\ndef iin(): return int(input())\ndef lin(): return list(map(int, input().split()))\n\n\n\ndef main():\n    T = iin()\n    while T:\n        T-=1\n        a, b, p = lin()\n        \n        s = list(input())\n        n = len(s)\n        ans = []\n        ch = 'D'\n        for i in range( n-1):\n            if s[i]!=ch:\n                ch = s[i]\n                x = a\n                if ch=='B':x=b\n                ans.append([x, i])\n        l = len(ans)\n        ans = ans[::-1]\n        for i in range(1, l):\n            ans[i][0]+=ans[i-1][0]\n        ans = ans[::-1]\n        for i, j in ans:\n            if p>=i:\n                print(j+1)\n                break\n        else:\n            print(n)\n        #print(ans)\n\n\nmain()\n\n#threading.Thread(target=main).start()\n\n"", ""for _ in range(int(input())):\n    a, b, p = list(map(int, input().split()))\n    s = input()\n    naw = 0\n    for q in range(len(s)-2, -1, -1):\n        if (q == len(s)-2 or s[q] != s[q+1]) and naw+(a if s[q] == 'A' else b) > p:\n            print(q+2)\n            break\n        elif q == len(s)-2 or s[q] != s[q+1]:\n            naw += (a if s[q] == 'A' else b)\n    else:\n        print(1)\n"", ""import sys\ninput = sys.stdin.readline\nfor j in range(int(input())):\n    a, b, p = list(map(int, input().split(\"" \"")))\n    s = input().rstrip()\n    \n    costs = [0 for x in range(len(s))]\n    \n    costs[len(s)-1] = 0\n    if(s[len(s)-2] == \""B\""):\n        costs[len(s)-2] = b\n    else:\n        costs[len(s)-2] = a\n    for it in range(3, len(s)+1):\n        if(s[len(s)-it] !=s[len(s)-it+1]):\n            costs[len(s)-it] = costs[len(s)-it+1]+(s[len(s)-it]==\""A\"")*a+(s[len(s)-it]==\""B\"")*b\n        else:\n            costs[len(s)-it] = costs[len(s)-it+1]\n\n\n    for j in range(len(costs)):\n        if(costs[j]<=p):\n            print(j+1)\n            break\n    \n"", ""t = int(input())\nfor _ in range(t):\n  a,b,p = map(int,input().split())\n  s = list(input())\n  n = len(s)\n  flg = 0\n  ans = n\n  y = \""C\""\n  k = 0\n  while s:\n    x = s.pop()\n    if not flg:\n      flg = 1\n      continue\n    if x == y:\n      ans -= 1\n      continue\n    else:\n      if x == \""A\"":\n        if p<a:\n          print(ans)\n          k = 1\n          break\n        else:\n          p -= a\n      if x == \""B\"":\n        if p<b:\n          print(ans)\n          k = 1\n          break\n        else:\n          p -= b\n    y = x\n    ans -= 1\n  if s == [] and k == 0:\n    print(1)"", ""for t in range(int(input())):\n    a, b, p = [int(i) for i in input().split()]\n    s = input()[::-1]\n    n = len(s)\n    curr = s[1]\n    res = 0\n    for i in range(1, n):\n        if (s[i] != curr):\n            if (curr == \""A\""):\n                p -= a\n                curr = \""B\""\n            else:\n                p -= b\n                curr = \""A\""\n            if (p < 0):\n                break\n            else:\n                res = i - 1\n    if (curr == \""A\""):\n        p -= a\n    else:\n        p -= b\n    if (p < 0):\n        print(n - res)\n    else:\n        print(1)"", ""# from collections import deque\nimport sys\ninput = lambda: sys.stdin.readline().strip()\ndef d(x):\n    if x=='A':\n        return a\n    return b\ndef f(j):\n    su = d(s[j])\n    for i in range(j+1, len(s) - 1):\n        if s[i]!=s[i-1]:\n            su+=d(s[i])\n    return su\nfor i in range(int(input())):\n    a,b,p = map(int,input().split())\n    s = list(input())\n    l = -1\n    r = len(s)-1\n    while r - l > 1:\n        m = (r + l) // 2\n        if f(m) > p:\n            l = m\n        else:\n            r = m\n    print(r+1)"", ""from math import inf\nt = int(input())\nfor q in range(t):\n    a, b, p = [int(i) for i in input().split()]\n    s = input()\n    l = len(s) \n    dp = [0] * l\n    if s[l - 2] == 'A':\n        dp[l - 2] = a\n    else:\n        dp[l - 2] = b\n    for i in range(l - 3, -1, -1):\n        if s[i] == s[i + 1]:\n            dp[i] = dp[i + 1]\n        else:\n            if s[i] == 'A':\n                dp[i] = dp[i + 1] + a\n            else:\n                dp[i] = dp[i + 1] + b\n    #print(dp)\n    for i in range(l):\n        if p >= dp[i]:\n            print(i + 1)\n            break\n"", ""# import sys\n# input = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    a, b, p = map(int, input().split())\n    s = input()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n-2, -1, -1):\n        if i == n-2:\n            dp[i] = a if s[i] == 'A' else b\n        elif s[i] == s[i+1]:\n            dp[i] = dp[i+1]\n        else:\n            dp[i] = dp[i+1] + (a if s[i] == 'A' else b)\n    ans = -1\n    for i in range(n):\n        if dp[i] <= p:\n            ans = i+1\n            break\n    print(ans)"", ""t = int(input())\nwhile t:\n    t += -1\n    a, b, p = map(int, input().split())\n    s = input()\n    l = []\n    for i in s: l.append(i)\n    cost = 0\n    for i in range(len(l) - 1):\n        if l[i + 1] != l[i]:\n            if l[i] == 'A': cost += a\n            else: cost += b\n    if l[len(l) - 1] == l[len(l) - 2]:\n        if l[len(l) - 1] == 'A': cost += a\n        else: cost += b\n    # print(cost)\n    ind = -1\n    for i in range(len(l) - 1):\n        if cost <= p:\n            ind = i\n            break\n        if l[i + 1] != l[i]:\n            if l[i] == 'A': cost -= a\n            else: cost -= b\n    if ind == -1: print(len(l))\n    else: print(ind + 1)"", ""import sys\nimport math\nfrom collections import defaultdict\nfrom collections import deque\nfrom itertools import combinations\nfrom itertools import permutations\ninput = lambda : sys.stdin.readline().rstrip()\nread = lambda : list(map(int, input().split()))\ngo = lambda : 1/0\ndef write(*args, sep=\""\\n\""):\n  for i in args:\n    sys.stdout.write(\""{}{}\"".format(i, sep))\nINF = float('inf')\nMOD = int(1e9 + 7)\nYES = \""YES\""\nNO = \""NO\""\n\nfor _ in range(int(input())):\n  try:\n    a, b, p = read()\n    s = input()\n\n    stack = [[s[0], 1]]\n\n    for i in s[1:-1]:\n      if i == stack[-1][0]:\n        stack[-1][1] += 1\n        \n      else:\n        stack.append([i, 1])\n    \n\n\n    ans = len(s) \n    temp = []\n    # print(stack)\n\n    if p < a and p < b:\n      print(len(s))\n      go() \n    \n    while stack:\n      i, j = stack[-1]\n      stack.pop()\n      if i == 'A' and p >= a:\n        p -= a\n        ans -= j\n        temp.append(j)\n      elif i == 'A' and p < a:\n        break\n      if i == 'B' and p >= b:\n        p -= b \n        ans -= j \n        temp.append(j)\n      elif i == 'B' and p < b:\n        break\n    \n    print(ans)\n      \n\n  except ZeroDivisionError:\n    continue\n\n  except Exception as e:\n    print(e)\n    continue"", ""for _ in range(int(input())):\n    a, b, p = map(int, input().split())\n    s = input()\n    \n    d = {'A': a, 'B': b}\n\n    c = '0'\n    inv = []\n    start = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i-1]:\n            inv.append((start, i, s[i-1]))\n            start = i\n        elif i == len(s) - 1:\n            inv.append((start, i, s[i]))\n\n    ans, cost = len(s) - 1, 0\n    for q in inv[::-1]:\n        cost += d[q[2]]\n        if cost > p:\n            break\n        else:\n            ans = q[0]\n\n    print(ans + 1)"", ""for i in range(int(input())):\n    a, b, p = map(int, input().split())\n    s = input()\n    dp = [0 for i in range(len(s))]\n    for j in range(len(s) - 2, -1, -1):\n        if s[j] != s[j + 1] or dp[j + 1] == 0:\n            if s[j] == 'B':\n                if dp[j + 1] == 0:\n                    dp[j] = b\n                else:\n                    dp[j] = dp[j + 1] + b\n            else:\n                if dp[j + 1] == 0:\n                    dp[j] = a\n                else:\n                    dp[j] = dp[j + 1] + a\n        else:\n            dp[j] = dp[j + 1]\n    ans = 1\n    for i in dp:\n        if i > p:\n            ans += 1\n        else:\n            break\n    print(ans)"", ""from math import *\n\ndef check(a, b, p, s, x):\n    ps = s[x]\n    ans = 0\n    for i in range(x, len(s)):\n        if ps == s[i]:\n            pass\n        else:\n            if ps == 'A':\n                ans += a\n            else:\n                ans += b\n            if s[i] == 'E':\n                break\n            ps = s[i]\n    return ans <= p\n\nzzz = int(input())\nfor zz in range(zzz):\n    a, b, p = list(map(int, input().split()))\n    s = input()\n    s = list(s)\n    s[-1] = 'E'\n    s = ''.join(s)\n    lb = 0\n    ub = len(s) + 1\n    while lb + 1 < ub:\n        tx = (lb + ub) // 2\n        dx = (ub -lb)//2\n        if check(a, b, p, s, tx):\n            ub -= dx\n        else:\n            lb += dx\n        #print(ub, lb, dx)\n\n    x = (lb + ub) // 2\n    for i in range(4):\n        if x > 0 and check(a, b, p, s, x-1):\n            x -= 1\n        elif x <= len(s) and not check(a, b, p, s, x):\n            x += 1\n    print(min(x + 1, len(s)))\n    \n"", ""t = int(input())\nfor _ in range(t):\n    a,b,p = map(int,input().split())\n    sl = list(input())\n    before = \""\""\n    for idx, i in enumerate(sl[::-1][1:]):\n        cost = a if i == \""A\"" else b\n        if before == i:\n            continue\n        if cost > p:\n            break\n        else:\n            before = i\n            p -= cost\n    else:\n        print(1)\n        continue\n    print(len(sl) - idx)""]","{\n  ""inputs"": [\n    ""5\n2 2 1\nBB\n1 1 1\nAB\n3 2 8\nAABBBBAABB\n5 3 4\nBBBBB\n2 1 1\nABABAB\n""\n  ],\n  ""outputs"": [\n    ""2\n1\n3\n1\n6\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1420/C1,"constructive algorithms,dp,greedy","This is the easy version of the problem. The difference between the versions is that the easy version has no swap operations. You can make hacks only if all versions of the problem are solved.\n\nPikachu is a cute and friendly pokémon living in the wild pikachu herd.\n\nBut it has become known recently that infamous team R wanted to steal all these pokémon! Pokémon trainer Andrew decided to help Pikachu to build a pokémon army to resist.\n\nFirst, Andrew counted all the pokémon — there were exactly $n$ pikachu. The strength of the $i$-th pokémon is equal to $a_i$, and all these numbers are distinct.\n\nAs an army, Andrew can choose any non-empty subsequence of pokemons. In other words, Andrew chooses some array $b$ from $k$ indices such that $1 \le b_1 < b_2 < \dots < b_k \le n$, and his army will consist of pokémons with forces $a_{b_1}, a_{b_2}, \dots, a_{b_k}$.\n\nThe strength of the army is equal to the alternating sum of elements of the subsequence; that is, $a_{b_1} - a_{b_2} + a_{b_3} - a_{b_4} + \dots$.\n\nAndrew is experimenting with pokémon order. He performs $q$ operations. In $i$-th operation Andrew swaps $l_i$-th and $r_i$-th pokémon.\n\nNote: $q=0$ in this version of the task.\n\nAndrew wants to know the maximal stregth of the army he can achieve with the initial pokémon placement. He also needs to know the maximal strength after each operation.\n\nHelp Andrew and the pokémon, or team R will realize their tricky plan!\n\n\n-----Input-----\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer $t$ ($1 \le t \le 10^3$) denoting the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $q$ ($1 \le n \le 3 \cdot 10^5, q = 0$) denoting the number of pokémon and number of operations respectively.\n\nThe second line contains $n$ distinct positive integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le n$) denoting the strengths of the pokémon.\n\n$i$-th of the last $q$ lines contains two positive integers $l_i$ and $r_i$ ($1 \le l_i \le r_i \le n$) denoting the indices of pokémon that were swapped in the $i$-th operation.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \cdot 10^5$, and the sum of $q$ over all test cases does not exceed $3 \cdot 10^5$. \n\n\n-----Output-----\n\nFor each test case, print $q+1$ integers: the maximal strength of army before the swaps and after each swap.\n\n\n-----Example-----\nInput\n3\n3 0\n1 3 2\n2 0\n1 2\n7 0\n1 2 5 4 3 6 7\n\nOutput\n3\n2\n9\n\n\n\n-----Note-----\n\nIn third test case we can build an army in such way: [1 2 5 4 3 6 7], its strength will be $5−3+7=9$.","[""import sys\ninput = sys.stdin.readline\nfrom bisect import bisect_right\n\nbin_s = [1]\nwhile bin_s[-1] <= 10 ** 9:\n    bin_s.append(bin_s[-1] * 2)\n\n\ndef main():\n    n, q = map(int, input().split())\n    alst = list(map(int, input().split()))\n    dp = [[-1, -1] for _ in range(n)]\n    dp[0] = [alst[0], 0]\n    for i, a in enumerate(alst[1:], start = 1):\n        dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + a)\n        dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - a)\n    print(max(dp[-1]))\n    \n\nfor _ in range(int(input())):\n    main()"", ""for i in range(int(input())):\n\tn, q = list(map(int, input().split()))\n\ta = list(map(int, input().split()))\n\ttot = 0\n\tsmall = 400000\n\tbig = 0\n\tgoingUp = True\n\tfor i, val in enumerate(a):\n\t\tif goingUp:\n\t\t\tif val > big:\n\t\t\t\tbig = val\n\t\t\telse:\n\t\t\t\ttot += big\n\t\t\t\tgoingUp = False\n\t\t\t\tsmall = val\n\t\telse:\n\t\t\tif val < small:\n\t\t\t\tsmall = val\n\t\t\telse:\n\t\t\t\ttot -= small\n\t\t\t\tgoingUp = True\n\t\t\t\tbig = val\n\tif goingUp:\n\t\ttot += big\n\tprint(tot)"", ""import sys\ninput = sys.stdin.readline\n\nt=int(input())\n\nfor tests in range(t):\n    n,q=list(map(int,input().split()))\n    A=list(map(int,input().split()))\n    #Q=[tuple(map(int,input().split())) for i in range(q)]\n\n    DP0=[0]*n\n    DP1=[0]*n\n\n    for i in range(n):\n        DP0[i]=max(DP0[i-1],DP1[i-1]+A[i])\n        DP1[i]=max(DP1[i-1],DP0[i-1]-A[i])\n\n    #print(DP0)\n    #print(DP1)\n\n    print(DP0[-1])\n    \n\n    \n"", ""import sys\ninput = sys.stdin.readline\nfor nt in range(int(input())):\n\tn,q = map(int,input().split())\n\ta = list(map(int,input().split()))\n\tif n==1:\n\t\tprint (a[0])\n\t\tcontinue\n\tdp = [[0,0] for i in range(n)]\n\tdp[0][0] = a[0]\n\tdp[1][0] = max(a[0],a[1])\n\tdp[1][1] = max(0,a[0]-a[1])\n\tfor i in range(2,n):\n\t\tdp[i][0] = max(dp[i-1][0],dp[i-1][1]+a[i])\n\t\tdp[i][1] = max(dp[i-1][1],dp[i-1][0]-a[i])\n\tprint (max(dp[-1][0],dp[-1][1]))"", ""t = int(input())\n\nfor _ in range(t):\n    n, q = list(map(int, input().split()))\n    \n    a = list(map(int, input().split()))\n    \n    best_p = best_m = 0\n    \n    for x in a:\n        best_p = max(best_p, best_m - x)\n        best_m = max(best_m, best_p + x)\n        \n    print(max(best_p, best_m))\n"", ""from sys import stdin\n\ntt = int(stdin.readline())\n\nfor loop in range(tt):\n\n    n,q = map(int,stdin.readline().split())\n    a   = list(map(int,stdin.readline().split()))\n\n    dp = [0,float(\""-inf\"")]\n\n    for i in range(n):\n        \n        ndp = [dp[0],dp[1]]\n        ndp[0] = max(ndp[0] , dp[1]-a[i])\n        ndp[1] = max(ndp[1] , dp[0]+a[i])\n        dp = ndp\n\n    print (max(dp))"", ""INF = 10 ** 15\n\nfor _ in range(int(input())):\n    n, q = tuple(map(int, input().split()))\n    arr = list(map(int, input().split()))\n\n    a = -INF\n    b = 0\n    for i in arr:\n        if a == -INF:\n            c = 0\n            d = i\n        else:\n            c = b - i\n            d = a + i\n        a, b = max(a, c), max(b, d)\n\n    print(max(a, b))\n""]","{\n  ""inputs"": [\n    ""3\n3 0\n1 3 2\n2 0\n1 2\n7 0\n1 2 5 4 3 6 7\n""\n  ],\n  ""outputs"": [\n    ""3\n2\n9\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1443/B,"dp,greedy,math,sortings","Bertown is a city with $n$ buildings in a straight line.\n\nThe city's security service discovered that some buildings were mined. A map was compiled, which is a string of length $n$, where the $i$-th character is ""1"" if there is a mine under the building number $i$ and ""0"" otherwise.\n\nBertown's best sapper knows how to activate mines so that the buildings above them are not damaged. When a mine under the building numbered $x$ is activated, it explodes and activates two adjacent mines under the buildings numbered $x-1$ and $x+1$ (if there were no mines under the building, then nothing happens). Thus, it is enough to activate any one mine on a continuous segment of mines to activate all the mines of this segment. For manual activation of one mine, the sapper takes $a$ coins. He can repeat this operation as many times as you want.\n\nAlso, a sapper can place a mine under a building if it wasn't there. For such an operation, he takes $b$ coins. He can also repeat this operation as many times as you want.\n\nThe sapper can carry out operations in any order.\n\nYou want to blow up all the mines in the city to make it safe. Find the minimum number of coins that the sapper will have to pay so that after his actions there are no mines left in the city.\n\n\n-----Input-----\n\nThe first line contains one positive integer $t$ ($1 \le t \le 10^5$) — the number of test cases. Then $t$ test cases follow.\n\nEach test case begins with a line containing two integers $a$ and $b$ ($1 \le a, b \le 1000$) — the cost of activating and placing one mine, respectively.\n\nThe next line contains a map of mines in the city — a string consisting of zeros and ones.\n\nThe sum of the string lengths for all test cases does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, output one integer — the minimum number of coins that the sapper will have to pay.\n\n\n-----Example-----\nInput\n2\n1 1\n01000010\n5 1\n01101110\n\nOutput\n2\n6\n\n\n\n-----Note-----\n\nIn the second test case, if we place a mine under the fourth building and then activate it, then all mines on the field are activated. The cost of such operations is six, $b=1$ coin for placing a mine and $a=5$ coins for activating.","[""t = int(input())\n\nfor case in range(t):\n    a, b = list(map(int, input().split()))\n    s = input()\n\n    z = 10000\n    total = 0\n    act = False\n\n    for i in range(len(s)):\n        cur = s[i]\n        if cur == '0':\n            z += 1\n            act = False\n        else:\n            if not act:\n                act = True\n                total += min(a, b * z)\n                z = 0\n\n    print(total)\n"", ""t=int(input())\nfor you in range(t):\n    l=input().split()\n    a=int(l[0])\n    b=int(l[1])\n    s=input()\n    n=len(s)\n    l=[]\n    start=0\n    end=0\n    done=0\n    for i in range(n):\n        if(done):\n            if(s[i]=='1'):\n                end+=1\n            else:\n                l.append((start,end))\n                done=0\n        else:\n            if(s[i]=='1'):\n                done=1\n                start=i\n                end=i\n    if(done):\n        l.append((start,end))\n    z=a*len(l)\n    lo=[]\n    for i in range(len(l)-1):\n        lo.append(l[i+1][0]-l[i][1]-1)\n    for i in lo:\n        if(i*b<a):\n            z-=a\n            z+=(i*b)\n    print(z)\n"", ""for i in range(int(input())):\n    a,b=list(map(int,input().split()))\n    s=input()\n    j=0\n    n=len(s)\n    l=[]\n    while j<n:\n        if s[j]=='1':\n            x=j\n            while s[j]=='1':\n                j+=1\n                if j==n:\n                    break\n            y=j-1\n            l.append([x,y])\n        else:\n            j+=1\n    ans=0\n    j=0\n    while j<len(l):\n        if j==0:\n            ans+=a\n        else:\n            ans+=min(a,b*(l[j][0]-l[j-1][1]-1))\n        j+=1\n    print(ans)\n                \n    \n                \n            \n    \n"", ""for _ in range(int(input())):\n\ta,b = list(map(int, input().split()))\n\ts = input()\n\tcost = 0\n\trowcost = a\n\tamchain = False\n\tfor c in s:\n\t\tif c == '1':\n\t\t\tif not amchain and rowcost:\n\t\t\t\tamchain = True\n\t\t\t\tcost += min(rowcost, a)\n\t\telse:\n\t\t\tif amchain:\n\t\t\t\tamchain = False\n\t\t\t\trowcost = b\n\t\t\telse:\n\t\t\t\trowcost += b\n\tprint(cost)\n\t\n"", ""for t in range(int(input())):\n    a,b = list(map(int, input().split()))\n    m = input()\n    x=[]\n    i=0\n    while i<len(m) and m[i]=='0':\n        i+=1\n    cs=0\n\n    while i< len(m):\n        if m[i]=='0':\n            cs+=1\n        if m[i]=='1' and cs!=0:\n            x+=[cs]\n            cs=0\n        i+=1\n    cp = (len(x)+1)*a\n    for i in x:\n        if i*b<a:\n            cp-=a\n            cp+=i*b\n    if m=='0'*len(m):\n        print(0)\n    else:\n        print(cp)\n"", ""\n\nfor _ in range(int(input())):\n    \n    a, b = map(int, input().split())\n    \n    x = 0\n    y = 10 ** 10\n    \n    for i in input():\n        \n        if i == '0':\n            \n            x, y = min(x, y), min(y + b, x + b + a)\n            \n        else:\n            \n            x, y = 10 ** 10, min(y, x + a)\n            \n            \n    print(min(x, y))"", ""import sys\nimport math\ndef II():\n\treturn int(sys.stdin.readline())\n \ndef LI():\n\treturn list(map(int, sys.stdin.readline().split()))\n \ndef MI():\n\treturn list(map(int, sys.stdin.readline().split()))\n \ndef SI():\n\treturn sys.stdin.readline().strip()\nt = II()\nfor q in range(t):\n\ta,b = MI()\n\ts = list(SI())\n\tx = []\n\ty = []\n\tcount = 1\n\tfor i in range(1,len(s)):\n\t\tif s[i] == s[i-1]:\n\t\t\tcount+=1\n\t\telse:\n\t\t\tif s[i-1] == \""0\"":\n\t\t\t\ty.append(0)\n\t\t\telse:\n\t\t\t\ty.append(1)\n\t\t\tx.append(count)\n\t\t\tcount = 1\n\tif len(s)!=0 and s[-1] == \""1\"":\n\t\ty.append(1)\n\t\tx.append(count)\n\tif len(y)!=0 and y[0] == 0:\n\t\ty.pop(0)\n\t\tx.pop(0)\n\ty1 = []\n\tans = 0\n\tfor i in range(len(y)):\n\t\tif y[i] == 0:\n\t\t\ty1.append(x[i])\n\t\telse:\n\t\t\tans+=a\n\tfor i in y1:\n\t\tif i*b<a:\n\t\t\tans-=a\n\t\t\tans+=i*b\n\tprint(ans)\n"", ""import sys\nfor _ in range(int(sys.stdin.readline())):\n\ta=list(map(int,sys.stdin.readline().strip().split(\"" \"")))\n\tb=sys.stdin.readline().strip()\n\tn=0\n\tinq=False\n\ts=0\n\tif b.count(\""1\"")!=0:\n\t\tfor i in b[b.index(\""1\""):]:\n\t\t\tif i==\""1\"":\n\t\t\t\tif not inq:\n\t\t\t\t\tinq=True\n\t\t\t\t\tif n!=0:\n\n\t\t\t\t\t\ts+=min(a[0],n*a[1])\n\t\t\t\t\telse:\n\t\t\t\t\t\ts+=a[0]\n\t\t\t\t\tn=0\n\t\t\telse:\n\t\t\t\tinq=False\n\t\t\t\tn+=1\n\tprint(s)\n"", ""import sys\ninput=sys.stdin.readline\n\nt=int(input())\nfor _ in range(t):\n    x,y=list(map(int,input().split()))\n    s=list(input())\n    if \""1\"" not in s:\n        print(0)\n    else:\n        c=s.index(\""1\"")\n        d=len(s)-s[::-1].index(\""1\"")\n        s=s[c:d]\n        b=[]\n        c=0\n        for i in range(len(s)):\n            if s[i]==\""0\"":\n                c+=1\n            else:\n                if c!=0:\n                    b.append(c)\n                c=0\n        s=x\n        for i in range(len(b)):\n            if b[i]*y>x:\n                s+=x\n            else:\n                s+=b[i]*y\n        print(s)"", ""import math\nimport sys\n\n\ndef chek(m, b, c, li):\n    for i in range(li):\n        if m[i] + b[i] > c:\n            return False\n    return True\n\n\n# 113759\ninput = lambda: sys.stdin.readline().rstrip()\nf = int(input())\nfor _ in range(f):\n    a, b = list(map(int, input().split()))\n    s = input()\n    mas = []\n    c = 1\n    k = len(s)\n    cur = 1\n    while c != k:\n        if s[c] == s[c - 1]:\n            cur += 1\n        else:\n            if len(mas) != 0:\n                mas.append(cur)\n                cur = 1\n            else:\n                if s[c] == \""0\"":\n                    mas.append(cur)\n                    cur = 1\n                else:\n                    cur = 1\n        c += 1\n    if s[c - 1] == \""1\"":\n        mas.append(cur)\n    ans = 0\n    for i in range(len(mas)):\n        if i % 2 == 0:\n            ans += a\n        else:\n            if a > b * mas[i]:\n                ans += b * mas[i]\n                ans -= a\n    print(ans)\n"", ""def f():\n    a, b = map(int, input().split())\n    s = input()\n    ToF = False\n    c = 0\n    ans = 0\n    for item in s:\n        if ToF:\n            if item == \""0\"":\n                c += 1\n            else:\n                ans += min(c * b, a)\n                c = 0\n        if item == \""1\"":\n            ToF = True\n    print(ans + a * ToF)\n\n\nt = int(input())\nfor i in range(t):\n    f()"", ""t=int(input())\nfor _ in range(t):\n    a,b=list(map(int,input().split()))\n    m=input()\n    flag=False\n    l=[]\n    prev=0\n    flag=False\n    for i in range(len(m)):\n        if flag:\n            if m[i]=='0':\n                l.append((prev,i-1))\n                flag=False\n            else:\n                continue \n        else:\n            if m[i]=='0':\n                continue\n            else:\n                flag=True \n                prev=i \n    if flag:\n        l.append((prev,len(m)-1))\n    # print(l)\n    if(len(l)==1):\n        print(a)\n    elif (len(l)==0):\n        print(0)\n    else:\n        ans=a\n        for i in range(1,len(l)):\n            if (l[i][0]-l[i-1][1]-1)*b<=a:\n                ans+=(l[i][0]-l[i-1][1]-1)*b\n            else:\n                ans+=a \n        print(ans)\n        \n        \n        \n"", ""T = int(input())\nfor t in range(T):\n    a, b = [int(x) for x in input().split()]\n    mines = input()\n    price = 0\n    last = \""\""\n    not_mines = []\n    there_was_mines = False\n    not_mine = 0\n    for c in mines:\n        if c == '1':\n            if last != c:\n                price += a\n                if not_mine > 0:\n                    if there_was_mines:\n                        not_mines.append(not_mine)\n                    not_mine = 0\n            there_was_mines = True\n        else:\n            not_mine += 1\n        last = c\n    # print(not_mines)\n    for m in not_mines:\n        if m*b < a:\n            price = price - a + m*b\n        \n                \n                \n\n    print(price)"", ""gans = []\nfor _ in range(int(input())):\n    a, b = map(int, input().split())\n    w = list(map(int, list(input())))\n    u = []\n    k = 1\n    for i in range(1, len(w)):\n        if w[i] == w[i - 1]:\n            k += 1\n        else:\n            u.append([w[i - 1], k])\n            k = 1\n    u.append([w[-1], k])\n    dp = [0] * len(u)\n    if u[0][0] == 1:\n        dp[0] = a\n    for i in range(1, len(u)):\n        if u[i][0] == 0:\n            dp[i] = dp[i - 1]\n        else:\n            if i == 1:\n                dp[i] = dp[i - 1] + a\n            else:\n                dp[i] = min(dp[i - 1] + a, dp[i - 1] + b * u[i - 1][1])\n    gans.append(dp[-1])\nprint(*gans, sep='\\n')\n            \n"", ""mod = 10**9 + 7\ndef solve():\n    a, b = map(int, input().split())\n    s = input()\n    v = []\n    tmp = 0\n    ok = False\n    for i in range(len(s)):\n        if s[i] == '1':\n            if tmp > 0:\n                v.append(tmp)\n            tmp = 0\n            ok = True\n        elif ok:\n            tmp += 1\n    v.sort()\n    ans = a * (len(v) + 1)\n    if not ok:\n        ans = 0\n    for i in range(len(v)):\n        if ans >= ans - a + b * v[i]:\n            ans = ans - a + b * v[i]\n        else:\n            break\n    print(ans)\nt = 1\nt = int(input())\nwhile t > 0:\n    solve()\n    t -= 1"", ""t = int(input())\nfor _ in range(t):\n\ta, b = list(map(int, input().split()))\n\ts = input()\n\tn = len(s)\n\n\tind1 = 0\n\tind2 = n-1\n\n\twhile ind1 != n and s[ind1] == '0':\n\t\tind1 += 1\n\n\twhile ind2 != -1 and s[ind2] == '0':\n\t\tind2 -= 1\n\n\tif ind1 == n:\n\t\tprint(0)\n\t\tcontinue\n\n\t# print(ind1, ind2)\n\n\n\tarr = []\n\tcount = 0\n\tfor i in range(ind1, ind2+1):\n\t\tif s[i] == '0':\n\t\t\tcount += 1\n\t\telse:\n\t\t\tif count != 0:\n\t\t\t\tarr += [count]\n\t\t\tcount = 0\n\n\tif count != 0:\n\t\tarr += [count]\n\n\tans = a*(len(arr)+1)\n\n\t# print(arr)\n\tarr.sort()\n\n\ttot = 0\n\tfor i in range(len(arr)):\n\t\ttot += arr[i]\n\t\tans = min(ans, b*tot + a*(len(arr)-i))\n\n\tprint(ans)\n"", ""import sys,math\n# import re\n# from heapq import *\n# from collections import defaultdict as dd\n# from collections import Counter as cc\n# sys.setrecursionlimit(10**6)#thsis is must\nmod = 10**9+7; md = 998244353\ninput = lambda: sys.stdin.readline().strip()\ninp = lambda: list(map(int,input().split()))\n#______________________________________________________\nfor _ in range(int(input())):\n\ta,b = inp()\n\ts = str(input())\n\tans = []\n\tc = 0\n\tfor i in s:\n\t\tif i==\""1\"":\n\t\t\tc+=1\n\t\telse:\n\t\t\tif c==0:\n\t\t\t\tcontinue\n\t\t\tans.append(c)\n\t\t\tc=0\n\tif c>0:ans.append(c)\n\tflag = False\n\tc =0\n\tres = []\n\tfor i in s:\n\t\tif i==\""1\"":\n\t\t\tflag = True\n\t\tif flag==True:\n\t\t\tif i==\""0\"":\n\t\t\t\tc+=1\n\t\t\telse:\n\t\t\t\tif c==0:\n\t\t\t\t\tcontinue\n\t\t\t\tres.append(c)\n\t\t\t\tc = 0\n\t# print(res)\n\t# print(ans)\n\tfin = 0\n\tif len(ans)>0:\n\t\tfin+=a\n\tif len(ans)>1:\n\t\tfor i in range(len(res)):\n\t\t\tif res[i]*b>a:\n\t\t\t\tfin+=a\n\t\t\telse:\n\t\t\t\tfin+=res[i]*b\n\tprint(fin)\n\n"", ""for _ in range (int(input())):\n    a,b=map(int,input().split())\n    s=input()\n    n=len(s)\n    j=0\n    while j<n and s[j]=='0':\n        j+=1\n    c=0\n    r=a\n    if j==n:\n        r=0\n    damp=0\n    for i in range(j,n):\n        if s[i]=='1':\n            if damp>0:\n                r+=min(a,damp*b)\n            damp=0\n        else:\n            damp+=1\n        #print(damp,r)\n    print(r)"", ""def read_generator():\n    while True:\n        tokens = input().split(' ')\n        for t in tokens:\n            yield t\n\nreader = read_generator()\n\ndef readword():\n    return next(reader)\n\ndef readint():\n    return int(next(reader))\n\ndef readfloat():\n    return float(next(reader))\n\ndef readline():\n    return input()\n\ndef solve(a, b, m):\n    o = []\n    new = True\n    i = 0\n    for c in m:\n        if c == '1':\n            if new:\n                o.append([i, i])\n                new = False\n            else:\n                o[len(o) - 1][1] = i\n        else:\n            new = True\n        i += 1\n\n    res = len(o) * a\n\n    for i in range(1, len(o)):\n        cur = o[i]\n        prev = o[i - 1]\n        if (cur[0] - prev[1] - 1) * b < a:\n            res -= a\n            res += (cur[0] - prev[1] - 1) * b\n\n    return res\n\n\ntests = readint()\n\nfor t in range(tests):\n    (a, b) = readint(), readint()\n    m = readline()\n    print(solve(a, b, m))"", ""\""\""\""T=int(input())\nfor _ in range(0,T):\n    n=int(input())\n    a,b=map(int,input().split())\n    s=input()\n    s=[int(x) for x in input().split()]\n    for i in range(0,len(s)):\n        a,b=map(int,input().split())\""\""\""\n\n\n\nT=int(input())\nfor _ in range(0,T):\n    a,b=list(map(int,input().split()))\n    s=input()\n    ptr1=len(s)\n    ptr2=0\n    for i in range(0,len(s)):\n        if(s[i]=='1' and ptr1==len(s)):\n            ptr1=i\n        if(s[i]=='1'):\n            ptr2=i+1\n\n    if(ptr1==len(s)):\n        print(0)\n    else:\n        L1=[]\n        L0=[]\n        c=1\n        for i in range(ptr1+1,ptr2):\n            if(s[i]==s[i-1]):\n                c+=1\n            else:\n                if(s[i-1]=='0'):\n                    L0.append(c)\n                    c=1\n                else:\n                    L1.append(c)\n                    c=1\n        L1.append(c)\n\n        if(len(L1)==1):\n            print(a)\n        else:\n            ans=a\n            for i in range(0,len(L1)-1):\n                if((b*L0[i])<=a):\n                    ans+=(b*L0[i])\n                else:\n                    ans+=a\n            print(ans)\n                \n"", ""t = int(input())\nfor case in range(t):\n    a, b = [int(x) for x in input().split(' ')]\n    s = input()\n    n = len(s)\n    for j in range(2):\n        for i in range(len(s)):\n            if s[i] != '0':\n                break\n        s = s[i:]\n        s = s[::-1]\n    if s == '0':\n        s = ''\n    y = [u for u in s.split('0') if u]\n    c = len(y) * a\n    x = [u for u in s.split('1') if u]\n    for z in x:\n        if len(z) * b < a:\n            c -= a\n            c += len(z) * b\n    print(c)\n\n"", ""for _ in range(int(input())):\n    a,b = list(map(int,input().split()))\n    arr = list(map(int,list(input())))+[0]\n    n = len(arr)\n    now = 0\n    lastEnds = 0\n    fl = False\n    lenghts = []\n    dists = []\n    for i in range(n):\n        if fl and not arr[i]:\n            if len(lenghts):\n                dists.append(i-lastEnds-now)\n            lenghts.append(now)\n            fl = False\n            now = 0\n            lastEnds = i\n        elif fl and arr[i]:\n            now+=1\n        elif not fl and arr[i]:\n            fl = True\n            now = 1\n\n    price = a\n    if len(lenghts) == 0:\n        price = 0\n\n    for i in range(len(dists)):\n        if dists[i]*b<a:\n            price+=dists[i]*b\n        else:\n            price+=a\n\n    print(price)\n""]","{\n  ""inputs"": [\n    ""2\n1 1\n01000010\n5 1\n01101110\n""\n  ],\n  ""outputs"": [\n    ""2\n6\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1194/B,implementation,"You are given a picture consisting of $n$ rows and $m$ columns. Rows are numbered from $1$ to $n$ from the top to the bottom, columns are numbered from $1$ to $m$ from the left to the right. Each cell is painted either black or white. \n\nYou think that this picture is not interesting enough. You consider a picture to be interesting if there is at least one cross in it. A cross is represented by a pair of numbers $x$ and $y$, where $1 \le x \le n$ and $1 \le y \le m$, such that all cells in row $x$ and all cells in column $y$ are painted black.\n\nFor examples, each of these pictures contain crosses:\n\n [Image] \n\nThe fourth picture contains 4 crosses: at $(1, 3)$, $(1, 5)$, $(3, 3)$ and $(3, 5)$.\n\nFollowing images don't contain crosses:\n\n [Image] \n\nYou have a brush and a can of black paint, so you can make this picture interesting. Each minute you may choose a white cell and paint it black.\n\nWhat is the minimum number of minutes you have to spend so the resulting picture contains at least one cross?\n\nYou are also asked to answer multiple independent queries.\n\n\n-----Input-----\n\nThe first line contains an integer $q$ ($1 \le q \le 5 \cdot 10^4$) — the number of queries.\n\nThe first line of each query contains two integers $n$ and $m$ ($1 \le n, m \le 5 \cdot 10^4$, $n \cdot m \le 4 \cdot 10^5$) — the number of rows and the number of columns in the picture.\n\nEach of the next $n$ lines contains $m$ characters — '.' if the cell is painted white and '*' if the cell is painted black.\n\nIt is guaranteed that $\sum n \le 5 \cdot 10^4$ and $\sum n \cdot m \le 4 \cdot 10^5$.\n\n\n-----Output-----\n\nPrint $q$ lines, the $i$-th line should contain a single integer — the answer to the $i$-th query, which is the minimum number of minutes you have to spend so the resulting picture contains at least one cross.\n\n\n-----Example-----\nInput\n9\n5 5\n..*..\n..*..\n*****\n..*..\n..*..\n3 4\n****\n.*..\n.*..\n4 3\n***\n*..\n*..\n*..\n5 5\n*****\n*.*.*\n*****\n..*.*\n..***\n1 4\n****\n5 5\n.....\n..*..\n.***.\n..*..\n.....\n5 3\n...\n.*.\n.*.\n***\n.*.\n3 3\n.*.\n*.*\n.*.\n4 4\n*.**\n....\n*.**\n*.**\n\nOutput\n0\n0\n0\n0\n0\n4\n1\n1\n2\n\n\n\n-----Note-----\n\nThe example contains all the pictures from above in the same order.\n\nThe first 5 pictures already contain a cross, thus you don't have to paint anything.\n\nYou can paint $(1, 3)$, $(3, 1)$, $(5, 3)$ and $(3, 5)$ on the $6$-th picture to get a cross in $(3, 3)$. That'll take you $4$ minutes.\n\nYou can paint $(1, 2)$ on the $7$-th picture to get a cross in $(4, 2)$.\n\nYou can paint $(2, 2)$ on the $8$-th picture to get a cross in $(2, 2)$. You can, for example, paint $(1, 3)$, $(3, 1)$ and $(3, 3)$ to get a cross in $(3, 3)$ but that will take you $3$ minutes instead of $1$.\n\nThere are 9 possible crosses you can get in minimum time on the $9$-th picture. One of them is in $(1, 1)$: paint $(1, 2)$ and $(2, 1)$.","[""import sys\n\nq = int(sys.stdin.readline().strip())\nfor t in range(0, q):\n    n, m = list(map(int, sys.stdin.readline().strip().split()))\n    L = []\n    R = [0] * n\n    C = [0] * m\n    for i in range (0, n):\n        L.append(sys.stdin.readline().strip())\n        for j in range (0, m):\n            if L[i][j] != \""*\"":\n                R[i] = R[i] + 1\n                C[j] = C[j] + 1\n    ans = n + m - 1\n    for i in range (0, n):\n        for j in range (0, m):\n            x = 0\n            if L[i][j] != \""*\"":\n                x = -1\n            ans = min([ans, R[i]+C[j]+x])\n    print(ans)"", ""import sys\nQ = int(input())\nfor _ in range(Q):\n    N, M = map(int, sys.stdin.readline().split())\n    G = [[1 if s == '*' else 0 for s in sys.stdin.readline().strip()] for _ in range(N)]\n    ans = 10**9+7\n    G1 = [sum(g) for g in G]\n    G = list(map(list, zip(*G)))\n    G2 = [sum(g) for g in G]\n    G = list(map(list, zip(*G)))\n    K = N + M - 1\n    for i in range(N):\n        for j in range(M):\n            if G[i][j]:\n                ans = min(ans, K - (G1[i] + G2[j] - 1))\n            else:\n                ans = min(ans, K - (G1[i] + G2[j]))\n    sys.stdout.write('{}\\n'.format(ans))"", ""import sys\nimport math\ninput = sys.stdin.readline\n\nq=int(input())\nfor i in range(q):\n\tn,m=list(map(int,input().split()))\n\tr=[0]*n\n\tc=[0]*m\n\tarr=[]\n\tfor i in range(n):\n\t\tarr.append(input())\n\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif arr[i][j]==\"".\"":\n\t\t\t\tr[i]+=1\n\t\t\t\tc[j]+=1\n\tminn=1000000000\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif arr[i][j]==\"".\"":\n\t\t\t\tminn=min(minn,r[i]+c[j]-1)\n\t\t\telse:\n\t\t\t\tminn=min(minn,r[i]+c[j])\n\n\tprint(minn)\n\t\t\n"", ""q = int(input())\nfor query in range(q):\n\tn, m = list(map(int, input().split()))\n\tmatrix = [input() for i in range(n)]\n\trow = [0] * n\n\tcol = [0] * m\n\tfor i in range(n):\n\t\tsuma = 0\n\t\tfor j in range(m):\n\t\t\tif matrix[i][j] == '*':\n\t\t\t\tsuma += 1\n\t\trow[i] = suma\n\tfor j in range(m):\n\t\tsuma = 0\n\t\tfor i in range(n):\n\t\t\tif matrix[i][j] == '*':\n\t\t\t\tsuma += 1\n\t\tcol[j] = suma\n\twynik = 100000000000\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tpom = m + n - 1 - (row[i] + col[j] - (1 if matrix[i][j] == '*' else 0))\n\t\t\twynik = min(wynik, pom)\n\tprint(wynik)\n\t\t\t\n"", ""from sys import stdin\nc=int(stdin.readline().strip())\nfor i in range(c):\n    n,m=list(map(int,stdin.readline().strip().split()))\n    s=[stdin.readline().strip() for j in range(n)]\n    ms=[]\n    ns=[]\n    for j in range(n):\n        ns.append(s[j].count(\"".\""))\n    \n    for j in range(m):\n        ms.append(0)\n        for k in range(n):\n            if s[k][j]==\"".\"":\n                ms[-1]+=1\n    ans=10**15\n    for j in range(n):\n        for k in range(m):\n            x=ns[j]+ms[k]\n            if s[j][k]==\"".\"":\n                x-=1\n            ans=min(ans,x)\n    print(ans)\n"", ""t = int(input())\nfor i in range(t):\n    e,s = list(map(int, input().split()))\n    f = []\n    for h in range(e):\n        f.append(input())\n    now = 0\n    mi = 0\n    mi2 = []\n    g = []\n    for y in range(e):\n        now = 0\n        g = []\n        for x in range(s):\n            if(f[y][x]==\""*\""):\n                now+=1\n            else:\n                g.append(x)\n        if(now>mi):\n            mi = now\n            mi2 = []\n            for k in range(len(g)):\n                mi2.append(g[k])\n        elif(now==mi):\n            for k in range(len(g)):\n                mi2.append(g[k])\n    now = 0\n    ma = 0\n    d = True\n    for y in range(s):\n        now = 0\n        for x in range(e):\n            if(f[x][y]==\""*\""):\n                now+=1\n        if(now>ma):\n            ma = now\n            if(y in mi2):\n                d = False\n            else:\n                d = True\n        elif(now==ma):\n            if(y in mi2):\n                d = False\n    if(d):\n        print(e-mi+s-ma)\n    else:\n        print(e-mi+s-ma-1)\n"", ""import sys\ninput = sys.stdin.readline\n\nQ=int(input())\nfor testcases in range(Q):\n    n,m=list(map(int,input().split()))\n\n    MAP=[list(input().strip()) for i in range(n)]\n\n    R=[MAP[i].count(\""*\"") for i in range(n)]\n    C=[]\n    \n    for j in range(m):\n        M=[MAP[i][j] for i in range(n)]\n        C.append(M.count(\""*\""))\n\n    ANS=float(\""inf\"")\n\n    for i in range(n):\n        for j in range(m):\n            if MAP[i][j]==\""*\"":\n                ANS=min(ANS,n+m-R[i]-C[j])\n            else:\n                ANS=min(ANS,n+m-R[i]-C[j]-1)\n\n    print(ANS)\n                \n    \n"", ""n=int(input())\nfor i in range(n):\n    x,y=list(map(int,input().split()))\n    stolb=[0]*y\n    stroki=[0]*x\n    al=[]\n    for j in range(x):\n        st=input()\n        al.append(st)\n        for j2 in range(y):\n            if st[j2]=='.':\n                stroki[j]+=1\n                stolb[j2]+=1\n    mi=1000000000000000\n    for j in range(x):\n        for j2 in range(y):\n            if al[j][j2]=='.':\n                if stroki[j]+stolb[j2]-1<mi:\n                    mi=stroki[j]+stolb[j2]-1\n            else:\n                if stroki[j]+stolb[j2]<mi:\n                    mi=stroki[j]+stolb[j2]\n    print(mi)\n"", ""q = int(input())\nfor _ in range(q):\n    n, m = list(map(int, input().split()))\n    d = [list(input()) for _ in range(n)]\n    count_x = list([x.count('*') for x in d])\n    count_y = list([x.count('*') for x in zip(*d)])\n    #dt = map(list, zip(*d))\n    rls = n+m-1\n    for i in range(n):\n        for j in range(m):\n            a = count_x[i]\n            b = count_y[j]\n            if d[i][j] == '*':\n                rls = min(rls, n+m-a-b)\n            else:\n                rls = min(rls, n+m-a-b-1)\n    print(rls)\n"", ""import io, sys, atexit, os\nimport math as ma\nfrom decimal import Decimal as dec\nfrom itertools import permutations\nfrom itertools import combinations\n\n\ndef li ():\n\treturn list (map (int, input ().split ()))\n\n\ndef num ():\n\treturn map (int, input ().split ())\n\n\ndef nu ():\n\treturn int (input ())\n\n\ndef find_gcd ( x, y ):\n\twhile (y):\n\t\tx, y = y, x % y\n\treturn x\n\n\ndef lcm ( x, y ):\n\tgg = find_gcd (x, y)\n\treturn (x * y // gg)\n\n\nmm = 1000000007\nyp = 0\n\n\ndef solve ():\n\tt =nu()\n\tfor tt in range (t):\n\t\tn,m=num()\n\t\ta=[0]*n\n\t\tx=[0]*n\n\t\ty=[0]*m\n\t\tfor i in range(n):\n\t\t\tp=input()\n\t\t\ta[i]=[0]*m\n\t\t\tfor j in range(m):\n\t\t\t\tif(p[j]==\""*\""):\n\t\t\t\t\ta[i][j]=1\n\t\t\tx[i]=sum(a[i])\n\t\tfor i in range(m):\n\t\t\tcc=0\n\t\t\tfor j in range(n):\n\t\t\t\tcc+=a[j][i]\n\t\t\ty[i]=cc\n\t\tmn=9999999999\n\t\tfor i in range(n):\n\t\t\tfor j in range(m):\n\t\t\t\tpp=0\n\t\t\t\tpp = (n - x [ i ]) + (m - y [ j ])\n\t\t\t\tif(a[i][j]==0):\n\t\t\t\t\tpp-=1\n\t\t\t\tmn=min(mn,pp)\n\t\tprint(mn)\n\n\n\n\n\ndef __starting_point():\n\tsolve ()\n__starting_point()"", ""from fractions import gcd\nimport math\n\n\ndef inverse(a):\n    return pow(a, mod - 2, mod)\n\n\ndef usearch(x, a):\n    lft = 0\n    rgt = len(a) + 1\n    while rgt - lft > 1:\n        mid = (rgt + lft) // 2\n        if a[mid] <= x:\n            lft = mid\n        else:\n            rgt = mid\n    return lft\n\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        n,m = list(map(int, input().split()))\n        a = [input() for i in range(n)]\n        h = 0\n        h_a = []\n        for i in range(m):\n            tmp = 0\n            for j in range(n):\n                if a[j][i] == '*':\n                    tmp += 1\n            if h < tmp:\n                h = tmp\n                h_a = [i]\n            if h == tmp:\n                h_a.append(i)\n        w = 0\n        w_a = []\n        for i in range(n):\n            tmp = len([i for i in a[i] if i == '*'])\n            if w < tmp:\n                w = tmp\n                w_a = [i]\n            if w == tmp:\n                w_a.append(i)\n        flag = 0\n        for i in h_a:\n            for j in w_a:\n                if a[j][i] == '.':\n                    flag = 1\n                    break\n        print(n+m-h-w-flag)\n\nmain()\n"", ""\nfor _ in range(int(input())):\n    m,n=list(map(int,input().strip().split(' ')))\n    grid=[]\n    for i in range(m):\n        grid+=[input()]\n    row=[]\n    col=[]\n    MIN_row=10**10\n    MIN_col=10**10\n    for i in range(m):\n        count=0\n        for j in range(n):\n            if grid[i][j]==\"".\"":\n                count+=1\n        row+=[count]\n        MIN_row=min(MIN_row,count)\n    for j in range(n):\n        count=0\n        for i in range(m):\n            if grid[i][j]==\"".\"":\n                count+=1\n        col+=[count]\n        MIN_col=min(MIN_col,count)\n    \n    want_row=set([])\n    for i in range(len(row)):\n        if row[i]==MIN_row:\n            want_row.add(i)\n            \n    want_col=set([])\n    for i in range(len(col)):\n        if col[i]==MIN_col:\n            want_col.add(i)\n            \n    flag=0\n    for i in range(len(row)):\n        if flag==1:\n            break\n        for j in range(len(col)):\n            if grid[i][j]==\"".\"":\n                if i in want_row and j in want_col:\n                    flag=1\n                    break\n                    \n    print(MIN_row+MIN_col-flag)\n    \n    \n"", ""# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\nfrom sys import stdin, stdout\nimport collections\nimport math\n\nT = int(input())\n \n#A,H,Q = [int(x) for x in stdin.readline().split()] \nfor t in range(T):\n    N,M = [int(x) for x in stdin.readline().split()]\n    #print(N,M)\n    data = []\n    row = [M]*N\n    col = [N]*M\n    for i in range(N):\n        s = input()\n        data.append(list(s))\n        for j in range(M):\n            if s[j]=='*':\n                row[i] -= 1\n                col[j] -= 1\n                \n    min_row = min(row)\n    min_col = min(col)\n    \n    if min_row==0 or min_col==0:\n        print(min_row+min_col)\n    else:\n        r = []\n        c = []\n        #res = 9999999\n        for i in range(N):\n            if row[i]==min_row:\n                r.append(i)\n        for j in range(M):\n            if col[j]==min_col:\n                c.append(j)\n                \n        flag = 0\n        for x in r:\n            for y in c:\n                if data[x][y]=='.' and flag==0:\n                    print(min_row+min_col-1)\n                    flag = 1\n            if flag==1:\n                break\n                    \n        if flag==0:        \n            print(min_row+min_col)\n                    \n        \n    \n    \n    \n \n"", ""q = int(input())\nfor i in range(q):\n    n, m = list(map(int,input().split()))\n    field = [input() for j in range(n)]\n    raw = [0] * n\n    col = [0] * m\n    num = 0\n    for j in range(n):\n        for z in range(m):\n            if field[j][z] == \""*\"":\n                raw[j] += 1\n                col[z] += 1\n    for z in range(m):\n        for j in range(n):\n            temp = raw[j] + col[z] - int(field[j][z] == \""*\"")\n            if num < temp:\n                num = temp\n    print(n + m - num - 1)\n"", ""def gns():\n    return list(map(int,input().split()))\nt=int(input())\n\n\ndef one():\n    n, m = gns()\n    mp = []\n    ns = [0] * n\n    ms = [0] * m\n    for i in range(n):\n        mp.append(input())\n        for j in range(m):\n            if mp[-1][j] == '*':\n                ns[i] += 1\n                ms[j] += 1\n    min_n = max(ns)\n    min_m = max(ms)\n    min_ns = set([i for i in range(n) if ns[i] == min_n])\n    min_ms = set([i for i in range(m) if ms[i] == min_m])\n    ans = n - min_n + m - min_m\n    for i in min_ns:\n        for j in min_ms:\n            if mp[i][j] == '.':\n                print(ans - 1)\n                return\n    print(ans)\n\n\nfor i in range(t):\n    one()\n\n\n\n\n"", ""for TT in range(1, int(input()) + 1):\n    n, m = map(int, input().split())\n    mat = [[1 if c == '*' else 0 for c in input()] for _ in range(n)]\n    h = [sum(l) for l in mat]\n    v = [0] * m\n    for i in range(n):\n        for j in range(m):\n            v[j] += mat[i][j]\n    res = float('inf')\n    for i in range(n):\n        for j in range(m):\n            val = (n - h[i]) + (m - v[j])\n            if mat[i][j] == 0: val -= 1\n            res = min(res, val)\n    print(res)"", ""import sys\ninput = lambda: sys.stdin.readline().strip()\nprint = lambda x: sys.stdout.write(f\""{x}\\n\"")\n\nfor t in range(int(input())):\n  r, c = map(int, input().split())\n  arr = [input() for i in range(r)]\n  rarr = [0] * r\n  carr = [0] * c\n\n  for i in range(r):\n    for j in range(c):\n      if arr[i][j] == '.':\n        rarr[i] += 1\n        carr[j] += 1\n\n  ans = float('inf')\n  for i in range(r):\n    for j in range(c):\n      s = rarr[i] + carr[j]\n      if arr[i][j] == '.':\n        ans = min(ans, s - 1)\n      else:\n        ans = min(ans, s)\n  \n  print(ans)\n"", ""def __starting_point():\n    T = int(input())\n    #fout = open('1194B.out', 'w')\n    for _ in range(T):\n        s = input().rstrip().split()\n        n = int(s[0])\n        m = int(s[1])\n        cell = [[0 for j in range(m)] for i in range(n)]\n        r = [0 for i in range(n)]\n        c = [0 for j in range(m)]\n        for i in range(n):\n            s = input()\n            for j in range(len(s)):\n                cell[i][j] = s[j]\n                if s[j] == '*':\n                    r[i] += 1\n                    c[j] += 1\n        nmax = 0\n        for i in range(n):\n            for j in range(m):\n                if r[i] + c[j] + (cell[i][j] == '.') > nmax:\n                    nmax = r[i] + c[j] + (cell[i][j] == '.')\n        print(str(m + n - nmax) + '\\n')\n\n__starting_point()"", ""q = int(input())\n\nfor _ in range(q):\n    ans = 10000000000\n    n, m = list(map(int, input().split()))\n    picture = []\n    dotcount_w = []\n    dotcount_h = []\n    for _ in range(n):\n        picture.append(input())\n        dotcount_w.append(picture[-1].count(\"".\""))\n\n    for i in range(m):\n        count = 0\n        for j in range(n):\n            if picture[j][i] == \"".\"":\n                count += 1\n        dotcount_h.append(count)\n    for i in range(m):\n        for j in range(n):\n            if picture[j][i] == \"".\"":\n                ans = min(dotcount_h[i]+dotcount_w[j]-1, ans)\n            else:\n                ans = min(dotcount_h[i]+dotcount_w[j], ans)\n    print(ans)\n"", ""q = int(input())\nfor i in range(q):\n    n,m = list(map(int,input().split()))\n    a = [input() for _ in range(n)]\n    a_t = list(zip(*a))\n    mx_1 = mx_2 = 0\n    idx_1 = []\n    idx_2 = []\n    for j,i in enumerate(a):\n        temp = i.count('*')\n        if temp > mx_1:\n            mx_1 = temp\n            idx_1 = [j]\n        elif temp == mx_1:\n            idx_1.append(j)\n    for j,i in enumerate(a_t):\n        temp = i.count('*')\n        if temp > mx_2:\n            mx_2 = temp\n            idx_2 = [j]\n        elif temp == mx_2:\n            idx_2.append(j)\n    ans = 0\n    for i in idx_1:\n        for j in idx_2:\n            if a[i][j] == '.':\n                ans = -1\n    print(n+m-mx_1-mx_2+ans)\n\n"", ""M = 10**9 + 7\nR = lambda: map(int, input().split())\nn = int(input())\nfor i in range(n):\n    n,m = R()\n    L = [[0 for i in range(m)] for j in range(n)]\n    a = []\n    for i in range(n):\n        a.append(input())\n    for i in range(n):\n        c = 0\n        for j in range(m):\n            if a[i][j] == '.':c += 1\n        for j in range(m):\n            L[i][j] = c\n    for i in range(m):\n        c = 0\n        for j in range(n):\n            if a[j][i] == '.':c += 1\n        for j in range(n):\n            L[j][i] += c\n    mi = 10**9\n    k = []\n    for i in range(n):\n        for j in range(m):\n            mi = min(mi,L[i][j])\n    for i in range(n):\n        for j in range(m):\n            if L[i][j] == mi and a[i][j] == '.':\n                mi -= 1\n    print(mi)""]","{\n  ""inputs"": [\n    ""9\n5 5\n..*..\n..*..\n*****\n..*..\n..*..\n3 4\n****\n.*..\n.*..\n4 3\n***\n*..\n*..\n*..\n5 5\n*****\n*.*.*\n*****\n..*.*\n..***\n1 4\n****\n5 5\n.....\n..*..\n.***.\n..*..\n.....\n5 3\n...\n.*.\n.*.\n***\n.*.\n3 3\n.*.\n*.*\n.*.\n4 4\n*.**\n....\n*.**\n*.**\n""\n  ],\n  ""outputs"": [\n    ""0\n0\n0\n0\n0\n4\n1\n1\n2\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1418/B,"greedy,sortings","You are given an array $a$, consisting of $n$ integers.\n\nEach position $i$ ($1 \le i \le n$) of the array is either locked or unlocked. You can take the values on the unlocked positions, rearrange them in any order and place them back into the unlocked positions. You are not allowed to remove any values, add the new ones or rearrange the values on the locked positions. You are allowed to leave the values in the same order as they were.\n\nFor example, let $a = [-1, 1, \underline{3}, 2, \underline{-2}, 1, -4, \underline{0}]$, the underlined positions are locked. You can obtain the following arrays:   $[-1, 1, \underline{3}, 2, \underline{-2}, 1, -4, \underline{0}]$;  $[-4, -1, \underline{3}, 2, \underline{-2}, 1, 1, \underline{0}]$;  $[1, -1, \underline{3}, 2, \underline{-2}, 1, -4, \underline{0}]$;  $[1, 2, \underline{3}, -1, \underline{-2}, -4, 1, \underline{0}]$;  and some others. \n\nLet $p$ be a sequence of prefix sums of the array $a$ after the rearrangement. So $p_1 = a_1$, $p_2 = a_1 + a_2$, $p_3 = a_1 + a_2 + a_3$, $\dots$, $p_n = a_1 + a_2 + \dots + a_n$.\n\nLet $k$ be the maximum $j$ ($1 \le j \le n$) such that $p_j < 0$. If there are no $j$ such that $p_j < 0$, then $k = 0$.\n\nYour goal is to rearrange the values in such a way that $k$ is minimum possible.\n\nOutput the array $a$ after the rearrangement such that the value $k$ for it is minimum possible. If there are multiple answers then print any of them.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \le t \le 1000$) — the number of testcases.\n\nThen $t$ testcases follow.\n\nThe first line of each testcase contains a single integer $n$ ($1 \le n \le 100$) — the number of elements in the array $a$.\n\nThe second line of each testcase contains $n$ integers $a_1, a_2, \dots, a_n$ ($-10^5 \le a_i \le 10^5$) — the initial array $a$.\n\nThe third line of each testcase contains $n$ integers $l_1, l_2, \dots, l_n$ ($0 \le l_i \le 1$), where $l_i = 0$ means that the position $i$ is unlocked and $l_i = 1$ means that the position $i$ is locked.\n\n\n-----Output-----\n\nPrint $n$ integers — the array $a$ after the rearrangement. Value $k$ (the maximum $j$ such that $p_j < 0$ (or $0$ if there are no such $j$)) should be minimum possible. For each locked position the printed value should be equal to the initial one. The values on the unlocked positions should be an arrangement of the initial ones.\n\nIf there are multiple answers then print any of them.\n\n\n-----Example-----\nInput\n5\n3\n1 3 2\n0 0 0\n4\n2 -3 4 -1\n1 1 1 1\n7\n-8 4 -2 -6 4 7 1\n1 0 0 0 1 1 0\n5\n0 1 -4 6 3\n0 0 0 1 1\n6\n-1 7 10 4 -8 -1\n1 0 0 0 0 1\n\nOutput\n1 2 3\n2 -3 4 -1\n-8 -6 1 4 4 7 -2\n-4 0 1 6 3\n-1 4 7 -8 10 -1\n\n\n-----Note-----\n\nIn the first testcase you can rearrange all values however you want but any arrangement will result in $k = 0$. For example, for an arrangement $[1, 2, 3]$, $p=[1, 3, 6]$, so there are no $j$ such that $p_j < 0$. Thus, $k = 0$.\n\nIn the second testcase you are not allowed to rearrange any elements. Thus, the printed array should be exactly the same as the initial one.\n\nIn the third testcase the prefix sums for the printed array are $p = [-8, -14, -13, -9, -5, 2, 0]$. The maximum $j$ is $5$, thus $k = 5$. There are no arrangements such that $k < 5$.\n\nIn the fourth testcase $p = [-4, -4, -3, 3, 6]$.\n\nIn the fifth testcase $p = [-1, 3, 10, 2, 12, 11]$.","[""import math\nfrom collections import deque\nfrom sys import stdin, stdout\nfrom string import ascii_letters\nimport sys\nletters = ascii_letters\ninput = stdin.readline\n#print = stdout.write\n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    can = list(map(int, input().split()))\n    vals = sorted([i for i in range(n) if not can[i]], key=lambda x: -arr[x])\n    res = [0] * n\n    last = 0\n    for i in range(n):\n        if can[i]:\n            res[i] = arr[i]\n        else:\n            res[i] = arr[vals[last]]\n            last += 1\n    print(*res)\n"", ""import sys\nimport math as mt\nimport collections as cc\nimport sys\nimport itertools as it\ninput=sys.stdin.readline\nI=lambda:list(map(int,input().split()))\nfor tc in range(int(input())):\n\tn,=I()\n\tar=I()\n\tl=I()\n\ts=[]\n\tll=l.copy()\n\tloc=cc.defaultdict(int)\n\tfor i in range(n):\n\t\tif l[i]==0:\n\t\t\ts.append(ar[i])\n\t\t\tloc[i]=-10**6\t\n\t\telse:\n\t\t\tloc[i]=ar[i]\n\ts.sort(reverse=True)\n\tj=0\n\tfor i in range(n):\n\t\tif l[i]==0:\n\t\t\tl[i]=s[j]\n\t\t\tj+=1\n\t\telse:\n\t\t\tl[i]=ar[i]\n\tprint(*l)\n\n"", ""from collections import deque\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    \n    bckt = []\n    for i in range(n):\n        if not l[i]:\n            bckt.append(a[i])\n            a[i] = 10**9\n            \n    bckt.sort(reverse=True)\n    bckt = deque(bckt)\n    \n    for i in range(n):\n        if a[i] == 10**9:\n            a[i] = bckt.popleft()\n            \n    print(*a)"", ""t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n\n    s = []\n    out = [10**6] * n\n    for i in range(n):\n        if l[i]:\n            out[i] = a[i]\n        else:\n            s.append(a[i])\n    s.sort()\n    for i in range(n):\n        if out[i] == 10**6:\n            out[i] = s.pop()\n    print(' '.join(map(str,out)))\n"", ""for _ in range (int(input())):\n    n = int(input())\n    a =  [int(i) for i in input().split()]\n    l =  [int(i) for i in input().split()]\n    b = []\n    for i in range (n):\n        if l[i]==0:\n            b.append(a[i])\n    b.sort(reverse=True)\n    ind = 0\n    for i in range (n):\n        if l[i]==0:\n            a[i]=b[ind]\n            ind+=1\n    print(*a)"", ""from sys import stdin\ndef input(): return stdin.readline().rstrip()\n\nfor _ in range(int(input())):\n    L = int(input())\n    lockSort = []\n    s = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    for i, c in enumerate(s):\n        if l[i] == 0:\n            lockSort.append(c)\n    lockSort = sorted(lockSort)[::-1]\n    cnt = 0\n    for i, c in enumerate(s):\n        if l[i] == 1:\n            print(c, end=\"" \"")\n        else:\n            print(lockSort[cnt], end=\"" \"")\n            cnt += 1\n    print()\n"", ""for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    lock = list(map(int, input().split()))\n    b = []\n    for i in range(n):\n        if lock[i] == 0:\n            b.append(a[i])\n    b.sort()\n    b=b[::-1]\n    ind = 0\n    for i in range(n):\n        if lock[i] == 0:\n            a[i]=b[ind]\n            ind+=1\n    a=[str(i) for i in a]\n    print(\"" \"".join(a))"", ""\nINF = float('inf')\n\n\ndef prod(arr):\n    ret = 1\n    for x in arr:\n        ret *= x\n\n    return ret\n\n\ndef tc():\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n\n    uis = []\n    for i in range(n):\n        if not l[i]:\n            uis.append(i)\n\n    uvals = [a[i] for i in uis]\n    uvals.sort()\n\n    for i in uis:\n        a[i] = uvals.pop()\n\n    print(' '.join(map(str, a)))\n\n\n################\nT = int(input())\nfor _ in range(T):\n    tc()\n"", ""t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    b = []\n    for i in range(n):\n        if l[i] == 0:\n            b.append(a[i])\n    b.sort()\n    b.reverse()\n    j = 0\n    for i in range(n):\n        if l[i] == 0:\n            a[i] = b[j]\n            j += 1\n    print(*a)"", ""input=__import__('sys').stdin.readline\nfor _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    blocked=[]\n    binds=[]\n    b=list(map(int,input().split()))\n    for i in range(n):\n        if not b[i]:blocked+=a[i],;binds+=i,\n    blocked.sort()\n    for i in range(len(binds)):\n        a[binds[i]]=blocked[i]\n    k1=-1\n    cs=0\n    for i in range(n):\n        cs+=a[i]\n        if cs<0:k1=i\n    ans1=a.copy()\n    blocked.reverse()\n    for i in range(len(binds)):\n        a[binds[i]]=blocked[i]\n    k2=-1\n    cs=0\n    for i in range(n):\n        cs+=a[i]\n        if cs<0:k2=i\n    ans2=a.copy()\n    ans=ans1 if k1<k2 else ans2\n    print(*ans)"", ""import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n=int(input())\n    A=list(map(int,input().split()))\n    l=list(map(int,input().split()))\n\n    B=[]\n    for i in range(n):\n        if l[i]==0:\n            B.append(A[i])\n    B.sort(reverse=True)\n\n    ind=0\n    for i in range(n):\n        if l[i]==0:\n            A[i]=B[ind]\n            ind+=1\n\n    print(*A)\n            \n\n    \n    \n    \n"", ""t = int(input())\nfor i in range(t):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    st = list(map(int, input().split()))\n    sv = []\n    for j in range(n):\n        if st[j] == 0:\n            sv.append(nums[j])\n    sv.sort(reverse=True)\n    new = []\n    k = 0\n    for j in range(n):\n        if st[j] == 1:\n            new.append(nums[j])\n        else:\n            new.append(sv[k])\n            k += 1\n    print(*new)"", ""t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int,input().split()))\n    l = list(map(int,input().split()))\n    b = []\n    if sum(l) < n: # exist non-blocked\n        for i in range(n):\n            if l[i] == 0:\n                b.append(a[i])\n        b.sort(reverse=True)\n        j = 0\n        for i in range(n):\n            if l[i] == 0:\n                print(b[j], end =' ')\n                j += 1\n            else:\n                print(a[i], end =' ')\n        print()\n    else:\n        for i in range(n):\n            print(a[i],end=' ')\n        print()"", ""import sys,os,io\ninput = sys.stdin.readline\n#input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\nT = int(input())\nans = [0]*T\nfor t in range(T):\n  N = int(input())\n  A = list(map(int, input().split()))\n  L = list(map(int, input().split()))\n  B = [A[i] for i in range(N) if L[i]==0]\n  B.sort()\n  ans[t] = []\n  for i in range(N):\n    if L[i]==0:\n      ans[t].append(B.pop())\n    else:\n      ans[t].append(A[i])\nfor a in ans:\n  print(*a)"", ""for _ in range(int(input())):\n    n = int(input())\n    *arr, = list(map(int, input().split()))\n    *locks, = list(map(int, input().split()))\n\n    locked = []\n    unlocked = []\n    for v, is_locked in zip(arr, locks):\n        if not is_locked:\n            unlocked.append(v)\n    unlocked.sort(reverse=True)\n    arr_idx = 0\n    unlocked_idx = 0\n    while unlocked_idx < len(unlocked) and arr_idx < len(arr):\n        if not locks[arr_idx]:\n            arr[arr_idx] = unlocked[unlocked_idx]\n            unlocked_idx += 1\n        arr_idx += 1\n    print(*arr)\n"", ""from math import inf, ceil\nfrom heapq import *\nfrom collections import defaultdict\n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    brr = list(map(int, input().split()))\n    crr = [arr[i] for i in range(n) if not brr[i]]\n    crr.sort(reverse=True)\n    ind = 0\n    for i in range(n):\n        if not brr[i]:\n            arr[i] = crr[ind]\n            ind += 1\n    print(*arr)"", ""def main():\n    n = int(input())\n    a = list(map(int,input().split()))\n    l = list(map(int,input().split()))\n    new_lst = []\n    for i in range(n):\n        if not l[i]:\n            new_lst.append(a[i])\n    new_lst = sorted(new_lst, reverse=True)\n    k = 0\n    for i in range(n):\n        if not l[i]:\n            a[i] = new_lst[k]\n            k += 1\n    sm = 0\n    for i in a:\n        print(i, end=\"" \"")\n    print()\n\ndef __starting_point():\n    t = int(input())\n    for i in range(t):\n        main()\n\n__starting_point()"", ""for _ in range(int(input())):\n    N = int(input())\n    List = [int(x) for x in input().split()]\n    Lock = [int(x) for x in input().split()]\n    X = []\n    for i in range(N):\n        if(not Lock[i]):\n            X.append(List[i])\n    X.sort(reverse  = True)\n    j = 0\n    for i in range(N):\n        if(not Lock[i]):\n            List[i] = X[j]\n            j+=1\n    print(*List)"", ""t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split(\"" \"")))\n    b = list(map(int, input().split(\"" \"")))\n    c=[]\n    for i in range(n):\n        if b[i]==0:\n            c.append(a[i])\n    c.sort(reverse=True)\n    k=0\n    for i in range(n):\n        if b[i]==0:\n            a[i]=c[k]\n            k+=1\n    print(\"" \"".join(str(j) for j in a))\n"", ""import sys\nimport heapq, functools, collections\nimport math, random\nfrom collections import Counter, defaultdict\n\n# available on Google, not available on Codeforces\n# import numpy as np\n# import scipy\n\n\ndef solve(arr, brr):  # fix inputs here\n    console(\""----- solving ------\"")\n\n    movable = []\n    for a,b in zip(arr,brr):\n        if b == 0:\n            movable.append(a)\n    \n    movable = sorted(movable)\n    # console(movable)\n\n    for i in range(len(arr)):\n        if brr[i] == 0:\n            arr[i] = movable.pop()\n\n    # return a string (i.e. not a list or matrix)\n    return arr \n\n\ndef console(*args):  # the judge will not read these print statement\n    print('\\033[36m', *args, '\\033[0m', file=sys.stderr)\n    return\n\n# fast read all\n# sys.stdin.readlines()\n\nfor case_num in range(int(input())):\n    # read line as a string\n    # strr = input()\n\n    # read line as an integer\n    k = int(input())\n    \n    # read one line and parse each word as a string\n    # lst = input().split()\n\n    # read one line and parse each word as an integer\n    arr = list(map(int,input().split()))\n    brr = list(map(int,input().split()))\n\n    # read matrix and parse as integers (after reading read nrows)\n    # lst = list(map(int,input().split()))\n    # nrows = lst[0]  # index containing information, please change\n    # grid = []\n    # for _ in range(nrows):\n    #     grid.append(list(map(int,input().split())))\n\n    res = solve(arr,brr)  # please change\n    \n    # Google - case number required\n    # print(\""Case #{}: {}\"".format(case_num+1, res))\n\n    # Codeforces - no case number required\n    print(\"" \"".join([str(x) for x in res]))\n"", ""import sys\ninput = sys.stdin.readline\nI = lambda : list(map(int,input().split()))\n\nt,=I()\nfor i in range(t):\n\tn,=I()\n\ta=I()\n\tl=I()\n\tar=[a[i] for i in range(n) if l[i]==0]\n\tar.sort(reverse=True)\n\tx=0\n\tfor i in range(n):\n\t\tif l[i]==0:\n\t\t\ta[i]=ar[x]\n\t\t\tx+=1\n\tprint(*a)\n"", ""from sys import stdin\ndef input(): return stdin.readline()\ndef lmi(): return list(map(int, input().split()))\n\nT = int(input())\nfor _ in range(T):\n    input()\n    temp = list()\n    s, l = lmi(), lmi()\n    for i, c in enumerate(s):\n        if l[i] == 0: temp.append(c)\n    temp = sorted(temp)[::-1]\n    cc = 0\n    for i, x in enumerate(s):\n        if l[i] == 1: print(x, end=\"" \"")\n        else:\n            print(temp[cc], end=\"" \"")\n            cc += 1\n    print()\n""]","{\n  ""inputs"": [\n    ""5\n3\n1 3 2\n0 0 0\n4\n2 -3 4 -1\n1 1 1 1\n7\n-8 4 -2 -6 4 7 1\n1 0 0 0 1 1 0\n5\n0 1 -4 6 3\n0 0 0 1 1\n6\n-1 7 10 4 -8 -1\n1 0 0 0 0 1\n""\n  ],\n  ""outputs"": [\n    ""3 2 1 \n2 -3 4 -1 \n-8 4 1 -2 4 7 -6 \n1 0 -4 6 3 \n-1 10 7 4 -8 -1 \n""\n  ]\n}"
https://codeforces.com/problemset/problem/1425/H,constructive algorithms,"Chaneka has a hobby of playing with animal toys. Every toy has a different fun value, a real number. Chaneka has four boxes to store the toys with specification:   The first box stores toys with fun values in range of $(-\infty,-1]$.  The second box stores toys with fun values in range of $(-1, 0)$.  The third box stores toys with fun values in range of $(0, 1)$.  The fourth box stores toys with fun value in range of $[1, \infty)$. \n\nChaneka has $A$, $B$, $C$, $D$ toys in the first, second, third, and fourth box, respectively. One day she decides that she only wants one toy, a super toy. So she begins to create this super toy by sewing all the toys she has.\n\nWhile the number of toys Chaneka has is more than 1, she takes two different toys randomly and then sews them together, creating a new toy. The fun value of this new toy is equal to the multiplication of fun values of the sewn toys. She then puts this new toy in the appropriate box. She repeats this process until she only has one toy. This last toy is the super toy, and the box that stores this toy is the special box.\n\nAs an observer, you only know the number of toys in each box initially but do not know their fun values. You also don't see the sequence of Chaneka's sewing. Determine which boxes can be the special box after Chaneka found her super toy.\n\n\n-----Input-----\n\nThe first line has an integer $T$ $(1 \le T \le 5 \cdot 10^4)$, the number of test cases.\n\nEvery case contains a line with four space-separated integers $A$ $B$ $C$ $D$ $(0 \le A, B, C, D \le 10^6, A + B + C + D > 0)$, which denotes the number of toys in the first, second, third, and fourth box, respectively.\n\n\n-----Output-----\n\nFor each case, print four space-separated strings. Each string represents the possibility that the first, second, third, and fourth box can be the special box from left to right.\n\nFor each box, print ""Ya"" (Without quotes, Indonesian for yes) if that box can be the special box. Print ""Tidak"" (Without quotes, Indonesian for No) otherwise.\n\n\n-----Example-----\nInput\n2\n1 2 0 1\n0 1 0 0\n\nOutput\nYa Ya Tidak Tidak\nTidak Ya Tidak Tidak\n\n\n\n-----Note-----\n\nFor the first case, here is a scenario where the first box is the special box:   The first box had toys with fun values $\{-3\}$.  The second box had toys with fun values $\{ -0.5, -0.5 \}$  The fourth box had toys with fun values $\{ 3 \}$ \n\nThe sewing sequence:   Chaneka sews the toy with fun $-0.5$ and $-0.5$ to a toy with fun $0.25$ and then put it in the third box.  Chaneka sews the toy with fun $-3$ and $0.25$ to a toy with fun $-0.75$ and then put it in the second box.  Chaneka sews the toy with fun $-0.75$ and $3$ to a toy with fun $-1.25$ and then put it in the first box, which then became the special box. \n\nHere is a scenario where the second box ends up being the special box:   The first box had toys with fun values $\{-3\}$  The second box had toys with fun values $\{ -0.33, -0.25 \}$.  The fourth box had toys with fun values $\{ 3 \}$. \n\nThe sewing sequence:   Chaneka sews the toy with fun $-3$ and $-0.33$ to a toy with fun $0.99$ and then put it in the third box.  Chaneka sews the toy with fun $0.99$ and $3$ to a toy with fun $2.97$ and then put in it the fourth box.  Chaneka sews the toy with fun $2.97$ and $-0.25$ to a toy with fun $-0.7425$ and then put it in the second box, which then became the special box.  There is only one toy for the second case, so Chaneka does not have to sew anything because that toy, by definition, is the super toy.","[""t = int(input())\nfor _ in range(t):\n  a, b, c, d = [int(i) for i in input().split(\"" \"")]\n  sgn = (a+b)%2\n  small = False\n  large = False\n  if a == 0 and d == 0:\n    small = True\n  if b == 0 and c == 0:\n    large = True\n  okay = [True] * 4\n  if sgn == 0:\n    okay[0] = False\n    okay[1] = False\n  else:\n    okay[2] = False\n    okay[3] = False\n  if small:\n    okay[0] = False\n    okay[3] = False\n  if large:\n    okay[1] = False\n    okay[2] = False\n  print(\"" \"".join([\""Ya\"" if okay[i] else \""Tidak\"" for i in range(4)]))"", ""t=int(input())\nfor you in range(t):\n    l=input().split()\n    a=int(l[0])\n    b=int(l[1])\n    c=int(l[2])\n    d=int(l[3])\n    z=a+b\n    if(z%2==0):\n        print(\""Tidak Tidak\"",end=\"" \"")\n        if(b>0 or c>0):\n            print(\""Ya\"",end=\"" \"")\n        else:\n            print(\""Tidak\"",end=\"" \"")\n        if(a>0 or d>0):\n            print(\""Ya\"")\n        else:\n            print(\""Tidak\"")\n    else:\n        if(a>0 or d>0):\n            print(\""Ya\"",end=\"" \"")\n        else:\n            print(\""Tidak\"",end=\"" \"")\n        if(b>0 or c>0):\n            print(\""Ya\"",end=\"" \"")\n        else:\n            print(\""Tidak\"",end=\"" \"")\n        print(\""Tidak Tidak\"")"", ""import sys\n\nt = int(input())\n\nfor i in range(t):\n    a1, a2, a3, a4  = list(map(int, input().split()))\n    \n    neg = (a1 + a2) % 2 == 1\n    \n    \n    large =  (a1 == 0 and a4 == 0)\n    small  = (a2 == 0 and a3 == 0)\n    \n    r1, r2, r3, r4 = True, True, True, True\n    if(neg):\n        r3, r4 = False, False\n    else:\n        r1, r2 = False, False\n        \n    if large:\n        r1, r4 = False,False\n        \n    if small:\n        r2, r3 = False, False\n        \n    res = ''\n    for j in [r1, r2, r3, r4]:\n        if (j):\n            res += 'Ya '\n        else:\n            res += 'Tidak '\n    \n    print(res[:-1])    \n        \n"", ""from sys import stdin, stdout\nfrom collections import defaultdict\ninput = stdin.readline\n\nfor _ in range(int(input())):\n\ta, b, c, d = map(int, input().split())\n\tsmall , large, positive = 0, 0, 1\n\tif a>0 or d>0:\n\t\tlarge = 1\n\tif b>0 or c>0:\n\t\tsmall = 1\n\tif (a+b)%2:\n\t\tpositive = 0\n\tl = list()\n\tif large and not positive:\n\t\tl.append('Ya')\n\telse:\n\t\tl.append('Tidak')\n\tif small and not positive:\n\t\tl.append('Ya')\n\telse:\n\t\tl.append('Tidak')\n\tif small and positive:\n\t\tl.append('Ya')\n\telse:\n\t\tl.append('Tidak')\n\tif large and positive:\n\t\tl.append('Ya')\n\telse:\n\t\tl.append('Tidak')\n\tprint(*l)"", ""t = int(input())\nfor _ in range(t):\n    a, b, c, d = list(map(int, input().split()))\n    possible = ['Ya', 'Ya', 'Ya', 'Ya']\n    if (a+b)%2 == 0:\n        possible[0] = 'Tidak'\n        possible[1] = 'Tidak'\n    else:\n        possible[2] = 'Tidak'\n        possible[3] = 'Tidak'\n    if (a+d) == 0:\n        possible[0] = 'Tidak'\n        possible[3] = 'Tidak'\n    if (b+c) == 0:\n        possible[1] = 'Tidak'\n        possible[2] = 'Tidak'\n\n    print(' '.join(possible))\n"", ""t=int(input())\nwhile(t>0):\n    t=t-1\n    l=input().split()\n    a=int(l[0])\n    b=int(l[1])\n    c=int(l[2])\n    d=int(l[3])\n   # print(a,b,c,d)\n    #for a\n    if(a!=0):\n        if((a+b)%2==1):\n            print(\""Ya\"",end=\"" \"")\n        else:\n            print(\""Tidak\"",end=\"" \"")\n    else:\n        if(d>=1  and (a+b)%2==1):\n            print(\""Ya\"",end=\"" \"")\n        else:\n            print(\""Tidak\"",end=\"" \"")\n    if(b!=0):\n        if((a+b)%2):\n            print(\""Ya\"",end=\"" \"")\n        else:\n            print(\""Tidak\"",end=\"" \"")\n    else:\n        if(c>=1  and (a+b)%2==1):\n            print(\""Ya\"",end=\"" \"")\n        else:\n            print(\""Tidak\"",end=\"" \"")\n    if(c!=0):\n        if((a+b)%2==0):\n            print(\""Ya\"",end=\"" \"")\n        else:\n            print(\""Tidak\"",end=\"" \"")\n    else:\n        if(b>=1  and (a+b)%2==0):\n            print(\""Ya\"",end=\"" \"")\n        else:\n            print(\""Tidak\"",end=\"" \"")\n    if(d!=0):\n        if((a+b)%2==0):\n            print(\""Ya\"",end=\"" \"")\n        else:\n            print(\""Tidak\"",end=\"" \"")\n    else:\n        if(a>=1  and (a+b)%2==0):\n            print(\""Ya\"",end=\"" \"")\n        else:\n            print(\""Tidak\"",end=\"" \"")\n    print()"", ""for _ in range(int(input())):\n    a,b,c,d=list(map(int,input().split()))\n    if (a+b)%2==0:\n        if (b!=0 or c!=0) and (a!=0 or d!=0):\n            print(\""Tidak Tidak Ya Ya\"")\n        elif d!=0 or a!=0:\n            print(\""Tidak Tidak Tidak Ya\"")\n        elif b!=0 or c!=0:\n            print(\""Tidak Tidak Ya Tidak\"")\n    else:\n        if (b!=0 or c!=0) and (a!=0 or d!=0):\n            print(\""Ya Ya Tidak Tidak\"")\n        elif d!=0 or a!=0:\n            print(\""Ya Tidak Tidak Tidak\"")\n        elif b!=0 or c!=0:\n            print(\""Tidak Ya Tidak Tidak\"")\n    \n            \n"", ""\nt = int(input())\nfor i in range(t):\n    a, b, c, d = list(map(int, input().split()))\n    ans = ['Tidak', 'Tidak', 'Tidak', 'Tidak']\n    if ((a + b) % 2 == 1) and ((a + d) > 0):\n        ans[0] = 'Ya'\n    if ((a + b) % 2 == 1) and (((a + d) == 0) or ((b + c) > 0)):\n        ans[1] = 'Ya'\n    if ((a + b) % 2 == 0) and (((a + d) == 0) or ((b + c) > 0)):\n        ans[2] = 'Ya'\n    if ((a + b) % 2 == 0) and ((a + d) > 0):\n        ans[3] = 'Ya'\n    print(' '.join(ans))\n""]","{\n  ""inputs"": [\n    ""2\n1 2 0 1\n0 1 0 0\n""\n  ],\n  ""outputs"": [\n    ""Ya Ya Tidak Tidak\nTidak Ya Tidak Tidak\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1291/B,"greedy,implementation","You're given an array $a_1, \ldots, a_n$ of $n$ non-negative integers.\n\nLet's call it sharpened if and only if there exists an integer $1 \le k \le n$ such that $a_1 < a_2 < \ldots < a_k$ and $a_k > a_{k+1} > \ldots > a_n$. In particular, any strictly increasing or strictly decreasing array is sharpened. For example:  The arrays $[4]$, $[0, 1]$, $[12, 10, 8]$ and $[3, 11, 15, 9, 7, 4]$ are sharpened;  The arrays $[2, 8, 2, 8, 6, 5]$, $[0, 1, 1, 0]$ and $[2, 5, 6, 9, 8, 8]$ are not sharpened. \n\nYou can do the following operation as many times as you want: choose any strictly positive element of the array, and decrease it by one. Formally, you can choose any $i$ ($1 \le i \le n$) such that $a_i>0$ and assign $a_i := a_i - 1$.\n\nTell if it's possible to make the given array sharpened using some number (possibly zero) of these operations.\n\n\n-----Input-----\n\nThe input consists of multiple test cases. The first line contains a single integer $t$ ($1 \le t \le 15\ 000$)  — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \le n \le 3 \cdot 10^5$).\n\nThe second line of each test case contains a sequence of $n$ non-negative integers $a_1, \ldots, a_n$ ($0 \le a_i \le 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, output a single line containing ""Yes"" (without quotes) if it's possible to make the given array sharpened using the described operations, or ""No"" (without quotes) otherwise.\n\n\n-----Example-----\nInput\n10\n1\n248618\n3\n12 10 8\n6\n100 11 15 9 7 8\n4\n0 1 1 0\n2\n0 0\n2\n0 1\n2\n1 0\n2\n1 1\n3\n0 1 0\n3\n1 0 1\n\nOutput\nYes\nYes\nYes\nNo\nNo\nYes\nYes\nYes\nYes\nNo\n\n\n\n-----Note-----\n\nIn the first and the second test case of the first test, the given array is already sharpened.\n\nIn the third test case of the first test, we can transform the array into $[3, 11, 15, 9, 7, 4]$ (decrease the first element $97$ times and decrease the last element $4$ times). It is sharpened because $3 < 11 < 15$ and $15 > 9 > 7 > 4$.\n\nIn the fourth test case of the first test, it's impossible to make the given array sharpened.","[""for _ in range(int(input())):\n    n=int(input())\n    li=list(map(int,input().split()))\n    ans=0\n    for i in range(n):\n        if li[i]>=i:\n            ans+=1\n        else:\n            break\n    for i in range(n):\n        if li[n-1-i]>=i:\n            ans+=1\n        else:\n            break\n    if ans>n:\n        print(\""Yes\"")\n    else:\n        print(\""No\"")"", ""for nt in range(int(input())):\n\tn=int(input())\n\tl=list(map(int,input().split()))\n\tpoint = -1\n\tfor i in range(n):\n\t\tif l[i]<i:\n\t\t\tpoint = i-1\n\t\t\tbreak\n\tif point == -1:\n\t\tprint (\""Yes\"")\n\telse:\n\t\tflag=0\n\t\tfor i in range(n-1,point-1,-1):\n\t\t\tif l[i]<(n-1-i):\n\t\t\t\tflag=1\n\t\t\t\tprint (\""No\"")\n\t\t\t\tbreak\n\t\tif flag==0:\n\t\t\tprint (\""Yes\"")"", ""t = int(input().rstrip())\n\nfor i in range(t):\n    n = int(input().rstrip())\n    nums = list(map(int, input().rstrip().split()))\n    forw = 0\n    back = n-1\n\n    for j in range(n):\n        if nums[j] >= j:\n            forw = j\n        else:\n            break\n    \n    for j in range(1, n+1):\n        if nums[-j] >= j-1:\n            back = n-j\n        else:\n            break\n    \n    if forw >= back:\n        print(\""Yes\"")\n    else:\n        print(\""No\"")"", ""def f(a):\n    for i in range(len(a)):\n        if a[i] < i: return i-1\n    return len(a)-1\n\ndef solve(a):\n    i = f(a)\n    j = len(a) - 1 - f(a[::-1])\n    return \""Yes\"" if i >= j else \""No\""\n\n\nn = int(input())\nfor i in range(n):\n    input()\n    a = list(map(int, input().strip().split()))\n    print(solve(a))"", ""import sys\ninput = sys.stdin.readline\n\nt = int(input())\n\nfor testcase in range(t):\n    n = int(input())\n    a = list(map(int,input().split()))\n\n    left = n-1\n    for i in range(n):\n        if a[i] <= i-1:\n            left = i-1\n            break\n    \n    right = 0\n    for i in range(n-1,-1,-1):\n        if a[i] < n-1-i:\n            right = i+1\n            break\n    \n\n    if right <= left:\n        print('Yes')\n    else:\n        print('No')"", ""T = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int,input().split()))\n    if N%2:\n        X = [i if i<N//2 else N-i-1 for i in range(N)]\n        if all(a>=x for a,x in zip(A,X)):\n            print('Yes')\n        else:\n            print('No')\n    else:\n        X = [i if i<N//2+1 else N-i-1 for i in range(N)]\n        if all(a>=x for a,x in zip(A,X)):\n            print('Yes')\n            continue\n        X[N//2-1], X[N//2] = X[N//2], X[N//2-1]\n        if all(a>=x for a,x in zip(A,X)):\n            print('Yes')\n        else:\n            print('No')\n""]","{\n  ""inputs"": [\n    ""10\n1\n248618\n3\n12 10 8\n6\n100 11 15 9 7 8\n4\n0 1 1 0\n2\n0 0\n2\n0 1\n2\n1 0\n2\n1 1\n3\n0 1 0\n3\n1 0 1\n""\n  ],\n  ""outputs"": [\n    ""Yes\nYes\nYes\nNo\nNo\nYes\nYes\nYes\nYes\nNo\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1341/B,"greedy,implementation","On February 14 Denis decided to give Valentine to Nastya and did not come up with anything better than to draw a huge red heart on the door of the length $k$ ($k \ge 3$). Nastya was very confused by this present, so she decided to break the door, throwing it on the mountains.\n\nMountains are described by a sequence of heights $a_1, a_2, \dots, a_n$ in order from left to right ($k \le n$). It is guaranteed that neighboring heights are not equal to each other (that is, $a_i \ne a_{i+1}$ for all $i$ from $1$ to $n-1$).\n\nPeaks of mountains on the segment $[l,r]$ (from $l$ to $r$) are called indexes $i$ such that $l < i < r$, $a_{i - 1} < a_i$ and $a_i > a_{i + 1}$. It is worth noting that the boundary indexes $l$ and $r$ for the segment are not peaks. For example, if $n=8$ and $a=[3,1,4,1,5,9,2,6]$, then the segment $[1,8]$ has only two peaks (with indexes $3$ and $6$), and there are no peaks on the segment $[3, 6]$.\n\nTo break the door, Nastya throws it to a segment $[l,l+k-1]$ of consecutive mountains of length $k$ ($1 \le l \le n-k+1$). When the door touches the peaks of the mountains, it breaks into two parts, after that these parts will continue to fall in different halves and also break into pieces when touching the peaks of the mountains, and so on. Formally, the number of parts that the door will break into will be equal to $p+1$, where $p$ is the number of peaks on the segment $[l,l+k-1]$.\n\nNastya wants to break it into as many pieces as possible. Help her choose such a segment of mountains $[l, l+k-1]$ that the number of peaks on it is maximum. If there are several optimal segments, Nastya wants to find one for which the value $l$ is minimal.\n\nFormally, you need to choose a segment of mountains $[l, l+k-1]$ that has the maximum number of peaks. Among all such segments, you need to find the segment that has the minimum possible value $l$.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \leq t \leq 10^4$)  — the number of test cases. Then the descriptions of the test cases follow.\n\nThe first line of each test case contains two integers $n$ and $k$ ($3 \leq k \leq n \leq 2 \cdot 10^5$)  — the number of mountains and the length of the door.\n\nThe second line of the input data set contains $n$ integers $a_1, a_2, \dots, a_n$ ($0 \leq a_i \leq 10 ^ 9$, $a_i \neq a_{i + 1}$)  — the heights of mountains.\n\nIt is guaranteed that the sum of $n$ over all the test cases will not exceed $2 \cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, output two integers $t$ and $l$  — the maximum number of parts that the door can split into, and the left border of the segment of length $k$ that the door should be reset to.\n\n\n-----Example-----\nInput\n5\n8 6\n1 2 4 1 2 4 1 2\n5 3\n3 2 3 2 1\n10 4\n4 3 4 3 2 3 2 1 0 1\n15 7\n3 7 4 8 2 3 4 5 21 2 3 4 2 1 3\n7 5\n1 2 3 4 5 6 1\n\nOutput\n3 2\n2 2\n2 1\n3 1\n2 3\n\n\n\n-----Note-----\n\nIn the first example, you need to select a segment of mountains from $2$ to $7$. In this segment, the indexes $3$ and $6$ are peaks, so the answer is $3$ (only $2$ peaks, so the door will break into $3$ parts). It is not difficult to notice that the mountain segments $[1, 6]$ and $[3, 8]$ are not suitable since they only have a $1$ peak (for the first segment, the $6$ index is not a peak, and for the second segment, the $3$ index is not a peak).\n\nIn the second example, you need to select a segment of mountains from $2$ to $4$. In this segment, the index $3$ is a peak, so the answer is $2$ (only $1$ peak, so the door will break into $2$ parts).\n\nIn the third example, you need to select a segment of mountains from $1$ to $4$. In this segment, the index $3$ is a peak, so the answer is $2$ (only $1$ peak, so the door will break into $2$ parts). You can see that on the segments $[2, 5]$, $[4, 7]$ and $[5, 8]$ the number of peaks is also $1$, but these segments have a left border greater than the segment $[1, 4]$, so they are not the correct answer.","[""for _ in range(int(input())):\n    n, k = tuple(map(int, input().split()))\n    arr = list(map(int, input().split()))\n\n    peaks = [0 for i in range(n)]\n    for i in range(1, n - 1):\n        if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]:\n            peaks[i] = 1\n\n    cnt = 0\n    max_peaks = 0\n    answer = 0\n\n    for i in range(k - 1):\n        cnt += peaks[i]\n        max_peaks += peaks[i]\n\n    for i in range(k - 1, n - 1):\n        cnt -= peaks[i - k + 2]\n        cnt += peaks[i]\n        if cnt > max_peaks:\n            max_peaks = cnt\n            answer = i - k + 2\n\n    print(max_peaks + 1, answer + 1)\n"", ""from math import *\nfrom random import *\nfor t in range(int(input())):\n    n, k = map(int, input().split())\n    mas = list(map(int, input().split()))\n    pick = [0 for i in range(n)]\n    for i in range(1, n - 1):\n        pick[i] = pick[i - 1]\n        if mas[i] > mas[i - 1] and mas[i] > mas[i + 1]:\n            pick[i] += 1\n    if n > 1:\n        pick[n - 1] = pick[n - 2]\n    mx = 0\n    mxotv = 0\n    for i in range(0, n - k + 1):\n        if i + k - 2 < 0:\n            continue\n        res = pick[i + k - 2]\n        res -= pick[i]\n        if res > mx:\n            mx = res\n            mxotv = i\n    print(mx + 1, mxotv + 1)"", ""#list(map(int,input().split()))\nt=int(input())\nfor _ in range(t):\n    n,k=list(map(int,input().split()))\n    aa=list(map(int,input().split()))\n    tot=0\n    ind=1\n    \n    for i in range(1,k-1):\n        if(aa[i]>aa[i-1] and aa[i]>aa[i+1]):\n            tot+=1\n  #  print(tot)\n    ma=tot+1\n    for i in range(1,n):\n        if(i+k-1>=n):\n            continue\n        if(aa[i]>aa[i-1] and aa[i]>aa[i+1]):\n            tot-=1\n        if(aa[i+k-2]>aa[i+k-3] and aa[i+k-2]>aa[i+k-1]):\n            tot+=1\n        if(tot+1>ma):\n            ma=tot+1\n            ind=i+1\n      #  print(tot)\n    print(ma,ind)\n            \n        \n    \n"", ""t = int(input())\nfor qq in range(t):\n    n, k = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n    p = 0\n    for i in range(n - k + 1, n - 1):\n        if m[i] > m[i - 1] and m[i] > m[i + 1]:\n            p += 1\n    mp = p\n    ii = n - k + 1\n    for i in range(n - k, 0, -1):\n        if m[i] > m[i - 1] and m[i] > m[i + 1]:\n            p += 1\n        if m[i + k - 2] > m[i + k - 3] and m[i + k - 2] > m[i + k - 1]:\n            p -= 1\n        if p >= mp:\n            mp = p\n            ii = i\n    print(mp + 1, ii)\n"", ""t=int(input())\nfor _ in range(t):\n    n,k=map(int,input().split())\n    arr=list(map(int,input().split()))\n    peaks=[0]*(n)\n    for i in range(1,n-1):\n        if arr[i]>arr[i-1] and arr[i]>arr[i+1]:\n            peaks[i]=1\n    acum=[0]\n    for i in range(1,n):\n        acum.append(acum[-1]+peaks[i])\n    maxs=0\n    pos=-1\n    for i in range(n-k,-1,-1):\n        tmp=acum[i+k-1]-acum[i]\n        if peaks[i+k-1]==1:\n            tmp-=1\n        if tmp>=maxs:\n            maxs=tmp\n            pos=i\n    print(maxs+1,pos+1)"", ""from _collections import deque\n\nfor _ in range(int(input())):\n    n, k = list(map(int, input().split()))\n    ar = list(map(int, input().split()))\n    picks = 0\n    lol = deque([])\n    for i in range(1, k - 1):\n        if ar[i - 1] < ar[i] > ar[i + 1]:\n            picks += 1\n            lol.append(i)\n    max_picks = picks\n    ans = 0\n    for i in range(k - 1, n - 1):\n        if len(lol) > 0 and lol[0] == i - k + 2:\n            lol.popleft()\n            picks -= 1\n        if ar[i - 1] < ar[i] > ar[i + 1]:\n            picks += 1\n            lol.append(i)\n        if picks > max_picks:\n            max_picks = picks\n            ans = i - k + 2\n    print(max_picks + 1, ans + 1)\n"", ""def mult_input():\n\treturn map(int,input().split())\n\ndef list_input():\n\treturn list(map(int,input().split()))\n\nfor nt in range(int(input())):\n\tn,k=mult_input()\n\tl=list(map(int,input().split()))\n\tans=0\n\tfor i in range(1,k-1):\n\t\tif l[i]>l[i-1] and l[i]>l[i+1]:\n\t\t\tans+=1\n\tind=1\n\ti=1\n\tcount=ans\n\twhile i<n-k+1:\n\t\tif l[i]>l[i-1] and l[i]>l[i+1]:\n\t\t\tcount-=1\n\t\tif l[i+k-2]>l[i+k-3] and l[i+k-2]>l[i+k-1]:\n\t\t\tcount+=1\n\t\tif count>ans:\n\t\t\tans=count\n\t\t\tind=i+1\n\t\ti+=1\n\tprint (ans+1,ind)"", ""from collections import defaultdict as dd\ndef ri():\n    return int(input())\n\ndef rl():\n    return list(map(int, input().split()))\n\n\ndef solve():\n    n, k = rl()\n    A = rl()\n    peaks = []\n    for i in range(1, n - 1):\n        if A[i] > max(A[i - 1], A[i + 1]):\n            peaks.append(1)\n        else:\n            peaks.append(0)\n\n    best = sum(peaks[:k-2])\n    curr = best\n    best_l = 0\n    for i in range(1, n - (k - 1)):\n        curr -= peaks[i - 1]\n        curr += peaks[i + k - 3]\n        if curr > best:\n            best = curr\n            best_l = i\n    return best + 1, best_l + 1\n\n\n\nt = ri()\nfor i in range(t):\n    print(*solve())\n"", ""import sys\nlines = sys.stdin.readlines()\n# nums = lists(map(int, lines[0].strip().split(\"" \"")))\nT = int(lines[0].strip())\nfor t in range(T):\n    (n, k) = list(map(int, lines[2*t+1].strip().split(\"" \"")))\n    nums = list(map(int, lines[2*t+2].strip().split(\"" \"")))\n    peaks = [0 for _ in range(n)]\n\n    for i in range(1, n-1):\n        if nums[i] > nums[i-1] and nums[i] > nums[i+1]: peaks[i] = 1\n    for i in range(1, n):\n        peaks[i] += peaks[i-1]\n    maxP = -1\n    maxIndex = -1\n    for i in range(n-k+1):\n        if peaks[i+k-2] - peaks[i] > maxP:\n            maxP = peaks[i+k-2] - peaks[i]\n            maxIndex = i\n    print(\""{} {}\"".format(maxP+1, maxIndex+1))\n"", ""import sys\n\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    peak = [0] + [1 if a[i - 1] < a[i] and a[i] > a[i + 1] else 0 for i in range(1, n - 1)] + [0]\n    b = [None] * (n - k + 1)\n    b[0] = sum(peak[1 : k - 1])\n    for i in range(1, n - k + 1):\n        b[i] = b[i - 1] - peak[i] + peak[i + k - 2]\n    p = max(b)    \n    print(p + 1, b.index(p) + 1)\n"", ""import sys\n# from collections import defaultdict\n# t=1\nt=int(input())\nfor i in range(t):\n    # n=int(input())\n    # n,m=list(map(int,sys.stdin.readline().strip().split()))\n    # a,b,c,d=list(sys.stdin.readline().strip().split())\n    n,k=list(map(int,sys.stdin.readline().strip().split()))\n    # if(n*(a+b)>=(c-d) and n*(a-b)<=(c+d)):\n    #     print(\""YES\"")\n    # else:\n    #     print(\""NO\"")\n    \n    a=list(map(int,sys.stdin.readline().strip().split()))\n    x=[0]*n\n    for j in range(1,n-1):\n        if(a[j]>a[j-1] and a[j]>a[j+1]):\n            x[j]=1\n    # print(a)\n    # print(x)\n    k=k-2\n    op=0\n    curr=0\n    curr=sum(x[:k])\n    # print(x)\n    # print(curr)\n    op=curr\n    op1=1\n\n    for j in range(k,n):\n        # op=max(op,curr)\n        curr=curr+x[j]-x[j-k]\n        if(curr>op):\n            # print(\""here\"")\n            op1=j-k+1\n            op=curr\n        # op=max(op,curr)\n    op=max(op,curr)\n    print(op+1,op1)"", ""t = int(input())\nfor ii in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = [0] * n\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            p[i] = 1\n    cur = 0\n    ind = k - 1\n    for i in range(k):\n        if i != 0 and i != k - 1:\n            cur += p[i]\n    ans = cur\n    ans_ind = k - 1\n    while ind < n:\n        if p[ind - k + 2]:\n            cur -= 1\n        if p[ind]:\n            cur += 1\n        if cur > ans:\n            ans = cur\n            ans_ind = ind + 1\n        ind += 1\n    print(ans + 1, ans_ind - k + 2)"", ""t = int(input())\nfor i in range(t):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    cnt = 0\n    for j in range(k):\n        if 0 < j < k - 1 and a[j - 1] < a[j] > a[j + 1]:\n            cnt += 1\n    ans = cnt\n    l = 0\n    for j in range(n - k):\n        if a[j + 2] < a[j + 1] > a[j]:\n            cnt -= 1\n        if a[j + k - 2] < a[j + k - 1] > a[j + k]:\n            cnt += 1\n        if cnt > ans:\n            ans = cnt\n            l = j + 1\n    print(ans + 1, l + 1)\n""]","{\n  ""inputs"": [\n    ""5\n8 6\n1 2 4 1 2 4 1 2\n5 3\n3 2 3 2 1\n10 4\n4 3 4 3 2 3 2 1 0 1\n15 7\n3 7 4 8 2 3 4 5 21 2 3 4 2 1 3\n7 5\n1 2 3 4 5 6 1\n""\n  ],\n  ""outputs"": [\n    ""3 2\n2 2\n2 1\n3 1\n2 3\n""\n  ]\n}"
