problem,tags,problem_statement,solution,input-output
https://codeforces.com/problemset/problem/1430/C,"constructive algorithms,data structures,greedy,implementation,math","Numbers $1, 2, 3, \dots n$ (each integer from $1$ to $n$ once) are written on a board. In one operation you can erase any two numbers $a$ and $b$ from the board and write one integer $\frac{a + b}{2}$ rounded up instead.\n\nYou should perform the given operation $n - 1$ times and make the resulting number that will be left on the board as small as possible. \n\nFor example, if $n = 4$, the following course of action is optimal:  choose $a = 4$ and $b = 2$, so the new number is $3$, and the whiteboard contains $[1, 3, 3]$;  choose $a = 3$ and $b = 3$, so the new number is $3$, and the whiteboard contains $[1, 3]$;  choose $a = 1$ and $b = 3$, so the new number is $2$, and the whiteboard contains $[2]$. \n\nIt's easy to see that after $n - 1$ operations, there will be left only one number. Your goal is to minimize it.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \le t \le 1000$) — the number of test cases.\n\nThe only line of each test case contains one integer $n$ ($2 \le n \le 2 \cdot 10^5$) — the number of integers written on the board initially.\n\nIt's guaranteed that the total sum of $n$ over test cases doesn't exceed $2 \cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, in the first line, print the minimum possible number left on the board after $n - 1$ operations. Each of the next $n - 1$ lines should contain two integers — numbers $a$ and $b$ chosen and erased in each operation.\n\n\n-----Example-----\nInput\n1\n4\n\nOutput\n2\n2 4\n3 3\n3 1","[""t=int(input())\nfor i in range(t):\n    n=int(input())\n    print(2)\n    print(n-1,n)\n    for i in range(n-2,0,-1):\n        print(i,i+2)"", ""for _ in range (int(input())):\n    n=int(input())\n    hold=n\n    res=[]\n    for i in range (n-1,0,-1):\n        res.append((hold,i))\n        hold=(hold+i+1)//2\n    print(hold)\n    for i in res:\n        print(*i)"", ""t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(2)\n    print(n-1, n)\n    for i in range(n-2):\n        print(n-2-i, n-i)"", ""import sys\nimport random\n# import numpy as np\nimport math\nimport copy\nfrom heapq import heappush, heappop, heapify\nfrom functools import cmp_to_key\nfrom bisect import bisect_left, bisect_right\nfrom collections import defaultdict, deque, Counter\n# sys.setrecursionlimit(1000000)\n# input aliases\ninput = sys.stdin.readline\ngetS = lambda: input().strip()\ngetN = lambda: int(input())\ngetList = lambda: list(map(int, input().split()))\ngetZList = lambda: [int(x) - 1 for x in input().split()]\n\nINF = float(\""inf\"")\n\nMOD = 10 ** 9 + 7\ndivide = lambda x: pow(x, MOD-2, MOD)\n\ndef judge(at, ax, ay, bt, bx, by):\n    if abs(at - bt) >= abs(ax - bx) + abs(ay - by):\n        return True\n    else:\n        return False\n\n\ndef solve():\n    n = getN()\n    if n == 2:\n        print(2)\n        print(1, 2)\n        return\n\n    print(2)\n    print(n-2, n)\n    print(n-1, n-1)\n    for i in range(n-3):\n        print(n-1-i, n-3-i)\n    return\n\ndef main():\n    n = getN()\n    for _ in range(n):\n        solve()\n\n    return\ndef __starting_point():\n    main()\n    # solve()\n\n__starting_point()"", ""t=int(input())\nfor you in range(t):\n    n=int(input())\n    print(2)\n    l=[i+1 for i in range(n)]\n    for i in range(n-1):\n        print(l[-1],l[-2])\n        z=(l[-1]+l[-2]+1)//2\n        l.pop(-1)\n        l.pop(-1)\n        l.append(z)\n"", ""for _ in range(int(input())):\n    n = int(input())\n    k = n\n    print(2)\n    for i in range(n-1,0,-1):\n        print(i,k)\n        if (k+i)%2!= 0:\n            k = (k+i)//2 + 1\n        else:\n            k = (k+i)//2\n        \n"", ""import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(2)\n    if n == 2:\n        print(1,2)\n    else:\n        print(n,n-2)\n        print(n-1,n-1)\n        for j in range(n-3):\n            print(n-1-j,n-1-j-2)   "", ""#dt = {} for i in x: dt[i] = dt.get(i,0)+1\nimport sys;input = sys.stdin.readline\n#import io,os; input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline #for pypy\ninp,ip = lambda :int(input()),lambda :[int(w) for w in input().split()]\n\nfor _ in range(inp()):\n    n = inp()\n    prev = n\n    print(2)\n    for i in range(n-1,0,-1):\n        print(i,prev)\n        prev = (i+prev-1)//2 +1"", ""T =  int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(range(1,N+1))\n    print(2)\n    while len(A) > 1:\n        a = A.pop()\n        b = A.pop()\n        c = (a+b+1)//2\n        print(a,b)\n        A.append(c)\n"", ""import sys, math\nimport io, os\n#data = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\nfrom bisect import bisect_left as bl, bisect_right as br, insort\nfrom heapq import heapify, heappush, heappop\nfrom collections import defaultdict as dd, deque, Counter\n#from itertools import permutations,combinations\ndef data(): return sys.stdin.readline().strip()\ndef mdata(): return list(map(int, data().split()))\ndef outl(var) : sys.stdout.write('\\n'.join(map(str, var))+'\\n')\ndef out(var) : sys.stdout.write(str(var)+'\\n')\n#from decimal import Decimal\n#from fractions import Fraction\n#sys.setrecursionlimit(100000)\nINF = float('inf')\nmod=10**9+7\n\n\nfor t in range(int(data())):\n    n=int(data())\n    out(2)\n    ans=[]\n    k=n\n    for i in range(n-1,0,-1):\n        ans.append(str(k)+' '+str(i))\n        k=(k+i+1)//2\n    outl(ans)\n"", ""from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop,heapify\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\n\nfrom itertools import accumulate\nfrom functools import lru_cache\n\nM = mod = 10 ** 9 + 7\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\n\nfor _ in range(val()):\n    n = val()\n    \n    print(2)\n    l = list(range(1, n + 1))\n    for i in range(n - 1):\n        a, b = l.pop(), l.pop()\n        print(a, b)\n        l.append((a + b + 1) // 2)\n"", ""from math import ceil\n\nn = int(input())\n\nfor _ in range(n):\n    k = int(input())\n    \n    arr = list(range(1, k+1))\n    o = []\n\n    for i in range(k-1):\n        a = arr.pop()\n        b = arr.pop()\n        o.append((a, b))\n        arr.append(ceil((a+b)/2))\n\n    print(arr[0])\n    for i in range(len(o)):\n        print(o[i][0], o[i][1])\n    \n"", ""import sys\ninput = sys.stdin.readline\n\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        N = int(input())\n\n        x = []\n        for i in range(1, N + 1):\n            x.append(i)\n\n        print(2)\n\n        while len(x) >= 2:\n            a = x.pop()\n            b = x.pop()\n            c = -(-(a + b) // 2)\n            print(a, b)\n            x.append(c)\n\n        \n    \n\ndef __starting_point():\n    main()\n\n\n\n__starting_point()"", ""t = int(input())\nns = []\nfor _ in range(t):\n    n = int(input())\n    ns.append(n)\n\nfor n in ns:\n    print(2)\n    print(n-1, n)\n    if n > 2:\n        for x in range(n, 2, -1):\n            print(x-2, x)\n"", ""t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n\n    print(2)\n    print('{0} {1}'.format(n-1, n))\n\n    for k in range(n, 2, -1):\n        print('{0} {1}'.format(k-2, k))\n"", ""def solve():\n    n = int(input())\n    if n == 2:\n        print(2)\n        print(1, 2)\n        return 0\n    lst = list(range(1, n + 1))\n    ans = []\n    ans.append([n-2,n])\n    ans.append([n-1,n-1])\n    lst.pop()\n    lst.pop()\n    lst.pop()\n    lst.append(n-1)\n    while len(lst) > 1:\n        a = lst[-1]\n        b = lst[-2]\n        c = (a + b + 1) // 2\n        ans.append([a,b])\n        lst.pop()\n        lst.pop()\n        lst.append(c)\n    print(lst[0])\n    for i in ans:\n        print(*i)\nfor i in range(int(input())):\n    solve()"", ""import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n=int(input())\n    print(2)\n    x=n\n    for i in range(n-1,0,-1):\n        print(x,i)\n        x=(x+i+1)//2\n\n    \n\n    \n"", ""\""\""\""T=int(input())\nfor _ in range(0,T):\n    n=int(input())\n    a,b=map(int,input().split())\n    s=input()\n    s=[int(x) for x in input().split()]\n    for i in range(0,len(s)):\n        a,b=map(int,input().split())\""\""\""\n\n\nT=int(input())\nfor _ in range(0,T):\n    n=int(input())\n    print(2)\n\n    num=n\n    for i in range(n-1,0,-1):\n        print(i,num)\n        if((num+i)%2==0):\n            num=(num+i)//2\n\n            \n        \n"", ""t = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = list(range(1, n+1))\n    ans = []\n    t = -1\n    for i in range(n-1):\n        ans.append((A[-2], A[-1]))\n        x = A.pop()\n        if (x+A[-1])%2 == 0:\n            A[-1] = (x+A[-1])//2\n        else:\n            A[-1] = (x+A[-1]+1)//2\n    print(A[0])\n    for i in range(len(ans)):\n        print(*ans[i])\n"", ""for _ in range(int(input())):\n    n = int(input())\n    print(2, flush=False)\n    print(f'{n} {n-1}', flush=False)\n    if n > 2:\n        print('\\n'.join(f'{x} {x-2}' for x in range(n, 2, -1)))\n"", ""# 3x + 5y + 7z\n\nt = int(input())\n\nwhile t:\n    t -= 1\n    n = int(input())\n    print(2)\n    arr = [n-1,n]\n    print(*arr)\n    for i in range(2,n):\n        arr = [n-i,n-i+2]\n        print(*arr)""]","{""inputs"": [""1\n4\n""], ""outputs"": [""2\n4 3\n4 2\n3 1\n""]}"
https://codeforces.com/problemset/problem/1418/A,math,"You are playing a very popular game called Cubecraft. Initially, you have one stick and want to craft $k$ torches. One torch can be crafted using one stick and one coal.\n\nHopefully, you've met a very handsome wandering trader who has two trade offers:  exchange $1$ stick for $x$ sticks (you lose $1$ stick and gain $x$ sticks).  exchange $y$ sticks for $1$ coal (you lose $y$ sticks and gain $1$ coal). \n\nDuring one trade, you can use only one of these two trade offers. You can use each trade offer any number of times you want to, in any order.\n\nYour task is to find the minimum number of trades you need to craft at least $k$ torches. The answer always exists under the given constraints.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \le t \le 2 \cdot 10^4$) — the number of test cases. Then $t$ test cases follow.\n\nThe only line of the test case contains three integers $x$, $y$ and $k$ ($2 \le x \le 10^9$; $1 \le y, k \le 10^9$) — the number of sticks you can buy with one stick, the number of sticks required to buy one coal and the number of torches you need, respectively.\n\n\n-----Output-----\n\nFor each test case, print the answer: the minimum number of trades you need to craft at least $k$ torches. The answer always exists under the given constraints.\n\n\n-----Example-----\nInput\n5\n2 1 5\n42 13 24\n12 11 12\n1000000000 1000000000 1000000000\n2 1000000000 1000000000\n\nOutput\n14\n33\n25\n2000000003\n1000000001999999999","[""for haaghfj in range(int(input())):\n    x,y,k = list(map(int,input().split()))\n    print(k + (y * k + k - 1 +x-2) // (x - 1))\n"", ""import sys\nimport math\nimport collections\nimport bisect\nimport itertools\nimport decimal\nimport copy\nimport heapq\n\n# import numpy as np\n\n# sys.setrecursionlimit(10 ** 6)\nINF = 10 ** 20\nMOD = 10 ** 9 + 7\n# MOD = 998244353\n\nni = lambda: int(sys.stdin.readline().rstrip())\nns = lambda: list(map(int, sys.stdin.readline().rstrip().split()))\nna = lambda: list(map(int, sys.stdin.readline().rstrip().split()))\nna1 = lambda: list([int(x) - 1 for x in sys.stdin.readline().rstrip().split()])\nflush = lambda: sys.stdout.flush()\n\n\n# ===CODE===\ndef main():\n    t = ni()\n\n    for _ in range(t):\n        x, y, k = ns()\n        ans = k\n        total = k + k * y - 1\n\n        ans += -(-total // (x - 1))\n        print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"", ""for _ in range(int(input())):\n    x, y, k = [int(s) for s in input().split()]\n    n = ((y + 1) * k - 1 + (x - 2)) // (x - 1)\n    print(n + k)\n"", ""q = int(input())\nfor t in range(q):\n    x, y, k = list(map(int, input().split()))\n    a = ((y + 1) * k - 1 + x - 1 - 1) // (x - 1)\n    b = k\n    print(a + b)\n"", ""t = int(input())\n\nfor i in range(t):\n    x, y, k = list(map(int, input().split()))\n\n    a = (y + 1) * k - 1\n\n    # print(a)\n\n    print((a - 1) // (x - 1) + 1 + k)\n"", ""from collections import defaultdict\nfrom queue import deque\n\n\ndef arrinp():\n    return [*list(map(int, input().split(' ')))]\n\n\ndef mulinp():\n    return list(map(int, input().split(' ')))\n\n\ndef intinp():\n    return int(input())\n\n\ndef solution():\n    x,y,k = mulinp()\n    num = y*k + k\n    ans = (num-1)//(x-1)\n    if (num-1)%(x-1) != 0:\n        ans += 1\n    ans += k\n    print(ans)\n\n\ntestcases = 1\ntestcases = int(input())\nfor _ in range(testcases):\n    solution()\n"", ""t=int(input())\nfor i in range(t):\n    z=list(map(int, input().split()))\n    x=z[0]\n    y=z[1]\n    k=z[2]\n    palok=k*y+k-1\n    ans=0\n    ans=palok//(x-1)\n    if palok%(x-1)!=0:\n        ans+=1\n    print(ans+k)\n"", ""tests = int(input())\nfor test in range(tests):\n    a = 1\n    x, y, k = list(map(int, input().split()))\n    a1 = (k * (y + 1) - 1 + x - 2) // (x - 1)\n    print(a1 + k)\n"", ""t = int(input())\nfor _ in range(t):\n    x, y, k = map(int, input().split())\n    n = (k * (y + 1) - 1 + (x - 2)) // (x - 1)\n    print(n + k)"", ""for _ in range(int(input())):\n    x, y, k = map(int, input().split())\n\n    print((k*y+k-1+x-2)//(x-1)+k)"", ""from math import ceil\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\nt = read_int()\nfor case_num in range(t):\n    x, y, k = read_ints()\n    a = (k * (y + 1) - 2) // (x - 1) + 1 + k\n    print(a)\n"", ""import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    x, y, k = [int(i) for i in input().split()]\n    \n    stick_need = k+k*y-1\n    \n    num_stick_trade = (stick_need+x-2)//(x-1)\n\n    \n    print(num_stick_trade+k)"", ""for _ in range(int(input())):\n\tx,y,k=map(int,input().split()) \n\ta=(y+1)*k-1 \n\tb=x-1 \n\tif a%b==0:\n\t\tc=a//b\n\telse:\n\t\tc=a//b+1 \n\tprint(c+k)"", ""import sys\n\nsys.setrecursionlimit(10**5)\nint1 = lambda x: int(x)-1\np2D = lambda x: print(*x, sep=\""\\n\"")\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline()[:-1]\n\nfor _ in range(II()):\n    x,y,k=MI()\n    a=(k*(y+1)-1+x-2)//(x-1)\n    print(a+k)\n"", ""import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\ndef solve():\n\tx, y, k = mints()\n\tta = k*(y+1)\n\td = ((ta-1)+(x-2))//(x-1)\n\tprint(d+k)\n\nfor i in range(mint()):\n\tsolve()\n"", ""#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor i in range(t):\n    x, y, k = map(int, input().split())\n    needed = k + y * k\n    trades = ((needed - 1) + (x - 2)) // (x - 1)\n    trades += k\n    print(trades)"", ""t = int(input())\n\nfor ii in range(t):\n\n\tx, y, k = map(int, input().split())\n\n\tcoals = k\n\tsticks = k\n\n\tsticks = k*y + k\n\n\tnum = (sticks-1)//(x-1)\n\n\tif (sticks-1)%(x-1) != 0:\n\t\tnum+=1\n\n\tnum += k\n\n\tprint(num)""]","{\n  ""inputs"": [\n    ""5\n2 1 5\n42 13 24\n12 11 12\n1000000000 1000000000 1000000000\n2 1000000000 1000000000\n""\n  ],\n  ""outputs"": [\n    ""14\n33\n25\n2000000003\n1000000001999999999\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1221/A,"brute force,greedy,math","You are playing a variation of game 2048. Initially you have a multiset $s$ of $n$ integers. Every integer in this multiset is a power of two. \n\nYou may perform any number (possibly, zero) operations with this multiset.\n\nDuring each operation you choose two equal integers from $s$, remove them from $s$ and insert the number equal to their sum into $s$.\n\nFor example, if $s = \{1, 2, 1, 1, 4, 2, 2\}$ and you choose integers $2$ and $2$, then the multiset becomes $\{1, 1, 1, 4, 4, 2\}$.\n\nYou win if the number $2048$ belongs to your multiset. For example, if $s = \{1024, 512, 512, 4\}$ you can win as follows: choose $512$ and $512$, your multiset turns into $\{1024, 1024, 4\}$. Then choose $1024$ and $1024$, your multiset turns into $\{2048, 4\}$ and you win.\n\nYou have to determine if you can win this game.\n\nYou have to answer $q$ independent queries.\n\n\n-----Input-----\n\nThe first line contains one integer $q$ ($1 \le q \le 100$) – the number of queries.\n\nThe first line of each query contains one integer $n$ ($1 \le n \le 100$) — the number of elements in multiset.\n\nThe second line of each query contains $n$ integers $s_1, s_2, \dots, s_n$ ($1 \le s_i \le 2^{29}$) — the description of the multiset. It is guaranteed that all elements of the multiset are powers of two. \n\n\n-----Output-----\n\nFor each query print YES if it is possible to obtain the number $2048$ in your multiset, and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES will all be recognized as positive answer).\n\n\n-----Example-----\nInput\n6\n4\n1024 512 64 512\n1\n2048\n3\n64 512 2\n2\n4096 4\n7\n2048 2 2048 2048 2048 2048 2048\n2\n2048 4096\n\nOutput\nYES\nYES\nNO\nNO\nYES\nYES\n\n\n\n-----Note-----\n\nIn the first query you can win as follows: choose $512$ and $512$, and $s$ turns into $\{1024, 64, 1024\}$. Then choose $1024$ and $1024$, and $s$ turns into $\{2048, 64\}$ and you win.\n\nIn the second query $s$ contains $2048$ initially.","[""for i in range(int(input())):\n    n=int(input())\n    s=list(map(int,input().split()))\n    a=0\n    for i in s:\n        if i<2049:a+=i\n    if a<2048:print(\""NO\"")\n    else:print(\""YES\"")"", ""t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort(reverse=True)\n    s=0\n    for j in a:\n        if j<=2048:\n            s+=j\n        if s==2048:\n            print(\""YES\"")\n            break\n    else:\n        print(\""NO\"")\n\n"", ""q = int(input())\nfor i in range(q):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    s = 0\n    for i in a:\n        if i <= 2048:\n            s += i\n    print(\""YES\"" if s >= 2048 else \""NO\"")\n"", ""for _ in range(int(input())):\n\tn = int(input())\n\ta = [*map(int, input().split())]\n\ta.sort(reverse=True)\n\tt = 2048\n\n\tfor i in a:\n\t\tif t - i >= 0:\n\t\t\tt -= i\n\n\tprint(['NO', 'YES'][t == 0])"", ""q = int(input())\nwhile q:\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    i = 0\n    d = False\n    while i < len(a) - 1:\n        if 2048 in a:\n            d = True\n            break\n        if a[i] == a[i + 1]:\n            a.append(a[i] + a[i + 1])\n            a.sort()\n            i += 2\n        else:\n            i += 1  \n    if 2048 in a:\n        d = True\n    if d:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n    q -= 1"", ""t=int(input())\nfor nt in range(t):\n\tn=int(input())\n\tl=list(map(int,input().split()))\n\tnew=[]\n\tfor i in l:\n\t\tif i<=2048:\n\t\t\tnew.append(i)\n\tnew.sort()\n\tif 2048 in new:\n\t\tprint (\""YES\"")\n\telse:\n\t\ts=0\n\t\tflag=0\n\t\tfor i in range(len(new)-1,-1,-1):\n\t\t\ts+=new[i]\n\t\t\tif s==2048:\n\t\t\t\tprint (\""YES\"")\n\t\t\t\tflag=1\n\t\t\t\tbreak\n\t\tif flag==0:\n\t\t\tprint (\""NO\"")"", ""for _ in range(int(input())):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    s=0\n    for i in arr:\n        if i<=2048:\n            s+=i\n    if s>=2048:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n\n"", ""import sys\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom itertools import permutations\ninput = lambda : sys.stdin.readline().rstrip()\ndef write(*args, sep=\"" \""):\n  for i in args:\n    sys.stdout.write(\""{}\"".format(i) + sep)\nINF = float('inf')\nMOD = int(1e9 + 7)\n\nfor t in range(int(input())):\n  n = int(input())\n  arr = list(map(int, input().split()))\n  d = defaultdict(int) \n\n  for i in arr:\n    d[i] += 1\n  \n  for i in range(0, 11):\n    x = d[1 << i] // 2\n    d[1 << (i + 1)] += x \n  if d[2048]:\n    print(\""YES\"")\n  else:\n    print(\""NO\"")\n\n"", ""q = int(input())\nfor rew in range(q):\n\tn = int(input())\n\tl = list(map(int,input().split()))\n\tl.sort()\n\twhile True:\n\t\tif 2048 in l:\n\t\t\tprint(\""YES\"")\n\t\t\tbreak\n\t\tif len(l) == 0:\n\t\t\tprint(\""NO\"")\n\t\t\tbreak\n\t\tif len(l) > 1 and l[0] == l[1]:\n\t\t\tl = [2*l[0]] + l[2:]\n\t\telse:\n\t\t\tl = l[1:]\n\t\tl.sort()\n"", ""t = int(input())\n\nfor _ in range(t):\n _ = input()\n L = [int(x) for x in input().split() if int(x) <= 2048]\n print(\""YES\"" if sum(L) >= 2048 else \""NO\"")"", ""import collections\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = collections.defaultdict(int)\n    for i in a:\n        d[i] += 1\n    for i in range(11):\n        d[2 ** (i + 1)] += d[2 ** i] // 2\n\n    if d[2 ** 11]:\n        print('YES')\n    else:\n        print('NO')\n\nt = int(input())\n\nfor _ in range(t):\n    solve()\n\n"", ""q=int(input())\nfor t in range(q):\n      n=int(input())\n      l=list(map(int,input().split()))\n      tot=0\n      for i in range(n):\n            if(l[i]<=2048):\n                  tot+=l[i]\n      if(tot>=2048):\n            print(\""YES\"")\n      else:\n            print(\""NO\"")\n"", ""tgt = (2048).bit_length() - 1\nfor _ in range(int(input())):\n    n = int(input())\n    c = [0] * 31\n    for x in input().split():\n        c[int(x).bit_length() - 1] += 1\n    for i in range(tgt):\n        c[i + 1] += c[i] // 2\n    print('YES' if c[tgt] else 'NO')"", ""T = int(input())\n\nwhile T > 0:\n    T -= 1\n    n = int(input())\n    A = map(int, input().split())\n\n    cnt = [0] * 40\n\n    for i in A:\n        pw = 0\n        while i > 1:\n            i //= 2\n            pw += 1\n        cnt[pw] += 1\n    \n    for i in range(12):\n        cnt[i+1] += cnt[i] // 2\n\n    if cnt[11] > 0:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")"", ""q = int(input())\nfor i in range(q):\n    n = int(input())\n    s1 = list(map(int,input().split()))\n    s1.sort()\n    num = 0\n    for i in s1:\n        if i > 2048:\n            break\n        num += i\n    if num >= 2048:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n"", ""q = int(input())\nfor _ in range(q):\n    n = int(input())\n    s = list(map(int, input().split()))\n    beki = [0]*50\n    for i in range(n):\n        beki[s[i].bit_length()-1] += 1\n\n    for i in range(29):\n        beki[i+1] += beki[i]//2\n\n    if beki[11] > 0:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n"", ""for _ in range(int(input())):\n    n = int(input())\n    S = [d for d in map(int, input().split()) if d <= 2048]\n    if sum(S) >= 2048:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")"", ""for _ in range(int(input())):\n    n = int(input())\n    l = [int(i) if int(i) <= 2048 else 0 for i in input().split()]\n    if(sum(l)>=2048):\n        print(\""YES\"")\n    else:\n        print(\""NO\"")"", ""t = int(input())\nfor _ in range(t):\n    input()\n    s = [int(x) for x in input().split()]\n    mysum = sum([x for x in s if x <= 2048])\n    print(\""YES\"" if mysum >= 2048 else \""NO\"")\n\n"", ""from sys import stdin\nq=int(stdin.readline().strip())\nfor i in range(q):\n    n=int(stdin.readline().strip())\n    s=list(map(int,stdin.readline().strip().split()))\n    flag=False\n    for j in range(12):\n        \n        x=2**j\n\n        s1=[]\n        cnt=0\n        for k in range(len(s)):\n            if s[k]==x:\n                cnt+=1\n            else:\n                s1.append(s[k])\n            if s[k]==2048:\n                flag=True\n        y=cnt//2\n        s1=s1+[x*2]*y\n        s=s1.copy()\n    if flag:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n"", ""for _ in range(int(input())):\n    N = int(input())\n    num = list(map(int, input().split()))\n    num.sort(reverse=True)\n    x = 0\n    ans = 'NO'\n    for k in num:\n        if k > 2048: continue\n        else: x += k\n        if x == 2048: ans = 'YES'\n    print(ans)"", ""Q = int(input())\n\ndef solve():\n    N = int(input())\n    S = list(map(int, input().split()))\n    S = sorted(S)\n\n    while len(S) > 1:\n        if S[0] == 2048:\n            return True\n\n        if S[0] == S[1]:\n            S = [2*S[0]] + S[2:]\n        else:\n            S = S[1:]\n        S = sorted(S)\n        \n    return 2048 in S\n    \n\nfor _ in range(Q):\n    if solve():\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n""]","{\n  ""inputs"": [\n    ""6\n4\n1024 512 64 512\n1\n2048\n3\n64 512 2\n2\n4096 4\n7\n2048 2 2048 2048 2048 2048 2048\n2\n2048 4096\n""\n  ],\n  ""outputs"": [\n    ""YES\nYES\nNO\nNO\nYES\nYES\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1405/B,"constructive algorithms,implementation","You're given an array $a$ of $n$ integers, such that $a_1 + a_2 + \cdots + a_n = 0$.\n\nIn one operation, you can choose two different indices $i$ and $j$ ($1 \le i, j \le n$), decrement $a_i$ by one and increment $a_j$ by one. If $i < j$ this operation is free, otherwise it costs one coin.\n\nHow many coins do you have to spend in order to make all elements equal to $0$?\n\n\n-----Input-----\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \le t \le 5000$). Description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($1 \le n \le 10^5$)  — the number of elements.\n\nThe next line contains $n$ integers $a_1, \ldots, a_n$ ($-10^9 \le a_i \le 10^9$). It is given that $\sum_{i=1}^n a_i = 0$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, print the minimum number of coins we have to spend in order to make all elements equal to $0$.\n\n\n-----Example-----\nInput\n7\n4\n-3 5 -3 1\n2\n1 -1\n4\n-3 2 -3 4\n4\n-1 1 1 -1\n7\n-5 7 -6 -4 17 -13 4\n6\n-1000000000 -1000000000 -1000000000 1000000000 1000000000 1000000000\n1\n0\n\nOutput\n3\n0\n4\n1\n8\n3000000000\n0\n\n\n\n-----Note-----\n\nPossible strategy for the first test case:   Do $(i=2, j=3)$ three times (free), $a = [-3, 2, 0, 1]$.  Do $(i=2, j=1)$ two times (pay two coins), $a = [-1, 0, 0, 1]$.  Do $(i=4, j=1)$ one time (pay one coin), $a = [0, 0, 0, 0]$.","[""t=int(input())\nwhile t>0 :\n    n=int(input())\n    a=list(map(int,input().split()))\n    an=0\n    s=0\n    for i in a :\n        if s+i>=0 :\n            s+=i \n        else :\n            s+=i\n            an-=s \n            s=0\n    print(an)\n    t-=1 "", ""\nT = int(input())\n\n#lets = 'abcdefghijklmnopqrstuvwxyz'\n#key = {lets[i]:i for i in range(26)}\n\nfor t in range(T):\n  n = int(input())\n  #n,k = map(int,input().split())\n  a = list(map(int,input().split()))\n  #a = input().split()\n  d = False\n  cu = 0\n  cu_m = 0\n  for i in range(n):\n    cu += a[i]\n    cu_m = min(cu_m,cu)\n  \n  print(-cu_m)"", ""tests = int(input())\nfor t in range(tests):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    curr = 0\n    res = 0\n    for item in ls:\n        curr += item\n        if curr < res:\n            res = curr\n    print(-res)"", ""def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        alst = list(map(int, input().split()))\n        ans = 0\n        total = 0\n        for a in alst:\n            total -= a\n            ans = max(ans, total)\n        print(ans)\n    \nmain()"", ""for _ in range (int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    r=0\n    avl=0\n    for i in a:\n        if i>0:\n            avl+=i\n        else:\n            i=abs(i)\n            d=min(avl,i)\n            avl-=d\n            r+=i-d\n    print(r)"", ""import bisect\nimport copy\nimport fractions\nimport functools\nimport heapq\nimport math\nimport random\nimport sys\n\n\ndef __starting_point():\n\n    T = int(input())\n\n    for t in range(T):\n        N = int(input())\n        A = list(map(int, input().split()))\n\n        total = 0\n        min_ = 0\n        for a in A:\n            total += a\n            min_ = min(min_, total)\n\n        print(str(abs(min_)))\n\n__starting_point()"", ""t = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = list(map(int,input().split()))\n    res = 0\n    temp = 0\n    for a in A:\n        temp+=a\n        res = min(res,temp)\n    print(-res)"", ""for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pre = [0]*(n+1)\n    for i in range(n):\n        pre[i+1] = pre[i]+a[i]\n    print(abs(min(pre)))"", ""t = int(input())\nwhile t:\n    t += -1\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    sm = 0\n    for i in l:\n        sm += i\n        ans = min(ans, sm)\n    print(abs(ans))"", ""\""\""\""\nAuthor: Q.E.D\nTime: 2020-09-06 09:39:09\n\""\""\""\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    quota = 0\n    for x in a:\n        k = abs(x)\n        if x >= 0:\n            quota += k\n        else:\n            r = max(0, k - quota)\n            quota -= (k - r)\n            ans += r\n    print(ans)\n"", ""#!/usr/bin/env pypy3\n\t\nfrom sys import stdin, stdout\n \ndef input():\n    return stdin.readline().strip()\n\ndef ans(A):\n\tA = A[::-1]\n\n\tret = float(\""-inf\"")\n\ts = 0\n\tfor a in A:\n\t\ts += a\n\t\tret = max(ret, s)\n\n\treturn ret\n\n\nT = int(input())\nfor t in range(T):\n\tinput()\n\tA = list(map(int, input().split()))\n\tprint(ans(A))\n"", ""t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    min = 0\n    s = 0\n    for i in range(n):\n        s = s + a[i]\n        if s < min:\n            min = s\n    print(abs(min))\n"", ""from collections import defaultdict as dd\nimport sys\ninput=sys.stdin.readline\nt=int(input())\nwhile t:\n    n=int(input())\n    #n,m=map(int,input().split())\n    l=list(map(int,input().split()))\n    st=0\n    for i in range(n):\n        if(l[i]>0):\n            st+=l[i]\n        else:\n            if(st):\n                mi=min(st,-l[i])\n                st-=mi\n    print(st)\n    t-=1"", ""from sys import stdin\nfrom math import ceil\ninp = lambda : stdin.readline().strip()\n\nt = int(inp())\n\nfor _ in range(t):\n    n = int(inp())\n    a = [int(x) for x in inp().split()]\n    cumm = 0\n    ans = 0\n    for i in range(n):\n        cumm += a[i]\n        if cumm < 0:\n            ans = min(ans,cumm)\n    print(-1*ans)"", ""t=int(input())\nfor t in range(t):\n\tn=int(input())\n\ta=[int(x) for x in input().split(' ')]\n\tb=[0]\n\tfor i in range(n):\n\t\tb.append(b[-1]+a[i])\n\t# print(b)\n\tmn=b[0]\n\tfor x in b:\n\t\tmn=min(mn,x)\n\tprint(abs(mn))\n\n"", ""for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n    cnt = 0\n    av = 0\n    for i in range(n):\n        if a[i]<0:\n            cr = min(-1*a[i],av)\n            a[i]+=cr\n            av-=cr\n            cnt+=a[i]\n            a[i]=0\n        else:\n            av+=a[i]\n    print(-1*cnt)"", ""# cook your dish here\n# code\n#    ___________________________________\n#   |                                   |\n#   |                                   |\n#   |        _,     _   _     ,_        |\n#   |    .-'` /     \\'-'/     \\ `'-.    |\n#   |   /    |      |   |      |    \\   |\n#   |  ;      \\_  _/     \\_  _/      ;  |\n#   | |         ``         ``         | |\n#   | |                               | |\n#   |  ;    .-.   .-.   .-.   .-.    ;  |\n#   |   \\  (   '.'   \\ /   '.'   )  /   |\n#   |    '-.;         V         ;.-'    |\n#   |        `                 `        |\n#   |                                   |\n#   |___________________________________|\n#   |                                   |\n#   |  Author      :   Ramzz            |\n#   |  Created On  :   21-07-2020       |\n#   |___________________________________|\n#\n#    _ __ __ _ _ __ ___  ________\n#   | '__/ _` | '_ ` _ \\|_  /_  /\n#   | | | (_| | | | | | |/ / / / \n#   |_|  \\__,_|_| |_| |_/___/___|\n#\n\nimport math\nimport collections\nfrom sys import stdin,stdout,setrecursionlimit\nfrom bisect import bisect_left as bsl\nfrom bisect import bisect_right as bsr\nimport heapq as hq\nsetrecursionlimit(2**20)\n\nt = 1\nt = int(stdin.readline())\n\nfor _ in range(t):\n    n = int(stdin.readline())\n    #s = stdin.readline().strip('\\n')\n    a = list(map(int, stdin.readline().rstrip().split()))\n    \n    ans = 0\n    s = 0\n    for i in range(n):\n        s += a[i]\n        if(s<0 and abs(s)>ans):\n            ans = abs(s)\n            \n    print(ans)\n    \n    \n"", ""from math import ceil\nfrom collections import deque\n\n\nfor _ in range(int(input())):\n\tn = int(input())\n\ta = [int(i) for i in input().split()]\n\tans = 0\n\ts = 0\n\tfor i in range(n):\n\t\tif a[i]<s:\n\t\t\tans += s-a[i]\n\t\t\ts = 0\n\t\telse:\n\t\t\ts -= a[i]\n\tprint(ans)\n"", ""#Codeforces.com round #668\n#Problem B\nimport sys\n\n#\n#BEGIN TEMPLATE\n#\ndef input():\n    return sys.stdin.readline()[:-1]\n\ndef getInt():\n    #Assumes next line consists of only one integer and returns an integer\n    return int(input())\n\ndef getIntIter():\n    return list(map(int, input().split()))\n\ndef getIntList():\n    return list(getIntIter())\n\n#\n#END TEMPLATE\n#\n\nfor _ in range(getInt()):\n    n = getInt()\n    nums = getIntList()\n    minSum = 0\n    currSum = 0\n    for num in nums:\n        currSum += num\n        minSum = min(currSum, minSum)\n    print(abs(minSum))\n"", ""for T in range(int(input())) :\n    n = int(input())\n    l = list(map(int,input().split()))\n    bal = 0 \n    ans = 0\n    for i in l :\n        if i >= 0 :\n            bal += i\n        else :\n            if abs(i) > bal :\n                ans += abs(i)-bal\n                bal = 0\n            else :\n                bal += i \n    print(ans)"", ""import sys\nimport math\ndef II():\n\treturn int(sys.stdin.readline())\n\ndef LI():\n\treturn list(map(int, sys.stdin.readline().split()))\n\ndef MI():\n\treturn list(map(int, sys.stdin.readline().split()))\n\ndef SI():\n\treturn sys.stdin.readline().strip()\nt = II()\nfor q in range(t):\n\tn = II()\n\ta = LI()\n\td = [0]*n\n\ts = 0\n\tfor i in range(n):\n\t\ts+=a[i]\n\t\td[i] = s\n\tans = min(d)\n\tif ans>0:\n\t\tans = 0\n\tprint(-ans)\n"", ""import math\nfrom collections import deque\nfrom sys import stdin, stdout\nfrom string import ascii_letters\nimport sys\nletters = ascii_letters\ninput = stdin.readline\n#print = stdout.write\n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    need = sum([i for i in arr if i >= 0])\n    was = 0\n    have = [0] * n\n    for i in range(n):\n        if i != 0:\n            have[i] = have[i - 1]\n        if arr[i] > 0:\n            have[i] += arr[i]\n    for i in range(n - 1, -1, -1):\n        if arr[i] < 0:\n            bf = min(abs(arr[i]), have[i] - was)\n            was += bf\n            need -= bf\n        else:\n            was = max(0, was - arr[i])\n    print(need)\n\n"", ""t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int,input().split()))\n    h = 0\n    ans = 0\n    for j in range(n):\n        h+=l[j]\n        if h<0:\n            ans = max(ans,abs(h))\n    print(ans)"", ""for __ in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    ans = 0\n    a = 0\n    b = 0\n    for elem in ar:\n        if elem < 0:\n            if b > -elem:\n                b += elem\n                a += elem\n            else:\n                ans += abs(elem) - b\n                b = 0\n                a += abs(elem) - b\n        else:\n            b += elem\n    print(ans)"", ""# Lack of emotion causes lack of progress and lack of motivation. Tony Robbins\n\nfor _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    s=0\n    ans=0\n    for x in a:\n        s+=x\n        ans=min(ans,s)\n    print(-ans)\n"", ""for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    m=a[0]\n    s=a[0]\n    for i in range(1,n):\n        s+=a[i]\n        m=min(m,s)\n    print(max(abs(m),0))"", ""import math\n\nt = int(input())\n\nfor q in range(t):\n    n = int(input())\n    P = [int(i) for i in input().split()]\n    c = 0\n    res = 0\n    for i in P:\n        if i > 0:\n            c += i\n        elif i < 0:\n            if i < -1 * c:\n                res += abs(i + c)\n                c = 0\n            else:\n                c += i\n    print(res)\n        \n"", ""for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int,input().split()))\n    pos = 0\n    i = 0\n    while i < n:\n        if arr[i] < 0:\n            if pos >= abs(arr[i]):\n                pos += arr[i]\n                arr[i] = 0\n            else:\n                arr[i] += pos\n                pos = 0\n        else:\n            pos += arr[i]\n        i += 1\n    print(pos)\n"", ""gans = []\nfor _ in range(int(input())):\n    n = int(input())\n    u = list(map(int, input().split()))\n    cur = 0\n    ans = 0\n    for i in range(n):\n        if u[i] == 0:\n            continue\n        if u[i] > 0:\n            cur += u[i]\n        else:\n            u[i] = -u[i]\n            if cur > u[i]:\n                cur -= u[i]\n            else:\n                ans += u[i] - cur\n                cur = 0\n        #print(cur, u[i])\n    gans.append(ans)\nprint('\\n'.join(map(str, gans)))\n"", ""from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop,heapify\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\n\nfrom itertools import accumulate\nfrom functools import lru_cache\n\nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n\ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\nfor _ in range(val()):\n    n = val()\n    l = li()\n\n\n    ans = curr = 0\n    for i in l:\n\n        if i >= 0:\n            curr += i\n            continue\n        else:\n            temp = min(curr, abs(i))\n            curr -= temp\n        if abs(i) > temp:\n            ans += abs(i) - temp\n    print(ans)\n"", ""\""\""\""T=int(input())\nfor _ in range(0,T):\n    n=int(input())\n    a,b=map(int,input().split())\n    s=input()\n    s=[int(x) for x in input().split()]\n    for i in range(0,len(s)):\n        a,b=map(int,input().split())\""\""\""\n\n\n\nT=int(input())\nfor _ in range(0,T):\n    n=int(input())\n    s=[int(x) for x in input().split()]\n    nrem = 0\n    ans=0\n    for i in range(len(s)-1,-1,-1):\n        if(s[i]>0):\n            tt=min(nrem,s[i])\n            s[i]-=tt\n            ans+=s[i]\n            nrem-=tt\n        else:\n            nrem+=abs(s[i])\n\n    print(ans)\n""]","{\n  ""inputs"": [\n    ""7\n4\n-3 5 -3 1\n2\n1 -1\n4\n-3 2 -3 4\n4\n-1 1 1 -1\n7\n-5 7 -6 -4 17 -13 4\n6\n-1000000000 -1000000000 -1000000000 1000000000 1000000000 1000000000\n1\n0\n""\n  ],\n  ""outputs"": [\n    ""3\n0\n4\n1\n8\n3000000000\n0\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1266/B,"constructive algorithms,math","Bob is playing with $6$-sided dice. A net of such standard cube is shown below.\n\n[Image]\n\nHe has an unlimited supply of these dice and wants to build a tower by stacking multiple dice on top of each other, while choosing the orientation of each dice. Then he counts the number of visible pips on the faces of the dice.\n\nFor example, the number of visible pips on the tower below is $29$ — the number visible on the top is $1$, from the south $5$ and $3$, from the west $4$ and $2$, from the north $2$ and $4$ and from the east $3$ and $5$.\n\n[Image]\n\nThe one at the bottom and the two sixes by which the dice are touching are not visible, so they are not counted towards total.\n\nBob also has $t$ favourite integers $x_i$, and for every such integer his goal is to build such a tower that the number of visible pips is exactly $x_i$. For each of Bob's favourite integers determine whether it is possible to build a tower that has exactly that many visible pips.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \leq t \leq 1000$) — the number of favourite integers of Bob. \n\nThe second line contains $t$ space-separated integers $x_i$ ($1 \leq x_i \leq 10^{18}$) — Bob's favourite integers.\n\n\n-----Output-----\n\nFor each of Bob's favourite integers, output ""YES"" if it is possible to build the tower, or ""NO"" otherwise (quotes for clarity).\n\n\n-----Example-----\nInput\n4\n29 34 19 38\n\nOutput\nYES\nYES\nYES\nNO\n\n\n\n-----Note-----\n\nThe first example is mentioned in the problem statement.\n\nIn the second example, one can build the tower by flipping the top dice from the previous tower.\n\nIn the third example, one can use a single die that has $5$ on top.\n\nThe fourth example is impossible.","[""n = input()\na = list(map(int, input().split()))\nfor i in a:\n\tif i % 7 == 0 or (i // 7) % 2 == 1 or i <= 14:\n\t\tprint('NO')\n\telse:\n\t\tprint('YES')"", ""n = int(input())\narr = list(map(int, input().split()))\nfor x in arr:\n    if x < 15:\n        print('NO')\n        continue\n    if x % 14 >= 7 or x % 14 == 0:\n        print('NO')\n        continue\n    else:\n        print('YES')\n\n"", ""n = int(input())\na = list(map(int, input().split()))\nfor i in a:\n    tmp = i%14\n    if i>=15 and tmp>=1 and tmp<=6:\n        print('YES')\n    else:\n        print('NO')\n"", ""n = int(input())\n\nfor x in map(int, input().split()):\n\tprint(\""YES\"" if x > 14 and x % 14 > 0 and x % 14 <= 6 else \""NO\"")"", ""n=int(input())\narr=list(map(int,input().split()))\nfor i in arr:\n\tif i<=14:\n\t\tprint(\""NO\"")\n\telse:\n\t\tflg=False\n\t\tfor j in range(1,7):\n\t\t\tif (i-j)%14==0:\n\t\t\t\tflg=True\n\t\tif flg:\n\t\t\tprint(\""YES\"")\n\t\telse:\n\t\t\tprint(\""NO\"")\n""]","{\n  ""inputs"": [\n    ""4\n29 34 19 38\n""\n  ],\n  ""outputs"": [\n    ""YES\nYES\nYES\nNO\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1223/B,strings,"You are given two strings of equal length $s$ and $t$ consisting of lowercase Latin letters. You may perform any number (possibly, zero) operations on these strings.\n\nDuring each operation you choose two adjacent characters in any string and assign the value of the first character to the value of the second or vice versa.\n\nFor example, if $s$ is ""acbc"" you can get the following strings in one operation:   ""aabc"" (if you perform $s_2 = s_1$);  ""ccbc"" (if you perform $s_1 = s_2$);  ""accc"" (if you perform $s_3 = s_2$ or $s_3 = s_4$);  ""abbc"" (if you perform $s_2 = s_3$);  ""acbb"" (if you perform $s_4 = s_3$); \n\nNote that you can also apply this operation to the string $t$.\n\nPlease determine whether it is possible to transform $s$ into $t$, applying the operation above any number of times.\n\nNote that you have to answer $q$ independent queries.\n\n\n-----Input-----\n\nThe first line contains one integer $q$ ($1 \le q \le 100$) — the number of queries. Each query is represented by two consecutive lines.\n\nThe first line of each query contains the string $s$ ($1 \le |s| \le 100$) consisting of lowercase Latin letters.\n\nThe second line of each query contains the string $t$ ($1 \le |t| \leq 100$, $|t| = |s|$) consisting of lowercase Latin letters.\n\n\n-----Output-----\n\nFor each query, print ""YES"" if it is possible to make $s$ equal to $t$, and ""NO"" otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will all be recognized as positive answer).\n\n\n-----Example-----\nInput\n3\nxabb\naabx\ntechnocup\ntechnocup\na\nz\n\nOutput\nYES\nYES\nNO\n\n\n\n-----Note-----\n\nIn the first query, you can perform two operations $s_1 = s_2$ (after it $s$ turns into ""aabb"") and $t_4 = t_3$ (after it $t$ turns into ""aabb""). \n\nIn the second query, the strings are equal initially, so the answer is ""YES"".\n\nIn the third query, you can not make strings $s$ and $t$ equal. Therefore, the answer is ""NO"".","[""for _ in range(int(input())):\n    print(\""YES\"" if set(input()).intersection(input()) else \""NO\"")\n"", ""for _ in range(int(input())):\n    s = input()\n    t = input()\n    ans = 'NO'\n    for c in s:\n        if c in t:\n            ans = 'YES'\n            break\n    print(ans)"", ""q = int(input())\nfor z in range(q):\n    s = input()\n    t = input()\n    for c in s:\n        if c in t:\n            print('YES')\n            break\n    else:\n        print('NO')"", ""q = int(input())\nfor qq in range(q):\n    s1 = input()\n    s2 = input()\n    for i in s1:\n        if i in s2:\n            print('YES')\n            break\n    else:\n        print('NO')\n    \n\n\n"", ""q = int(input())\nfor i in range(q):\n    a = input()\n    b = input()\n    done = False\n    for i in a:\n        if i in b:\n            done = True\n            break\n    print('YES' if done else 'NO')"", ""n = int(input())\nfor i in range(n):\n    a = input()\n    b = input()\n    a, b = min(a, b), max(a, b)\n    h = True\n    for j in range(len(a)):\n        if a[j] in b:\n            print('YES')\n            h = False\n            break\n    if h:\n        print('NO')\n\n"", ""for _ in range(int(input())):\n    line1 = input()\n    line2 = input()\n    if set(line1) & set(line2):\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n"", ""for i in range(int(input())):\n    s1 = set(input())\n    s2 = set(input())\n    if len(s1 & s2) > 0:\n        print(\""YES\"")\n    else:\n        print(\""NO\"")\n    \n"", ""q = int(input())\nfor i in range(q):\n    s = input()\n    t = input()\n    s = set(s)\n    t = set(t)\n    if len(s.intersection(t)) > 0:\n        print('YES')\n    else:\n        print('NO')"", ""a = int(input())\nfor i in range(a):\n    b = input()\n    c = input()\n    y = 0\n    for i in b:\n        if i in c:\n            y = 1\n        else:\n            pass\n    if  y == 1:\n        print('YES')\n    else:\n        print(\""NO\"")"", ""for _ in range(int(input())):\n    s,t=input(), input()\n    k=\""NO\""\n    for i in s:\n        if i in t:\n            k=\""YES\""\n            break\n    print(k)"", ""n=int(input())\nfor i in range(n):\n    s=input()\n    t=input()\n    s1 = set()\n    s2=set()\n    for q in s:\n        s1.add(q)\n    for q in t:\n        s2.add(q)\n    if len(s1.intersection(s2)):\n        print('YES')\n    else:\n        print('NO')"", ""q = int(input())\nfor i in range(q):\n    s1 = input()\n    s2 = input()\n    if len(set(s1) & set(s2)) > 0:\n        print('YES')\n    else:\n        print('NO')\n"", ""q = int(input())\n\nfor i in range(q):\n    s = input()\n    t = input()\n    if set(s) & set(t):\n        print('YES')\n    else:\n        print('NO')\n"", ""q = int(input())\nfor i in range(q):\n    k = 0\n    s = input()\n    t = input()\n    for p in range(len(s)):\n        for j in range(len(s)):\n            if s[p] == t[j]:\n                k += 1\n    if k > 0:\n        print('YES')\n    else:\n        print('NO')"", ""import sys\nimport math\nfrom math import ceil\nimport bisect\n \ndef input():\n    return sys.stdin.readline().strip()\n \ndef iinput():\n    return int(input())\n \ndef finput():\n    return float(input())\n \ndef tinput():\n    return input().split()\n \ndef rinput():\n    return map(float, tinput())\n \ndef rlinput():\n    return list(rinput())\n\ndef sli():\n    return set(list(input()))\n \ndef modst(a, s):\n    res = 1\n    while s:\n        if s % 2:\n            res *= a\n        a *= a\n        s //= 2\n    return res   \n\ndef pro(x):\n    if x < 37:\n        return (x - 1) // 4\n    else:\n        return 8 - (x - 37) // 2\n \n \ndef main():  \n    q = sli()\n    w = sli()\n    flag = False\n    for i in q:\n        if i in w:\n            flag = True\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')\n        \nfor i in range(iinput()):\n    main() "", ""q = int(input())\nfor i in range(q):\n    c = True\n    s = input()\n    t = input()\n    for j in s:\n        if j in t:\n            print(\""YES\"")\n            c = False\n            break\n    if c:\n        print(\""NO\"")"", ""q=int(input())\nfor i in range(q):\n    test=set()\n    s=list(input())\n    t=list(input())\n    for item in s:\n        test.add(item)\n    for item in t:\n        if item in test:\n            print('YES')\n            break\n    else:\n            print('NO')\n"", ""n = int(input())\nfor i in range(n):\n    m1 = set(list(input()))\n    m2 = set(list(input()))\n    f = 'NO'\n    for el in m1:\n        if el in m2:\n            f = 'YES'\n    print(f)"", ""q = int(input())\nfor i in range(q):\n    s1 = input()\n    s2 = input()\n    f = 1\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            if f and s1[i] == s2[j]:\n                print(\""YES\"")\n                f = 0\n    if f:\n        print(\""NO\"")\n""]","{\n  ""inputs"": [\n    ""3\nxabb\naabx\ntechnocup\ntechnocup\na\nz\n""\n  ],\n  ""outputs"": [\n    ""YES\nYES\nNO\n""\n  ]\n}"
https://codeforces.com/problemset/problem/1326/A,"constructive algorithms,number theory","You are given a integer $n$ ($n > 0$). Find any integer $s$ which satisfies these conditions, or report that there are no such numbers:\n\nIn the decimal representation of $s$:   $s > 0$,  $s$ consists of $n$ digits,  no digit in $s$ equals $0$,  $s$ is not divisible by any of it's digits. \n\n\n-----Input-----\n\nThe input consists of multiple test cases. The first line of the input contains a single integer $t$ ($1 \leq t \leq 400$), the number of test cases. The next $t$ lines each describe a test case.\n\nEach test case contains one positive integer $n$ ($1 \leq n \leq 10^5$).\n\nIt is guaranteed that the sum of $n$ for all test cases does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, print an integer $s$ which satisfies the conditions described above, or ""-1"" (without quotes), if no such number exists. If there are multiple possible solutions for $s$, print any solution.\n\n\n-----Example-----\nInput\n4\n1\n2\n3\n4\n\nOutput\n-1\n57\n239\n6789\n\n\n\n-----Note-----\n\nIn the first test case, there are no possible solutions for $s$ consisting of one digit, because any such solution is divisible by itself.\n\nFor the second test case, the possible solutions are: $23$, $27$, $29$, $34$, $37$, $38$, $43$, $46$, $47$, $49$, $53$, $54$, $56$, $57$, $58$, $59$, $67$, $68$, $69$, $73$, $74$, $76$, $78$, $79$, $83$, $86$, $87$, $89$, $94$, $97$, and $98$.\n\nFor the third test case, one possible solution is $239$ because $239$ is not divisible by $2$, $3$ or $9$ and has three digits (none of which equals zero).","[""#JMD\n#Nagendra Jha-4096\n\n \nimport sys\nimport math\n\n#import fractions\n#import numpy\n \n###File Operations###\nfileoperation=0\nif(fileoperation):\n    orig_stdout = sys.stdout\n    orig_stdin = sys.stdin\n    inputfile = open('W:/Competitive Programming/input.txt', 'r')\n    outputfile = open('W:/Competitive Programming/output.txt', 'w')\n    sys.stdin = inputfile\n    sys.stdout = outputfile\n\n###Defines...###\nmod=1000000007\n \n###FUF's...###\ndef nospace(l):\n    ans=''.join(str(i) for i in l)\n    return ans\n \n \n \n##### Main ####\nt=int(input())\nfor tt in range(t):\n    n=int(input())\n\n    if n==1:\n        print(-1)\n    else:\n        s=\""2\""\n        for i in range(n-1):\n            s+='3'\n        print(s)\n    #n,k,s= map(int, sys.stdin.readline().split(' '))\n    #a=list(map(int,sys.stdin.readline().split(' ')))\n    \n    \n#####File Operations#####\nif(fileoperation):\n    sys.stdout = orig_stdout\n    sys.stdin = orig_stdin\n    inputfile.close()\n    outputfile.close()"", ""for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(-1)\n    else:\n        print(\""2\""+\""3\""*(n-1))"", ""def main():\n    import sys\n    input = sys.stdin.readline\n\n    for _ in range(int(input())):\n        N = int(input())\n        if N == 1:\n            print(-1)\n        else:\n            ans = ['3'] * N\n            ans[0] = '2'\n            print(''.join(ans))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"", ""tc = int(input())\nfor _ in range(tc):\n\tn = int(input())\n\tif n > 1:\n\t\tprint(\""2\"" + \""3\"" * (n-1))\n\telse:\n\t\tprint(-1)\n""]","{""inputs"": [""4\n1\n2\n3\n4\n""], ""outputs"": [""-1\n23\n233\n2333\n""]}"
